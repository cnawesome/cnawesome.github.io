<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Life &amp;&amp; Study</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://cnawesome.github.io/"/>
  <updated>2020-07-21T14:01:31.571Z</updated>
  <id>https://cnawesome.github.io/</id>
  
  <author>
    <name>alei</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>自制operation</title>
    <link href="https://cnawesome.github.io/2020/07/21/30%E5%A4%A9%E8%87%AA%E5%88%B6operation/"/>
    <id>https://cnawesome.github.io/2020/07/21/30%E5%A4%A9%E8%87%AA%E5%88%B6operation/</id>
    <published>2020-07-21T12:02:08.000Z</published>
    <updated>2020-07-21T14:01:31.571Z</updated>
    
    <content type="html"><![CDATA[<p>通用寄存器AX，BX，CX，DX，SP，BP，SI，DI。其中的前四个寄存器可分别分成AH，AL ;BH，BL;CH，CL;DH，DL的八位寄存器<br>指令指针寄存器（IP）、标志寄存器（FLAGS）、段寄存器CS，DS，ES，SS<br>BP为基指针（Base Pointer）寄存器，通过它减去一定的偏移值，来访问栈中的元素；<br>SP为堆栈指针（Stack Pointer）寄存器，它始终指向栈顶。</p><p>1 org 07c00h ; 告诉编译器程序加载到7c00处<br>2 mov ax, cs<br>3 mov ds, ax<br>4 mov es, ax<br>5 call DispStr ; 调用显示字符串例程<br>6 jmp $ ; 无限循环<br>7 DispStr:<br>8 mov ax, BootMessage<br>9 mov bp, ax ; ES:BP = 串地址<br>10 mov cx, 16 ; CX = 串长度<br>11 mov ax, 01301h ; AH = 13, AL = 01h<br>12 mov bx, 000ch ; 页号为0 (BH = 0) 黑底红字(BL = 0Ch,高亮)<br>13 mov dl, 0<br>14 int 10h ; 10h 号中断<br>15 ret<br>16 BootMessage: db “Hello,␣OS␣world!”<br>17 times 510 - ($-$$) db 0 ; 填充剩下的空间，使生成的二进制代码恰好为512字节<br>18 dw 0xaa55 ; 结束标志 </p><p>把这段代码用NASM编译一下： ▹ nasm boot.asm -o boot.bin<br>NASM是一个为可移植性与模块化而设计的一个80x86的汇编器。它支持相当多的目标文件格式，包括Linux和’’NetBSD/FreeBSD’’,’’a.out’’,’’ELF’’,’’COFF’’,微软16位的’’OBJ’’和’’Win32’’。它还可以输出纯二进制文件</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;通用寄存器AX，BX，CX，DX，SP，BP，SI，DI。其中的前四个寄存器可分别分成AH，AL ;BH，BL;CH，CL;DH，DL的八位寄存器&lt;br&gt;指令指针寄存器（IP）、标志寄存器（FLAGS）、段寄存器CS，DS，ES，SS&lt;br&gt;BP为基指针（Base Poin
      
    
    </summary>
    
    
      <category term="操作系统" scheme="https://cnawesome.github.io/categories/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
    
      <category term="操作系统" scheme="https://cnawesome.github.io/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
  </entry>
  
  <entry>
    <title>python爬虫</title>
    <link href="https://cnawesome.github.io/2020/07/14/python%E7%88%AC%E8%99%AB/"/>
    <id>https://cnawesome.github.io/2020/07/14/python%E7%88%AC%E8%99%AB/</id>
    <published>2020-07-14T13:36:06.000Z</published>
    <updated>2020-07-16T02:16:14.767Z</updated>
    
    <content type="html"><![CDATA[<hr><h3 id="爬虫"><a href="#爬虫" class="headerlink" title="爬虫"></a>爬虫</h3><p>模拟浏览器去访问和获取互联网上的信息</p><h4 id="爬虫分类"><a href="#爬虫分类" class="headerlink" title="爬虫分类"></a>爬虫分类</h4><p>通用爬虫<br>    特点：通过关键字锁定目标<br>聚焦网络爬虫<br>    特点：到互联网上有目标有选择的抓取目标或相关主题<br>增量式网络爬虫<br>    特点：只爬取新产生或者已经发生变化的网页，增量式更新<br>深层网络爬虫<br>    特点：不能通过静态页面爬取的内容。隐藏在表单中的一些数据</p><h4 id="实例-爬取bilibili某个专栏的图片"><a href="#实例-爬取bilibili某个专栏的图片" class="headerlink" title="实例 爬取bilibili某个专栏的图片"></a>实例 爬取bilibili某个专栏的图片</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">import requests</span><br><span class="line">import re</span><br><span class="line"></span><br><span class="line">#定义一个函数用来获取每张要P的图片的地址</span><br><span class="line">def get_urls():</span><br><span class="line">    &#39;&#39;&#39;  </span><br><span class="line">    1.找到要爬的目标网页</span><br><span class="line">    2.用正则来匹配不同图片的地址，产生一个匹配之后的结果</span><br><span class="line">    3.通过源代码和匹配之后的结果来找到获取图片的地址</span><br><span class="line">    &#39;&#39;&#39;</span><br><span class="line">    response &#x3D; requests.get(&#39;https:&#x2F;&#x2F;www.bilibili.com&#x2F;read&#x2F;cv6769711?from&#x3D;category_29&#39;)</span><br><span class="line">    &#39;&#39;&#39;</span><br><span class="line">    .匹配不换行的字符，</span><br><span class="line">    #任意数量,</span><br><span class="line">    ?:非贪婪匹配，匹配尽可能短的字符</span><br><span class="line">    ():不仅要匹配字符，字符还要使用</span><br><span class="line">    &#39;&#39;&#39;</span><br><span class="line">    url_add &#x3D; r&#39;&lt;img data-src&#x3D;&quot;(&#x2F;&#x2F;i0.hdslb.com&#x2F;bfs&#x2F;article&#x2F;.*?.jpg)&quot; .*?&#x2F;&gt;&#39;</span><br><span class="line">    #在网页源代码中查找图片的地址，第二个参数要求网页源代码</span><br><span class="line">    url_list &#x3D; re.findall(url_add,response.text)</span><br><span class="line">    print(url_list)</span><br><span class="line">    return url_list</span><br><span class="line"></span><br><span class="line">#下载数据</span><br><span class="line">def get_jpg(url,name):</span><br><span class="line">    response &#x3D; requests.get(url)</span><br><span class="line">    #下载路径</span><br><span class="line">    with open(&#39;D:\\others\\resultset\\p%d.jpg&#39; %name,&#39;wb&#39;) as ft:</span><br><span class="line">        ft.write(response.content)</span><br><span class="line"></span><br><span class="line">if __name__ &#x3D;&#x3D; &#39;__main__&#39;:</span><br><span class="line">    url_list &#x3D; get_urls()</span><br><span class="line">    name &#x3D; 1</span><br><span class="line">    for url in url_list:</span><br><span class="line">        com_url &#x3D; &#39;https:&#39; + url</span><br><span class="line">        get_jpg(com_url,name)</span><br><span class="line">        name +&#x3D; 1</span><br><span class="line">        print(com_url)</span><br></pre></td></tr></table></figure><p><img src="/2020/07/14/python%E7%88%AC%E8%99%AB/爬虫流程1.jpg" alt><br><img src="/2020/07/14/python%E7%88%AC%E8%99%AB/爬虫流程2.jpg" alt><br><img src="/2020/07/14/python%E7%88%AC%E8%99%AB/爬虫流程3.jpg" alt></p><p><img src="/2020/07/14/python%E7%88%AC%E8%99%AB/scrapy内容.jpg" alt></p><h4 id="scrapy"><a href="#scrapy" class="headerlink" title="scrapy"></a>scrapy</h4>]]></content>
    
    <summary type="html">
    
      
      
        &lt;hr&gt;
&lt;h3 id=&quot;爬虫&quot;&gt;&lt;a href=&quot;#爬虫&quot; class=&quot;headerlink&quot; title=&quot;爬虫&quot;&gt;&lt;/a&gt;爬虫&lt;/h3&gt;&lt;p&gt;模拟浏览器去访问和获取互联网上的信息&lt;/p&gt;
&lt;h4 id=&quot;爬虫分类&quot;&gt;&lt;a href=&quot;#爬虫分类&quot; class=&quot;heade
      
    
    </summary>
    
    
      <category term="python" scheme="https://cnawesome.github.io/categories/python/"/>
    
    
      <category term="爬虫" scheme="https://cnawesome.github.io/tags/%E7%88%AC%E8%99%AB/"/>
    
  </entry>
  
  <entry>
    <title>机器学习总结录</title>
    <link href="https://cnawesome.github.io/2020/06/30/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93%E5%BD%95/"/>
    <id>https://cnawesome.github.io/2020/06/30/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93%E5%BD%95/</id>
    <published>2020-06-30T01:46:44.000Z</published>
    <updated>2020-07-07T02:48:22.419Z</updated>
    
    <content type="html"><![CDATA[<h3 id="线性回归步骤总结"><a href="#线性回归步骤总结" class="headerlink" title="线性回归步骤总结"></a>线性回归步骤总结</h3><p>1.处理数据格式，将所拥有的数据处理成相应的格式<br>2.设置loss函数，计算样本之间的差别 $L(x)=[(ax+b)-y]^2$<br>3.目的是为了使预测的数据与样本之间的差别越来越小。即调整线性函数的参数，使得该函数能更好的拟合样本集。可以使用梯度下降算法<br>4.确定了线性函数，使用该函数生成预测数据</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;线性回归步骤总结&quot;&gt;&lt;a href=&quot;#线性回归步骤总结&quot; class=&quot;headerlink&quot; title=&quot;线性回归步骤总结&quot;&gt;&lt;/a&gt;线性回归步骤总结&lt;/h3&gt;&lt;p&gt;1.处理数据格式，将所拥有的数据处理成相应的格式&lt;br&gt;2.设置loss函数，计算样本之间的
      
    
    </summary>
    
    
      <category term="机器学习" scheme="https://cnawesome.github.io/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    
  </entry>
  
  <entry>
    <title>python note</title>
    <link href="https://cnawesome.github.io/2020/06/11/python-note/"/>
    <id>https://cnawesome.github.io/2020/06/11/python-note/</id>
    <published>2020-06-11T04:30:44.000Z</published>
    <updated>2020-07-18T01:58:47.034Z</updated>
    
    <content type="html"><![CDATA[<hr><h4 id="Numpy-下-array"><a href="#Numpy-下-array" class="headerlink" title="Numpy 下 array"></a>Numpy 下 array</h4><p>NumPy数组的下标从0开始。<br>同一个NumPy数组中所有元素的类型必须是相同的。</p><p>在详细介绍NumPy数组之前。先详细介绍下NumPy数组的基本属性。NumPy数组的维数称为秩（rank），一维数组的秩为1，二维数组的秩为2，以此类推。在NumPy中，每一个线性的数组称为是一个轴（axes），秩其实是描述轴的数量。比如说，二维数组相当于是两个一维数组，其中第一个一维数组中每个元素又是一个一维数组。所以一维数组就是NumPy中的轴（axes），第一个轴相当于是底层数组，第二个轴是底层数组里的数组。而轴的数量——秩，就是数组的维数。</p><p>Numpy是科学计算库,是一个强大的N维数组对象ndarray，是广播功能函数。其整合C/C++.fortran代码的工具 ，更是Scipy、Pandas等的基础.ndim ：维度<br>.shape ：各维度的尺度 （2，5）<br>.size ：元素的个数 10<br>.dtype ：元素的类型 dtype(‘int32’)<br>.itemsize ：每个元素的大小，以字节为单位 ，每个元素占4个字节<br>ndarray数组的创建<br>np.arange(n) ; 元素从0到n-1的ndarray类型<br>np.ones(shape): 生成全1<br>np.zeros((shape)， ddtype = np.int32) ： 生成int32型的全0<br>np.full(shape, val): 生成全为val<br>np.eye(n) : 生成单位矩阵np.ones_like(a) : 按数组a的形状生成全1的数组<br>np.zeros_like(a): 同理<br>np.full_like (a, val) : 同理np.linspace（1,10,4）： 根据起止数据等间距地生成数组<br>np.linspace（1,10,4, endpoint = False）：endpoint 表示10是否作为生成的元素 </p><p>np.concatenate<br>沿着给定的(axis=0 by default)axis拼接列表<br>参数：<br>a1,a2,… : 相同shape的一系列数组<br>axis : 数组将要连接的axis,默认为0（0代表的是列方向，1代表的是行的方向</p><p>.swapaxes(ax1, ax2) : 将两个维度调换<br>.flatten() : 对数组进行降维，返回折叠后的一位数组数组的类型变换数据类型的转换 </p><p>numpy线性代数<br>函数    描述<br>dot()    两个数组的点积，即元素对应相乘<br>vdot()    两个向量的点积<br>inner()    两个数组的内积<br>matmul()    两个数组的矩阵积<br>linalg.det()    计算输入矩阵的行列式<br>linalg.solve()    求解线性矩阵方程<br>linalg.inv()    计算矩阵的乘法逆矩阵</p><h4 id="数据切分问题"><a href="#数据切分问题" class="headerlink" title="数据切分问题"></a>数据切分问题</h4><pre><code>对于二维数据有以下办法：    1.使用data[：，0]类似列表切分的方式，不是列表切分，更像是矩阵切分。    2.使用loc,iloc函数，读取需要的矩阵部分。</code></pre><p>shape是查看数据有多少行多少列<br>reshape()是数组array中的方法，作用是将数据重新组织。reshape新生成数组和原数组公用一个内存，不管改变哪个都会互相影响</p><p>mean()函数功能：求取均值<br>经常操作的参数为axis，以m <em> n矩阵举例：<br>    axis 不设置值，对 m</em>n 个数求均值，返回一个实数<br>    axis = 0：压缩行，对各列求均值，返回 1<em> n 矩阵<br>    axis =1 ：压缩列，对各行求均值，返回 m </em>1 矩阵</p><h1 id="math函数"><a href="#math函数" class="headerlink" title="math函数"></a>math函数</h1><p>math —- 数学函数<br>该模块提供了对C标准定义的数学函数的访问。</p><p>这些函数不适用于复数；如果你需要计算复数，请使用 cmath 模块中的同名函数。<br>将支持计算复数的函数区分开的目的，来自于大多数开发者并不愿意像数学家一样需要学习复数的概念。得到一个异常而不是一个复数结果使得开发者能够更早地监测到传递给这些函数的参数中包含复数，进而调查其产生的原因。</p><p>math.ceil(x)<br>返回 x 的上限，即大于或者等于 x 的最小整数。如果 x 不是一个浮点数，则委托 x.<strong>ceil</strong>(), 返回一个 Integral 类的值</p><p>math.floor(x)<br>返回 x 的向下取整，小于或等于 x 的最大整数。如果 x 不是浮点数，则委托 x.<strong>floor</strong>() ，它应返回 Integral 值。</p><hr><h4 id="读python基础教程笔记"><a href="#读python基础教程笔记" class="headerlink" title="读python基础教程笔记"></a>读python基础教程笔记</h4><p>python里，<br>对象的属性表示对象中的变量和方法。<br>对象的状态由其属性（如名称）描述。</p><p>是类的定义————一种对象</p><p>python中有魔法方法，如<strong>init</strong>,这种方法以横线开头和结尾。<br>python中协议的概念：规范行为的规则</p><p>静态方法和类方法：包装在staticmethod和classmethod类的对象中</p><hr><p>with创建临时运行环境：</p><p>作用：with用于创建一个临时的运行环境，运行环境中的代码执行完后自动安全退出环境。</p><p>文件操作：使用open进行文件操作时建议使用with创建运行环境，可以不用close()方法关闭文件，无论在文件使用中遇到什么问题都能安全的退出，即使发生错误退出运行环境时也可以安全退出文件并给出报错信息。</p><hr><h4 id="python-视频"><a href="#python-视频" class="headerlink" title="python 视频"></a>python 视频</h4><p>lambda用来创建匿名函数<br>    根据参数计算表达式结果并返回。</p><h4 id="python-环境配置等问题"><a href="#python-环境配置等问题" class="headerlink" title="python 环境配置等问题"></a>python 环境配置等问题</h4><p><img src="/2020/06/11/python-note/python版本匹配问题.jpg" alt><br>可能有人在安装好的anaconda中，查看python版本发现是3.7怎么办呢？</p><p>那就创建一个python3.6环境即可，要知道anaconda很擅长做这些事</p><p>还是因为墙的问题，可能下载较慢，所以我们还是使用镜像网站吧，这次使用清华的：给anaconda添加该镜像网站：</p><p>conda config —add channels <a href="https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free/" target="_blank" rel="noopener">https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free/</a><br>conda config —set show_channel_urls yes<br>可以输入2次</p><p>conda config —add channels <a href="https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free/" target="_blank" rel="noopener">https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free/</a><br>这样该网站就置顶了</p><p>好了，创建Python3.6环境的命令很简单了：</p><p>conda create —name py36 python=3.6 anaconda<br>anaconda在这里的意思安装依赖包，所以要下载一会</p><p>接下来就激活该环境吧：</p><p>activate py36<br>然后再次输入如下命令验证python</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;hr&gt;
&lt;h4 id=&quot;Numpy-下-array&quot;&gt;&lt;a href=&quot;#Numpy-下-array&quot; class=&quot;headerlink&quot; title=&quot;Numpy 下 array&quot;&gt;&lt;/a&gt;Numpy 下 array&lt;/h4&gt;&lt;p&gt;NumPy数组的下标从0开始。&lt;br&gt;同一
      
    
    </summary>
    
    
    
      <category term="python" scheme="https://cnawesome.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>机器学习2.0</title>
    <link href="https://cnawesome.github.io/2020/06/08/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A02-0/"/>
    <id>https://cnawesome.github.io/2020/06/08/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A02-0/</id>
    <published>2020-06-08T04:26:18.000Z</published>
    <updated>2020-06-15T07:17:11.121Z</updated>
    
    <content type="html"><![CDATA[<hr><p>对数据做标签，即定义处理数据后的正确结果</p><p>监督学习：<br>根据当前步骤给出下一步操作</p><p>强化学习：<br>通过自己与自己训练，不需要标注</p><p>使用何种函数，即使用什么模型model</p><p>loss function ：损耗函数。输入是一个函数，输出是一个判断好不好的数，标量</p><p>根据损耗函数，挑选最好的函数。</p><p>梯度下降</p><p><img src="/2020/06/08/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A02-0/%E8%BF%87%E6%8B%9F%E5%90%88.jpg" alt></p><p>处理过拟合情况：正则化<br><img src="/2020/06/08/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A02-0/%E6%AD%A3%E5%88%99%E5%8C%96.jpg" alt><br><img src="/2020/06/08/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A02-0/%E6%AD%A3%E5%88%99%E5%8C%962.jpg" alt></p><p>偏差与方差</p><p>偏差表示样本点与测试值的差距，方差表示样本与方差的差距</p><p>一般，简单的model函数，偏差大，方差小，这种情况model underfitting；复杂的model偏差小，方差大，这种情况model overfitting</p><p>梯度下降：</p><p>1.调整学习率</p><p>学习率不能太大，也不能太小，太大会始终到不了</p><p>自动调整学习率。因为正常情况下学习率在梯度下降过程中是会越来越小的，所以自动调整实现成为可能。</p><p>使用梯度下降法，梯度不一定会下降。</p><p>梯度下降推导：</p><p>随机选取一个点，在这个点的周围画一个圆圈范围。<br>在该点的圆圈中找出一个最小值。</p><p><img src="/2020/06/08/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A02-0/%E6%A2%AF%E5%BA%A6%E4%B8%8B%E9%99%8D%E8%AF%81%E6%98%8E.jpg" alt><br><img src="/2020/06/08/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A02-0/%E6%A2%AF%E5%BA%A6%E4%B8%8B%E9%99%8D%E8%AF%81%E6%98%8E3.jpg" alt><br>如何找最小值？使用泰勒展开<br>泰勒展开：任意一个点的函数可以使用邻近的点近似表示<br>将损耗函数使用该点的泰勒展开表示。<br><img src="/2020/06/08/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A02-0/%E6%A2%AF%E5%BA%A6%E4%B8%8B%E9%99%8D%E8%AF%81%E6%98%8E4.jpg" alt><br>只需要确定后面u，v什么时候最小</p><p><img src="/2020/06/08/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A02-0/%E6%A2%AF%E5%BA%A6%E4%B8%8B%E9%99%8D%E8%AF%81%E6%98%8E5.jpg" alt><br><img src="/2020/06/08/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A02-0/%E6%A2%AF%E5%BA%A6%E4%B8%8B%E9%99%8D%E8%AF%81%E6%98%8E2.jpg" alt><br>当该点为周围最小值，停止下降<br>这样算出来的loss function 局部最小</p><p>但未必是全局最小</p><p><img src="/2020/06/08/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A02-0/%E6%A2%AF%E5%BA%A6%E4%B8%8B%E9%99%8D%E8%AF%81%E6%98%8E.jpg" alt><br><img src="/2020/06/08/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A02-0/%E6%A2%AF%E5%BA%A6%E4%B8%8B%E9%99%8D%E8%AF%81%E6%98%8E.jpg" alt></p><p>逻辑回归的限制如何解决：<br><img src="/2020/06/08/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A02-0/%E8%A7%A3%E5%86%B3%E9%80%BB%E8%BE%91%E5%9B%9E%E5%BD%92%E5%A4%B1%E6%95%88%E9%97%AE%E9%A2%98.jpg" alt><br><img src="/2020/06/08/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A02-0/%E5%BC%95%E5%87%BA%E7%B1%BB%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C.jpg" alt></p><h4 id="tip-for-training-DNN"><a href="#tip-for-training-DNN" class="headerlink" title="tip for training DNN"></a>tip for training DNN</h4>]]></content>
    
    <summary type="html">
    
      
      
        &lt;hr&gt;
&lt;p&gt;对数据做标签，即定义处理数据后的正确结果&lt;/p&gt;
&lt;p&gt;监督学习：&lt;br&gt;根据当前步骤给出下一步操作&lt;/p&gt;
&lt;p&gt;强化学习：&lt;br&gt;通过自己与自己训练，不需要标注&lt;/p&gt;
&lt;p&gt;使用何种函数，即使用什么模型model&lt;/p&gt;
&lt;p&gt;loss function ：
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>差分私人生成对抗网络</title>
    <link href="https://cnawesome.github.io/2020/05/30/%E5%B7%AE%E5%88%86%E7%A7%81%E4%BA%BA%E7%94%9F%E6%88%90%E5%AF%B9%E6%8A%97%E7%BD%91%E7%BB%9C/"/>
    <id>https://cnawesome.github.io/2020/05/30/%E5%B7%AE%E5%88%86%E7%A7%81%E4%BA%BA%E7%94%9F%E6%88%90%E5%AF%B9%E6%8A%97%E7%BD%91%E7%BB%9C/</id>
    <published>2020-05-30T03:18:42.000Z</published>
    <updated>2020-06-07T22:47:09.850Z</updated>
    
    <content type="html"><![CDATA[<p>Differentially Private Generative Adversarial Network</p><p>生成对抗网络（GAN）：Generative Adversarial Network</p><h3 id="前情提要-GAN"><a href="#前情提要-GAN" class="headerlink" title="前情提要 GAN"></a>前情提要 GAN</h3><p>问题：图像的比较怎么比？图像在计算机中不都是二进制，怎么判断图片的好坏</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Differentially Private Generative Adversarial Network&lt;/p&gt;
&lt;p&gt;生成对抗网络（GAN）：Generative Adversarial Network&lt;/p&gt;
&lt;h3 id=&quot;前情提要-GAN&quot;&gt;&lt;a href=&quot;#前
      
    
    </summary>
    
    
      <category term="深度学习" scheme="https://cnawesome.github.io/categories/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="深度学习" scheme="https://cnawesome.github.io/tags/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>机器学习1.0</title>
    <link href="https://cnawesome.github.io/2020/05/25/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A01-0/"/>
    <id>https://cnawesome.github.io/2020/05/25/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A01-0/</id>
    <published>2020-05-25T06:21:54.000Z</published>
    <updated>2020-06-07T11:53:59.614Z</updated>
    
    <content type="html"><![CDATA[<p>机器学习所解决的问题：<br>机器学习是基于数据来解决问题的，算法是基于算法的标准来解决问题。</p><p> 机器学习的流程如下：</p><p>数据准备 -&gt; 建模 -&gt; 训练 -&gt; 评估 -&gt; 应用<br>在实际应用时，由于训练的过程可能时间比较长，所以我们会分两个阶段进行：<br>1、学习阶段：数据准备 -&gt; 建模 -&gt; 训练 -&gt; 评估 -&gt; 保存模型<br>2、消费阶段：读取模型 -&gt; 应用</p><p>机器学习包含深度学习</p><p><img src="/2020/05/25/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A01-0/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%9F%A5%E8%AF%86%E6%A1%86%E6%9E%B6.jpg" alt></p><p>数据挖掘与机器学习的关系：<br>    机器学习是数据挖掘的一个重要工具</p><h4 id="机器学习内容："><a href="#机器学习内容：" class="headerlink" title="机器学习内容："></a>机器学习内容：</h4><p><img src="/2020/05/25/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A01-0/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5.jpg" alt></p><p>训练带有标签的训练集是 监督学习<br>训练无标签的训练集 无监督学习</p><p><img src="/2020/05/25/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A01-0/%E5%8D%8A%E7%9B%91%E7%9D%A3%E5%AD%A6%E4%B9%A0.jpg" alt></p><p><img src="/2020/05/25/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A01-0/%E7%BA%BF%E6%80%A7%E5%9B%9E%E5%BD%92.jpg" alt></p><p><img src="/2020/05/25/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A01-0/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5.jpg" alt></p><pre><code>分类 聚类</code></pre><p><img src="/2020/05/25/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A01-0/%E5%9B%9E%E5%BD%92%E5%88%86%E7%B1%BB%E8%81%9A%E7%B1%BB.jpg" alt></p><h4 id="回归分析"><a href="#回归分析" class="headerlink" title="回归分析"></a>回归分析</h4><p>如何确定几个回归线哪个是最合适的？<br>使用代价函数（又称损失函数）</p><p><img src="/2020/05/25/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A01-0/%E4%BB%A3%E4%BB%B7%E5%87%BD%E6%95%B0.jpg" alt></p><p>通过代价函数的参数调整来找到代价函数的最小值</p><p><img src="/2020/05/25/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A01-0/%E4%BB%A3%E4%BB%B7%E5%87%BD%E6%95%B02.jpg" alt><br><img src="/2020/05/25/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A01-0/%E7%9B%B8%E5%85%B3%E7%B3%BB%E6%95%B0.jpg" alt><br><img src="/2020/05/25/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A01-0/%E5%86%B3%E5%AE%9A%E7%B3%BB%E6%95%B0.jpg" alt></p><h5 id="一元线性回归"><a href="#一元线性回归" class="headerlink" title="一元线性回归"></a>一元线性回归</h5><p><img src="/2020/05/25/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A01-0/%E4%B8%80%E5%85%83%E7%BA%BF%E6%80%A7%E5%9B%9E%E5%BD%92.jpg" alt><br><img src="/2020/05/25/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A01-0/%E4%B8%80%E5%85%83%E7%BA%BF%E6%80%A7%E5%9B%9E%E5%BD%922.jpg" alt><br><img src="/2020/05/25/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A01-0/%E6%9C%80%E5%B0%8F%E4%BA%8C%E4%B9%98%E6%B3%95%E4%BB%A3%E7%A0%81.jpg" alt><br><img src="/2020/05/25/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A01-0/%E6%A2%AF%E5%BA%A6%E4%B8%8B%E9%99%8D%E4%BB%A3%E7%A0%81.jpg" alt><br>在梯度下降的过程是否可以使用广度优先，或深度优先</p><h5 id="多元线性回归"><a href="#多元线性回归" class="headerlink" title="多元线性回归"></a>多元线性回归</h5><p><img src="/2020/05/25/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A01-0/%E5%A4%9A%E5%85%83%E7%BA%BF%E6%80%A7%E5%9B%9E%E5%BD%92.jpg" alt><br><img src="/2020/05/25/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A01-0/%E5%A4%9A%E5%85%83%E7%BA%BF%E6%80%A7%E5%9B%9E%E5%BD%922.jpg" alt><br><img src="/2020/05/25/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A01-0/%E5%A4%9A%E5%85%83%E7%BA%BF%E6%80%A7%E5%9B%9E%E5%BD%92%E5%8C%BA%E5%88%AB.jpg" alt></p><p><img src="/2020/05/25/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A01-0/%E5%A4%9A%E7%89%B9%E5%BE%81%E7%BA%BF%E6%80%A7%E5%9B%9E%E5%BD%92.jpg" alt></p><h5 id="多项式回归"><a href="#多项式回归" class="headerlink" title="多项式回归"></a>多项式回归</h5><p><img src="/2020/05/25/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A01-0/%E5%A4%9A%E9%A1%B9%E5%BC%8F%E5%9B%9E%E5%BD%92.jpg" alt></p><h5 id="标准方程法"><a href="#标准方程法" class="headerlink" title="标准方程法"></a>标准方程法</h5><p><img src="/2020/05/25/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A01-0/%E6%A0%87%E5%87%86%E6%96%B9%E7%A8%8B%E6%B3%95.jpg" alt><br><img src="/2020/05/25/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A01-0/%E6%A0%87%E5%87%86%E6%96%B9%E7%A8%8B%E6%B3%951.jpg" alt><br><img src="/2020/05/25/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A01-0/%E6%A0%87%E5%87%86%E6%96%B9%E7%A8%8B%E6%B3%95%E5%88%86%E5%AD%90%E5%88%86%E6%AF%8D%E5%B8%83%E5%B1%80.jpg" alt><br><img src="/2020/05/25/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A01-0/%E6%A0%87%E5%87%86%E6%96%B9%E7%A8%8B%E6%B3%952.jpg" alt><br><img src="/2020/05/25/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A01-0/%E6%A0%87%E5%87%86%E6%96%B9%E7%A8%8B%E6%B3%953.jpg" alt></p><h5 id="特征缩放，交叉验证"><a href="#特征缩放，交叉验证" class="headerlink" title="特征缩放，交叉验证"></a>特征缩放，交叉验证</h5><p>特征值很大时，使用梯度下降是需要的过程时间过长<br><img src="/2020/05/25/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A01-0/%E6%95%B0%E6%8D%AE%E5%BD%92%E4%B8%80%E5%8C%96.jpg" alt><br><img src="/2020/05/25/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A01-0/%E5%9D%87%E5%80%BC%E6%A0%87%E5%87%86%E5%8C%96.jpg" alt></p><p>测试数据不多是，可以使用交叉验证<br><img src="/2020/05/25/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A01-0/%E4%BA%A4%E5%8F%89%E9%AA%8C%E8%AF%81%E6%B3%95.jpg" alt></p><p><img src="/2020/05/25/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A01-0/%E6%8B%9F%E5%90%88.jpg" alt></p><p>在分类拟合中，为什么要一次性拟合呢？我可以在一次拟合的情况下迭代拟合。<br><img src="/2020/05/25/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A01-0/%E6%8B%9F%E5%90%88%E5%88%86%E7%B1%BB.jpg" alt></p><p><img src="/2020/05/25/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A01-0/%E6%AD%A3%E5%88%99%E5%8C%96.jpg" alt></p><h5 id="岭回归"><a href="#岭回归" class="headerlink" title="岭回归"></a>岭回归</h5><p><img src="/2020/05/25/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A01-0/%E5%B2%AD%E5%9B%9E%E5%BD%92.jpg" alt><br><img src="/2020/05/25/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A01-0/%E5%B2%AD%E5%9B%9E%E5%BD%92.jpg" alt><br><img src="/2020/05/25/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A01-0/%E5%B2%AD%E5%9B%9E%E5%BD%92.jpg" alt><br><img src="/2020/05/25/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A01-0/%E5%B2%AD%E5%9B%9E%E5%BD%92.jpg" alt></p><h5 id="lasso回归"><a href="#lasso回归" class="headerlink" title="lasso回归"></a>lasso回归</h5><p><img src="/2020/05/25/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A01-0/lasso.jpg" alt><br><img src="/2020/05/25/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A01-0/lasso%E4%B8%8E%E5%B2%AD%E5%9B%9E%E5%BD%92.jpg" alt><br><img src="/2020/05/25/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A01-0/lasso%E4%B8%8E%E5%B2%AD%E5%9B%9E%E5%BD%922.jpg" alt><br><img src="/2020/05/25/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A01-0/lasso%E4%B8%8E%E5%B2%AD%E5%9B%9E%E5%BD%923.jpg" alt></p><h5 id="弹性网"><a href="#弹性网" class="headerlink" title="弹性网"></a>弹性网</h5><p>结合了岭回归和lasso<br><img src="/2020/05/25/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A01-0/%E5%BC%B9%E6%80%A7%E7%BD%91.jpg" alt><br><img src="/2020/05/25/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A01-0/%E5%BC%B9%E6%80%A7%E7%BD%911.jpg" alt></p><h4 id="逻辑回归"><a href="#逻辑回归" class="headerlink" title="逻辑回归"></a>逻辑回归</h4><p><img src="/2020/05/25/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A01-0/%E9%80%BB%E8%BE%91%E5%9B%9E%E5%BD%92.jpg" alt><br><img src="/2020/05/25/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A01-0/%E9%80%BB%E8%BE%91%E5%9B%9E%E5%BD%92%E4%BB%A3%E4%BB%B7%E5%87%BD%E6%95%B0.jpg" alt><br><img src="/2020/05/25/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A01-0/%E9%80%BB%E8%BE%91%E5%9B%9E%E5%BD%92%E4%BB%A3%E4%BB%B7%E5%87%BD%E6%95%B02.jpg" alt><br><img src="/2020/05/25/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A01-0/%E9%80%BB%E8%BE%91%E5%9B%9E%E5%BD%92%E4%BB%A3%E4%BB%B7%E5%87%BD%E6%95%B03.jpg" alt><br><img src="/2020/05/25/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A01-0/%E9%80%BB%E8%BE%91%E5%9B%9E%E5%BD%92%E9%80%BB%E8%BE%91%E5%87%BD%E6%95%B0.jpg" alt></p><h4 id="神经网络"><a href="#神经网络" class="headerlink" title="神经网络"></a>神经网络</h4><p><img src="/2020/05/25/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A01-0/%E4%BA%BA%E4%BD%93%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C.jpg" alt><br><img src="/2020/05/25/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A01-0/%E5%8D%95%E5%B1%82%E6%84%9F%E7%9F%A5%E5%99%A8.jpg" alt><br><img src="/2020/05/25/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A01-0/%E5%8D%95%E5%B1%82%E6%84%9F%E7%9F%A5%E5%99%A82.jpg" alt><br><img src="/2020/05/25/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A01-0/%E6%84%9F%E7%9F%A5%E5%99%A8%E5%AD%A6%E4%B9%A0%E8%A7%84%E5%88%99.jpg" alt></p><h5 id="BP神经网络"><a href="#BP神经网络" class="headerlink" title="BP神经网络"></a>BP神经网络</h5><p><img src="/2020/05/25/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A01-0/bp%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E7%BB%93%E6%9E%84.jpg" alt><br><img src="/2020/05/25/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A01-0/bp%E7%AE%97%E6%B3%95.jpg" alt><br><img src="/2020/05/25/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A01-0/%E5%8D%95%E5%B1%82%E6%84%9F%E7%9F%A5%E5%99%A82.jpg" alt><br><img src="/2020/05/25/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A01-0/%E6%84%9F%E7%9F%A5%E5%99%A8%E5%AD%A6%E4%B9%A0%E8%A7%84%E5%88%99.jpg" alt><br><img src="/2020/05/25/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A01-0/%E6%84%9F%E7%9F%A5%E5%99%A8%E5%AD%A6%E4%B9%A0%E8%A7%84%E5%88%992.jpg" alt></p><h4 id="决策树"><a href="#决策树" class="headerlink" title="决策树"></a>决策树</h4><p><img src="/2020/05/25/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A01-0/%E5%86%B3%E7%AD%96%E6%A0%91%E4%BB%8B%E7%BB%8D.jpg" alt><br><img src="/2020/05/25/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A01-0/%E5%86%B3%E7%AD%96%E6%A0%91%E4%BB%8B%E7%BB%8D3.jpg" alt></p><p>期待的结果<br><img src="/2020/05/25/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A01-0/%E5%86%B3%E7%AD%96%E6%A0%91%E4%BB%8B%E7%BB%8D2.jpg" alt></p><p><img src="/2020/05/25/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A01-0/%E7%86%B5%E6%A6%82%E5%BF%B5.jpg" alt><br><img src="/2020/05/25/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A01-0/%E4%BF%A1%E6%81%AF%E7%86%B5.jpg" alt></p><p>信息熵越大，事件的可能性越小。</p><p><img src="/2020/05/25/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A01-0/id3%E7%AE%97%E6%B3%95.jpg" alt><br><img src="/2020/05/25/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A01-0/id3%E7%AE%97%E6%B3%952.jpg" alt></p><p><img src="/2020/05/25/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A01-0/c4.5%E7%AE%97%E6%B3%95.jpg" alt><br>根据信息熵来选择根节点</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;机器学习所解决的问题：&lt;br&gt;机器学习是基于数据来解决问题的，算法是基于算法的标准来解决问题。&lt;/p&gt;
&lt;p&gt; 机器学习的流程如下：&lt;/p&gt;
&lt;p&gt;数据准备 -&amp;gt; 建模 -&amp;gt; 训练 -&amp;gt; 评估 -&amp;gt; 应用&lt;br&gt;在实际应用时，由于训练的过程可能时间比
      
    
    </summary>
    
    
    
      <category term="机器学习" scheme="https://cnawesome.github.io/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>linux内核3.0</title>
    <link href="https://cnawesome.github.io/2020/05/16/linux%E5%86%85%E6%A0%B83-0/"/>
    <id>https://cnawesome.github.io/2020/05/16/linux%E5%86%85%E6%A0%B83-0/</id>
    <published>2020-05-16T14:19:44.000Z</published>
    <updated>2020-05-25T01:54:47.982Z</updated>
    
    <content type="html"><![CDATA[<p>linux内核由5个模块组成：<br>    进程调度模块<br>    内存管理模块<br>    文件系统模块<br>    进程间通信模块<br>    网络接口模块</p><h3 id="5-3-内存管理"><a href="#5-3-内存管理" class="headerlink" title="5.3 内存管理"></a>5.3 内存管理</h3><p>为了更好地使用机器中物理内存 ，系统初始化时内存被分为</p><p><img src="/2020/05/16/linux%E5%86%85%E6%A0%B83-0/%E5%86%85%E6%A0%B8%E7%BB%93%E6%9E%84%E6%A1%86%E5%9B%BE.jpg" alt></p><p><img src="/2020/05/16/linux%E5%86%85%E6%A0%B83-0/%E7%B3%BB%E7%BB%9F%E5%8A%A0%E7%94%B5%E5%88%9D%E5%A7%8B%E5%8C%96.jpg" alt></p><h4 id="bootsect-s"><a href="#bootsect-s" class="headerlink" title="bootsect.s"></a>bootsect.s</h4><p>流程：<br>系统加电 –&gt; bios开启，从地址0x00开始执行程序 –&gt;bios执行系统检测，在物理地址0的地方初始化中断向量 –&gt;bios把可启动设备的一个扇区的代码bootsect读入内存绝对地址为0x7c00的位置，并跳转到此处 –&gt;bootsect执行期间，将自己移动到0x9000位置并开始执行。</p><p>bootsect.s是磁盘引导块程序，驻留在磁盘的第一个扇区(0磁道，0磁头，第一个扇区)。<br>rom bios加电后，rom bios会将扇区代码bootsect加载到内存地址为0x7c00的位置。</p><p>bootsect作用，把从磁盘第二个扇区开始的四个扇区的setup模块加载到内存紧接着bootsect的后面0x90200。然后利用bios中断0x13取磁盘参数表中当前启动引导盘的参数。接着系统就显示“ system loading…”。接着把setup模块后的system模块加载到内存0x10000的位置。确定根文件系统的确认号。</p><p><img src="/2020/05/16/linux%E5%86%85%E6%A0%B83-0/%E5%86%85%E6%A0%B8%E7%A3%81%E7%9B%98%E5%88%86%E5%B8%83%E6%83%85%E5%86%B5.jpg" alt><br><img src="/2020/05/16/linux%E5%86%85%E6%A0%B83-0/%E5%86%85%E6%A0%B8%E7%A3%81%E7%9B%98%E5%88%86%E5%B8%83%E6%83%85%E5%86%B51.jpg" alt></p><p><img src="/2020/05/16/linux%E5%86%85%E6%A0%B83-0/%E6%B1%87%E7%BC%96%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95.jpg" alt></p><p>伪指令：bootsect步骤</p><p>boot-start</p><p>把自身程序从0x07c0转移到0x9000，跳转到下一句继续执行。<br>设置段寄存器，和堆栈寄存器。栈指针sp要大于514字节。<br>（bootsect程序段执行结束）<br>bootsect后执行setup模块<br>利用bios中段0x13将setup模块从磁盘第二个扇区开始读到0x90200，共读4个扇区，如果读错了，复位驱动器，并重试，无退路。<br>获取磁盘，驱动器参数。<br>加载system模块到内存0x10000<br>设置根设备器</p><p>跳转到后面的setup模块执行。<br>-end</p><p>setup-start</p><p>read-it用于读取磁盘上的system模块。<br>kill—moter 用于关闭软驱的马达。</p><p>-end</p><p>参考书籍 Alessandro Rubini 《linux内核源代码漫游》</p><p>硬盘引导程序：<br>系统上电 –&gt; 可启动硬盘的第一个扇区（主引导记录MBR）会被bios加载到内存0x7c0的<br>位置执行 –&gt;主引导记录把自己转移到0x600的位置 –&gt;根据MBR中的分区表信息所指明的活动分区的第一个扇区加载到内存0x7c00的位置。–&gt;在该位置开始执行</p><p><img src="/2020/05/16/linux%E5%86%85%E6%A0%B83-0/linux%E7%A1%AC%E7%9B%98%E8%AE%BE%E5%A4%87%E5%8F%B7.jpg" alt></p><h4 id="setup-s"><a href="#setup-s" class="headerlink" title="setup.s"></a>setup.s</h4><p>setup.s是一个操作系统加载程序<br>主要作用：利用bios的中断机制读取机器系统数据，并将数据保存在内存0x9000的位置（覆盖掉bootsect的内容）</p><p><img src="/2020/05/16/linux%E5%86%85%E6%A0%B83-0/setup%E7%9A%84%E5%8F%82%E6%95%B0.jpg" alt></p><p>流程：<br>利用bios的中断机制读取机器系统数据，并将数据保存在内存0x9000的位置（覆盖掉bootsect的内容）–&gt;<br>将system模块整体移动到内存绝对地址为0x0000的位置 –&gt;加载中断描述符表寄存器IDT和全局描述符GDT –&gt;开启A20地址线 –&gt;<br>重新设置两个中断控制芯片8259A –&gt;重新设置硬件中断号 –&gt;设置cpu控制寄存器CR0（也称机器状态字）–&gt;进入32位保护模式 –&gt;跳转到system模块的最前面的head.s继续执行。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;linux内核由5个模块组成：&lt;br&gt;    进程调度模块&lt;br&gt;    内存管理模块&lt;br&gt;    文件系统模块&lt;br&gt;    进程间通信模块&lt;br&gt;    网络接口模块&lt;/p&gt;
&lt;h3 id=&quot;5-3-内存管理&quot;&gt;&lt;a href=&quot;#5-3-内存管理&quot; class=&quot;h
      
    
    </summary>
    
    
      <category term="linux" scheme="https://cnawesome.github.io/categories/linux/"/>
    
    
      <category term="linux" scheme="https://cnawesome.github.io/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>计算机组成1.0</title>
    <link href="https://cnawesome.github.io/2020/05/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%901-0/"/>
    <id>https://cnawesome.github.io/2020/05/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%901-0/</id>
    <published>2020-05-07T07:54:29.000Z</published>
    <updated>2020-05-29T04:05:42.074Z</updated>
    
    <content type="html"><![CDATA[<h3 id="计算机组成概念"><a href="#计算机组成概念" class="headerlink" title="计算机组成概念"></a>计算机组成概念</h3><p>计算机组成与计算机体系区别</p><p><img src="/2020/05/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%901-0/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8C%BA%E5%88%AB.jpg" alt></p><p><img src="/2020/05/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%901-0/%E5%86%AF%E8%AF%BA%E4%BE%9D%E6%9B%BC%E7%BB%93%E6%9E%84.jpg" alt><br>实线是数据传输，虚线是控制传输<br><img src="/2020/05/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%901-0/%E5%86%AF%E8%AF%BA%E4%BE%9D%E6%9B%BC%E7%BB%93%E6%9E%842.jpg" alt><br><img src="/2020/05/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%901-0/%E5%86%AF%E8%AF%BA%E4%BE%9D%E6%9B%BC%E7%BB%93%E6%9E%843.jpg" alt></p><p>累加运算器</p><p><img src="/2020/05/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%901-0/%E8%BF%90%E7%AE%97%E5%99%A8%E7%BB%93%E6%9E%84.jpg" alt><br>ACC：数据寄存器<br>ALU：运算寄存器<br>X：运算数<br>MQ：存放结果</p><p>控制器<br><img src="/2020/05/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%901-0/%E6%8E%A7%E5%88%B6%E5%99%A8.jpg" alt><br>PC:保存指令地址</p><p>运算速度：<br>机器字长：cpu一次处理数据的位数<br>与cpu寄存器位数有关</p><p>CPI：执行一条指令所需要的时间周期</p><p><img src="/2020/05/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%901-0/%E5%90%89%E6%99%AE%E6%A3%AE%E6%B3%95.jpg" alt><br>f表示频率；</p><p>MIPS:每秒执行百万条指令</p><p>ELOPS：每秒浮点运算次数</p><h4 id="总线结构"><a href="#总线结构" class="headerlink" title="总线结构"></a>总线结构</h4><p><img src="/2020/05/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%901-0/%E6%80%BB%E7%BA%BF%E5%88%86%E7%B1%BB.jpg" alt></p><p>1.单总线结构框图</p><p><img src="/2020/05/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%901-0/%E5%8D%95%E6%80%BB%E7%BA%BF%E7%BB%93%E6%9E%84.jpg" alt></p><p><img src="/2020/05/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%901-0/%E5%8F%8C%E6%80%BB%E7%BA%BF%E7%BB%93%E6%9E%84.jpg" alt></p><p>多总线结构</p><p><img src="/2020/05/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%901-0/%E5%8F%8C%E6%80%BB%E7%BA%BF%E7%BB%93%E6%9E%841.jpg" alt><br><img src="/2020/05/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%901-0/%E4%B8%89%E6%80%BB%E7%BA%BF%E7%BB%93%E6%9E%841.jpg" alt><br><img src="/2020/05/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%901-0/%E4%B8%89%E6%80%BB%E7%BA%BF%E7%BB%93%E6%9E%841.jpg" alt><br><img src="/2020/05/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%901-0/%E4%B8%89%E6%80%BB%E7%BA%BF%E7%BB%93%E6%9E%842.jpg" alt><br><img src="/2020/05/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%901-0/%E5%9B%9B%E6%80%BB%E7%BA%BF%E7%BB%93%E6%9E%841.jpg" alt></p><p><img src="/2020/05/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%901-0/pci%E6%80%BB%E7%BA%BF%E7%BB%93%E6%9E%84.jpg" alt><br><img src="/2020/05/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%901-0/%E5%A4%9A%E5%B1%82pci%E6%80%BB%E7%BA%BF%E7%BB%93%E6%9E%84.jpg" alt><br><img src="/2020/05/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%901-0/vl-bus%E6%80%BB%E7%BA%BF%E7%BB%93%E6%9E%84.jpg" alt></p><h4 id="总线控制"><a href="#总线控制" class="headerlink" title="总线控制"></a>总线控制</h4><p>基础概念：</p><p>主设备（模块）：多总线由控制权<br>从设备（模块）：响应从主设备发来的总线命令</p><p>功能：总线判优，总线通信</p><h5 id="总线判优控制"><a href="#总线判优控制" class="headerlink" title="总线判优控制"></a>总线判优控制</h5><p><img src="/2020/05/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%901-0/%E6%80%BB%E7%BA%BF%E5%88%A4%E4%BC%98%E6%8E%A7%E5%88%B6.jpg" alt></p><p><img src="/2020/05/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%901-0/%E6%80%BB%E7%BA%BF%E5%88%A4%E4%BC%98%E9%93%BE%E5%BC%8F%E6%9F%A5%E8%AF%A2.jpg" alt><br>BS:总线忙<br>BR：总线请求<br>BG:链式查询  是否提出总线占用请求</p><p><img src="/2020/05/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%901-0/%E8%AE%A1%E6%95%B0%E5%99%A8%E5%AE%9A%E6%97%B6%E6%9F%A5%E8%AF%A2.jpg" alt></p><p><img src="/2020/05/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%901-0/%E7%8B%AC%E7%AB%8B%E8%AF%B7%E6%B1%82.jpg" alt></p><h5 id="总线通信控制"><a href="#总线通信控制" class="headerlink" title="总线通信控制"></a>总线通信控制</h5><p><img src="/2020/05/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%901-0/%E6%80%BB%E7%BA%BF%E4%BC%A0%E8%BE%93%E5%91%A8%E6%9C%9F.jpg" alt></p><p>总线通信方式：<br>    1.同步通信<br>    2.异步通信<br>    3.半同步通信<br>    4.分离式通信<br><img src="/2020/05/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%901-0/%E5%90%8C%E6%AD%A5%E5%BC%8F%E6%95%B0%E6%8D%AE%E8%BE%93%E5%85%A5.jpg" alt><br><img src="/2020/05/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%901-0/%E5%BC%82%E6%AD%A5%E9%80%9A%E4%BF%A1.jpg" alt><br><img src="/2020/05/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%901-0/%E5%90%8C%E6%AD%A5%E5%BC%82%E6%AD%A5.jpg" alt><br><img src="/2020/05/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%901-0/%E5%8D%8A%E5%90%8C%E6%AD%A5%E5%90%8C%E4%BF%A1.jpg" alt></p><p><img src="/2020/05/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%901-0/%E5%88%86%E7%A6%BB%E5%BC%8F%E9%80%9A%E4%BF%A1.jpg" alt><br><img src="/2020/05/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%901-0/%E5%88%86%E7%A6%BB%E5%BC%8F%E9%80%9A%E4%BF%A1%E7%89%B9%E7%82%B9.jpg" alt></p><h3 id="存储器"><a href="#存储器" class="headerlink" title="存储器"></a>存储器</h3><p>1.按存储介质<br>（1）半导体存储器<br>（2）磁表面存储器<br>（3）磁芯存储器<br>（4）光盘存储器</p><p><img src="/2020/05/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%901-0/%E7%BC%93%E5%AD%98%E4%B8%BB%E5%AD%98.jpg" alt><br><img src="/2020/05/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%901-0/%E7%BC%93%E5%AD%98%E4%B8%BB%E5%AD%982.jpg" alt></p><h4 id="主存储器"><a href="#主存储器" class="headerlink" title="主存储器"></a>主存储器</h4><p>主存的基本组成</p><p>主存与cpu的联系：数据总线，控制总线，地址总线</p><p><img src="/2020/05/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%901-0/%E4%B8%BB%E5%AD%98%E4%B8%8Ecpu%E8%81%94%E7%B3%BB.jpg" alt><br><img src="/2020/05/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%901-0/%E4%B8%BB%E5%AD%98%E5%AD%98%E5%82%A8%E6%96%B9%E5%BC%8F.jpg" alt></p><p>半导体存储芯片<br><img src="/2020/05/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%901-0/%E5%8D%8A%E5%AF%BC%E4%BD%93%E5%AD%98%E5%82%A8%E8%8A%AF%E7%89%87.jpg" alt></p><p><img src="/2020/05/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%901-0/%E5%AD%98%E5%82%A8%E8%8A%AF%E7%89%87%E7%89%87%E9%80%89%E7%BA%BF.jpg" alt></p><p>片选线 cs 选择 ce 使能<br>读、写控制线 we 低电平写，高电平读</p><p><img src="/2020/05/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%901-0/%E5%AD%98%E5%82%A8%E8%8A%AF%E7%89%87%E8%AF%91%E7%A0%81%E9%A9%B1%E5%8A%A8%E6%96%B9%E5%BC%8F.jpg" alt><br>重合法<br><img src="/2020/05/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%901-0/%E5%AD%98%E5%82%A8%E8%8A%AF%E7%89%87%E8%AF%91%E7%A0%81%E9%A9%B1%E5%8A%A8%E6%96%B9%E5%BC%8F2.jpg" alt></p><h5 id="随机存取存储器"><a href="#随机存取存储器" class="headerlink" title="随机存取存储器"></a>随机存取存储器</h5><p>静态ram<br><img src="/2020/05/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%901-0/%E9%9D%99%E6%80%81ram.jpg" alt><br><img src="/2020/05/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%901-0/%E9%9D%99%E6%80%81ram%E8%AF%BB%E6%93%8D%E4%BD%9C.jpg" alt><br><img src="/2020/05/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%901-0/%E9%9D%99%E6%80%81ram%E5%86%99%E6%93%8D%E4%BD%9C.jpg" alt></p><p><img src="/2020/05/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%901-0/%E5%8D%95%E7%AE%A1%E5%8A%A8%E6%80%81ram.jpg" alt></p><h6 id="只读存储器"><a href="#只读存储器" class="headerlink" title="只读存储器"></a>只读存储器</h6><p>掩膜rom</p><p>行列选择线交叉处mos管为1</p><p>2的10次方=1k</p><p>位扩展<br><img src="/2020/05/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%901-0/%E4%BD%8D%E6%89%A9%E5%B1%95.jpg" alt></p><p>字位扩展<br><img src="/2020/05/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%901-0/%E5%AD%97%E4%BD%8D%E6%89%A9%E5%B1%95.jpg" alt></p><p>存储器校验</p><p>编码的最小距离：任意两组合法代码之间 二进制位数 的 最小差异</p><p>编码的纠错检错与编码的最小距离有关</p><p>汉明码：<br>采用奇偶校验和分组校验</p><p><img src="/2020/05/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%901-0/%E6%B1%89%E6%98%8E%E7%A0%81.jpg" alt></p><p>汉明码的组成:<br>    汉明码的组成要组成多少位检测位：<br>    检测位的位置：2的i次方位置<br>    检测位的取值：与该位所在的检测“小组”承担的奇偶校验任务有关</p><p>cache 是静态ram</p><p>单体多字系统：扩大了数据寄存器，多个字节以整体方式存储<br><img src="/2020/05/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%901-0/%E6%8F%90%E9%AB%98%E8%AE%BF%E5%AD%98.jpg" alt><br><img src="/2020/05/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%901-0/%E6%8F%90%E9%AB%98%E8%AE%BF%E5%AD%982.jpg" alt><br><img src="/2020/05/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%901-0/%E6%8F%90%E9%AB%98%E8%AE%BF%E5%AD%983.jpg" alt></p><h4 id="高速缓冲存储器"><a href="#高速缓冲存储器" class="headerlink" title="高速缓冲存储器"></a>高速缓冲存储器</h4><p>目的：为了避免cpu空等问题，提高访问数据速度</p><p>为什么cache不需要块内地址：内存块内地址和cache的块内地址是匹配的<br>内存编址与cache编址需要匹配</p><p>cache命中率与cache的容量与块长有关</p><p>块长 取一个存储周期内从内存调出的信息长度</p><p><img src="/2020/05/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%901-0/cache%E8%AF%BB%E6%93%8D%E4%BD%9C.jpg" alt><br><img src="/2020/05/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%901-0/cache%E5%86%99%E6%93%8D%E4%BD%9C.jpg" alt></p><p><img src="/2020/05/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%901-0/cache%E7%9B%B4%E6%8E%A5%E6%98%A0%E5%B0%84.jpg" alt><br><img src="/2020/05/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%901-0/cache%E5%85%A8%E7%9B%B8%E8%81%94%E6%98%A0%E5%B0%84.jpg" alt></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;计算机组成概念&quot;&gt;&lt;a href=&quot;#计算机组成概念&quot; class=&quot;headerlink&quot; title=&quot;计算机组成概念&quot;&gt;&lt;/a&gt;计算机组成概念&lt;/h3&gt;&lt;p&gt;计算机组成与计算机体系区别&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/2020/05/07/%E8%AE%
      
    
    </summary>
    
    
      <category term="计算机组成" scheme="https://cnawesome.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90/"/>
    
    
      <category term="计算机组成" scheme="https://cnawesome.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90/"/>
    
  </entry>
  
  <entry>
    <title>linux内核2.0</title>
    <link href="https://cnawesome.github.io/2020/04/16/linux%E5%86%85%E6%A0%B82-0/"/>
    <id>https://cnawesome.github.io/2020/04/16/linux%E5%86%85%E6%A0%B82-0/</id>
    <published>2020-04-16T14:17:08.000Z</published>
    <updated>2020-04-18T09:37:53.885Z</updated>
    
    <content type="html"><![CDATA[<h3 id="80x86保护模式及其编程"><a href="#80x86保护模式及其编程" class="headerlink" title="80x86保护模式及其编程"></a>80x86保护模式及其编程</h3><pre><code>-本书介绍的linux擦欧总系统基于intel公司80x86及其相关外围硬件组成的pc机。</code></pre><p>80x86 参考书籍： 《IA-32 intal体系结构软件开发者手册》<br>，《系统编程指南》</p><h4 id="80x86-系统寄存器和系统指令"><a href="#80x86-系统寄存器和系统指令" class="headerlink" title="80x86 系统寄存器和系统指令"></a>80x86 系统寄存器和系统指令</h4><h5 id="系统寄存器"><a href="#系统寄存器" class="headerlink" title="系统寄存器"></a>系统寄存器</h5><p>标志寄存器： EFLAGS的系统标志和IOPL字段用于控制i/o访问，可屏蔽硬件中断，调试，任务切换以及虚拟-8086模式。<br><img src="/2020/04/16/linux%E5%86%85%E6%A0%B82-0/80x86%E6%A0%87%E5%BF%97%E5%AF%84%E5%AD%98%E5%99%A8.jpg" alt><br>内存管理寄存器：<br>处理器提供四个内存管理寄存器（GDTR，LDTR，IDTR和TR），用于指定分段内存管理所使用的系统表的基地址。<br><img src="/2020/04/16/linux%E5%86%85%E6%A0%B82-0/80x86%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86%E5%AF%84%E5%AD%98%E5%99%A8.jpg" alt><br>控制寄存器：（CR0，CR1，CR2和CR3），用于控制和确定处理器的操作模式以及当前执行的任务的特性。<br><img src="/2020/04/16/linux%E5%86%85%E6%A0%B82-0/80x86%E6%8E%A7%E5%88%B6%E5%AF%84%E5%AD%98%E5%99%A8.jpg" alt></p><h5 id="系统指令"><a href="#系统指令" class="headerlink" title="系统指令"></a>系统指令</h5><p><img src="/2020/04/16/linux%E5%86%85%E6%A0%B82-0/80x86%E7%B3%BB%E7%BB%9F%E6%8C%87%E4%BB%A4.jpg" alt><br><img src="/2020/04/16/linux%E5%86%85%E6%A0%B82-0/80x86%E7%B3%BB%E7%BB%9F%E6%8C%87%E4%BB%A42.jpg" alt></p><h5 id="保存模式内存管理"><a href="#保存模式内存管理" class="headerlink" title="保存模式内存管理"></a>保存模式内存管理</h5><p><img src="/2020/04/16/linux%E5%86%85%E6%A0%B82-0/80x86%E5%86%85%E5%AD%98%E5%AF%BB%E5%9D%80.jpg" alt><br><img src="/2020/04/16/linux%E5%86%85%E6%A0%B82-0/80x86%E5%9C%B0%E5%9D%80%E5%8F%98%E6%8D%A2.jpg" alt><br><img src="/2020/04/16/linux%E5%86%85%E6%A0%B82-0/80x86%E5%9C%B0%E5%9D%80%E5%8F%98%E6%8D%A22.jpg" alt><br><img src="/2020/04/16/linux%E5%86%85%E6%A0%B82-0/80x86%E5%9C%B0%E5%9D%80%E5%8F%98%E6%8D%A23.jpg" alt></p><p><img src="/2020/04/16/linux%E5%86%85%E6%A0%B82-0/80x86%E5%9C%B0%E5%9D%80%E4%BF%9D%E6%8A%A4.jpg" alt><br><img src="/2020/04/16/linux%E5%86%85%E6%A0%B82-0/80x86%E5%9C%B0%E5%9D%80%E4%BF%9D%E6%8A%A42.jpg" alt></p><p>虚拟地址 采用 段结构<br>段地址 映射到 线性地址<br>线性地址 映射到 物理地址<br>线性地址 可采用 页表结构</p><p><img src="/2020/04/16/linux%E5%86%85%E6%A0%B82-0/80x86%E5%88%86%E6%AE%B5%E6%9C%BA%E5%88%B6.jpg" alt><br><img src="/2020/04/16/linux%E5%86%85%E6%A0%B82-0/80x86%E5%88%86%E6%AE%B5%E6%9C%BA%E5%88%B6%E7%AB%AF%E6%AE%B5%E7%9A%84%E5%AE%9A%E4%B9%89.jpg" alt><br><img src="/2020/04/16/linux%E5%86%85%E6%A0%B82-0/80x86%E5%88%86%E6%AE%B5%E6%9C%BA%E5%88%B6%E7%AB%AF%E6%AE%B5%E7%9A%84%E5%AE%9A%E4%B9%892.jpg" alt></p><h5 id="段描述符表"><a href="#段描述符表" class="headerlink" title="段描述符表"></a>段描述符表</h5><p>段描述表 分为 GDT(全局描述表) 和 LDT(局部描述表)<br>虚拟内存中，一般是GDT，一半是LDT。<br>GDT任务共享<br><img src="/2020/04/16/linux%E5%86%85%E6%A0%B82-0/80x86%E5%88%86%E6%AE%B5%E6%9C%BA%E5%88%B6%E7%AB%AF%E6%AE%B5%E6%8F%8F%E8%BF%B0%E7%AC%A6%E8%A1%A8.jpg" alt><br><img src="/2020/04/16/linux%E5%86%85%E6%A0%B82-0/80x86%E5%88%86%E6%AE%B5%E6%9C%BA%E5%88%B6%E7%AB%AF%E6%AE%B5%E6%8F%8F%E8%BF%B0%E7%AC%A6%E8%A1%A82.jpg" alt><br><img src="/2020/04/16/linux%E5%86%85%E6%A0%B82-0/80x86%E5%88%86%E6%AE%B5%E6%9C%BA%E5%88%B6%E7%AB%AF%E6%AE%B5%E6%8F%8F%E8%BF%B0%E7%AC%A6%E8%A1%A83.jpg" alt><br><img src="/2020/04/16/linux%E5%86%85%E6%A0%B82-0/80x86%E5%88%86%E6%AE%B5%E6%9C%BA%E5%88%B6%E7%AB%AF%E6%AE%B5%E6%8F%8F%E8%BF%B0%E7%AC%A6%E8%A1%A84.jpg" alt></p><h5 id="段选择符"><a href="#段选择符" class="headerlink" title="段选择符"></a>段选择符</h5><p><img src="/2020/04/16/linux%E5%86%85%E6%A0%B82-0/80x86%E5%88%86%E6%AE%B5%E6%9C%BA%E5%88%B6%E7%AB%AF%E6%AE%B5%E9%80%89%E6%8B%A9%E7%AC%A6.jpg" alt><br><img src="/2020/04/16/linux%E5%86%85%E6%A0%B82-0/80x86%E5%88%86%E6%AE%B5%E6%9C%BA%E5%88%B6%E7%AB%AF%E6%AE%B5%E9%80%89%E6%8B%A9%E7%AC%A62.jpg" alt><br><img src="/2020/04/16/linux%E5%86%85%E6%A0%B82-0/80x86%E5%88%86%E6%AE%B5%E6%9C%BA%E5%88%B6%E7%AB%AF%E6%AE%B5%E9%80%89%E6%8B%A9%E7%AC%A63.jpg" alt><br><img src="/2020/04/16/linux%E5%86%85%E6%A0%B82-0/80x86%E5%88%86%E6%AE%B5%E6%9C%BA%E5%88%B6%E7%AB%AF%E6%AE%B5%E9%80%89%E6%8B%A9%E7%AC%A64.jpg" alt></p><h5 id="段描述符"><a href="#段描述符" class="headerlink" title="段描述符"></a>段描述符</h5><p><img src="/2020/04/16/linux%E5%86%85%E6%A0%B82-0/80x86%E5%88%86%E6%AE%B5%E6%9C%BA%E5%88%B6%E7%AB%AF%E6%AE%B5%E6%8F%8F%E8%BF%B0%E7%AC%A6.jpg" alt><br><img src="/2020/04/16/linux%E5%86%85%E6%A0%B82-0/80x86%E5%88%86%E6%AE%B5%E6%9C%BA%E5%88%B6%E7%AB%AF%E6%AE%B5%E6%8F%8F%E8%BF%B0%E7%AC%A62.jpg" alt><br><img src="/2020/04/16/linux%E5%86%85%E6%A0%B82-0/80x86%E5%88%86%E6%AE%B5%E6%9C%BA%E5%88%B6%E7%AB%AF%E6%AE%B5%E6%8F%8F%E8%BF%B0%E7%AC%A63.jpg" alt><br><img src="/2020/04/16/linux%E5%86%85%E6%A0%B82-0/80x86%E5%88%86%E6%AE%B5%E6%9C%BA%E5%88%B6%E7%AB%AF%E6%AE%B5%E6%8F%8F%E8%BF%B0%E7%AC%A64.jpg" alt></p><p>段选择符 指向 段描述符表 向内寻找 段描述符 找到对应的空间</p><pre><code>-------2020.4.17  这段主要是介绍内存的管理，段内存的寻址至101页</code></pre><p><img src="/2020/04/16/linux%E5%86%85%E6%A0%B82-0/8086%E4%BB%A3%E7%A0%81%E5%92%8C%E6%95%B0%E6%8D%AE%E6%AE%B5%E6%8F%8F%E8%BF%B0%E7%AC%A6%E7%B1%BB%E5%9E%8B.jpg" alt><br><img src="/2020/04/16/linux%E5%86%85%E6%A0%B82-0/8086%E4%BB%A3%E7%A0%81%E5%92%8C%E6%95%B0%E6%8D%AE%E6%AE%B5%E6%8F%8F%E8%BF%B0%E7%AC%A6%E7%B1%BB%E5%9E%8B2.jpg" alt><br><img src="/2020/04/16/linux%E5%86%85%E6%A0%B82-0/8086%E4%BB%A3%E7%A0%81%E5%92%8C%E6%95%B0%E6%8D%AE%E6%AE%B5%E6%8F%8F%E8%BF%B0%E7%AC%A6%E7%B1%BB%E5%9E%8B3.jpg" alt></p><h4 id="分页机制"><a href="#分页机制" class="headerlink" title="分页机制"></a>分页机制</h4><p><img src="/2020/04/16/linux%E5%86%85%E6%A0%B82-0/8086%E5%88%86%E9%A1%B5%E6%9C%BA%E5%88%B6.jpg" alt><br><img src="/2020/04/16/linux%E5%86%85%E6%A0%B82-0/8086%E5%88%86%E9%A1%B5%E6%9C%BA%E5%88%B62.jpg" alt><br><img src="/2020/04/16/linux%E5%86%85%E6%A0%B82-0/8086%E5%88%86%E9%A1%B5%E6%9C%BA%E5%88%B63.jpg" alt><br><img src="/2020/04/16/linux%E5%86%85%E6%A0%B82-0/8086%E5%88%86%E9%A1%B5%E6%9C%BA%E5%88%B64.jpg" alt></p><h5 id="页表结构"><a href="#页表结构" class="headerlink" title="页表结构"></a>页表结构</h5><pre><code>二级页表有点难懂</code></pre><p><img src="/2020/04/16/linux%E5%86%85%E6%A0%B82-0/8086%E9%A1%B5%E8%A1%A8%E7%BB%93%E6%9E%84.jpg" alt><br><img src="/2020/04/16/linux%E5%86%85%E6%A0%B82-0/8086%E9%A1%B5%E8%A1%A8%E7%BB%93%E6%9E%842.jpg" alt><br><img src="/2020/04/16/linux%E5%86%85%E6%A0%B82-0/8086%E9%A1%B5%E8%A1%A8%E7%BB%93%E6%9E%843.jpg" alt><br><img src="/2020/04/16/linux%E5%86%85%E6%A0%B82-0/8086%E9%A1%B5%E8%A1%A8%E7%BB%93%E6%9E%844.jpg" alt></p><h5 id="保护"><a href="#保护" class="headerlink" title="保护"></a>保护</h5><p>段级保护和页级保护</p><h4 id="中断可异常处理"><a href="#中断可异常处理" class="headerlink" title="中断可异常处理"></a>中断可异常处理</h4><p><img src="/2020/04/16/linux%E5%86%85%E6%A0%B82-0/8086%E4%B8%AD%E6%96%AD%E5%92%8C%E5%BC%82%E5%B8%B8.jpg" alt><br><img src="/2020/04/16/linux%E5%86%85%E6%A0%B82-0/8086%E4%B8%AD%E6%96%AD%E5%92%8C%E5%BC%82%E5%B8%B8%E5%90%91%E9%87%8F.jpg" alt><br><img src="/2020/04/16/linux%E5%86%85%E6%A0%B82-0/8086%E4%B8%AD%E6%96%AD%E6%BA%90.jpg" alt><br><img src="/2020/04/16/linux%E5%86%85%E6%A0%B82-0/8086%E5%BC%82%E5%B8%B8%E6%BA%90.jpg" alt><br><img src="/2020/04/16/linux%E5%86%85%E6%A0%B82-0/8086%E5%BC%82%E5%B8%B8%E5%88%86%E7%B1%BB.jpg" alt></p><p><img src="/2020/04/16/linux%E5%86%85%E6%A0%B82-0/8086%E5%BC%82%E5%B8%B8%E4%B8%AD%E6%96%AD%E4%BC%98%E5%85%88%E7%BA%A7.jpg" alt><br><img src="/2020/04/16/linux%E5%86%85%E6%A0%B82-0/8086%E5%BC%80%E5%90%AF%EF%BC%8C%E7%A6%81%E6%AD%A2%E4%B8%AD%E6%96%AD.jpg" alt></p><p><img src="/2020/04/16/linux%E5%86%85%E6%A0%B82-0/8086%E5%BC%82%E5%B8%B8%E4%B8%AD%E6%96%AD%E6%8F%8F%E8%BF%B0%E7%AC%A6%E8%A1%A82.jpg" alt><br><img src="/2020/04/16/linux%E5%86%85%E6%A0%B82-0/8086%E5%BC%82%E5%B8%B8%E4%B8%AD%E6%96%AD%E6%8F%8F%E8%BF%B0%E7%AC%A6%E8%A1%A8.jpg" alt><br><img src="/2020/04/16/linux%E5%86%85%E6%A0%B82-0/8086%E5%BC%82%E5%B8%B8%E4%B8%AD%E6%96%AD%E6%8F%8F%E8%BF%B0%E7%AC%A6.jpg" alt><br><img src="/2020/04/16/linux%E5%86%85%E6%A0%B82-0/8086%E5%BC%82%E5%B8%B8%E4%B8%AD%E6%96%AD%E6%8F%8F%E8%BF%B0%E7%AC%A62.jpg" alt></p><p><img src="/2020/04/16/linux%E5%86%85%E6%A0%B82-0/8086%E5%BC%82%E5%B8%B8%E4%B8%AD%E6%96%AD%E5%A4%84%E7%90%86.jpg" alt><br><img src="/2020/04/16/linux%E5%86%85%E6%A0%B82-0/8086%E5%BC%82%E5%B8%B8%E4%B8%AD%E6%96%AD%E5%A4%84%E7%90%862.jpg" alt><br><img src="/2020/04/16/linux%E5%86%85%E6%A0%B82-0/8086%E5%BC%82%E5%B8%B8%E4%B8%AD%E6%96%AD%E5%A4%84%E7%90%863.jpg" alt><br><img src="/2020/04/16/linux%E5%86%85%E6%A0%B82-0/8086%E5%BC%82%E5%B8%B8%E4%B8%AD%E6%96%AD%E5%A4%84%E7%90%864.jpg" alt><br><img src="/2020/04/16/linux%E5%86%85%E6%A0%B82-0/8086%E5%BC%82%E5%B8%B8%E4%B8%AD%E6%96%AD%E5%A4%84%E7%90%865.jpg" alt><br><img src="/2020/04/16/linux%E5%86%85%E6%A0%B82-0/8086%E5%BC%82%E5%B8%B8%E4%B8%AD%E6%96%AD%E5%A4%84%E7%90%866.jpg" alt><br><img src="/2020/04/16/linux%E5%86%85%E6%A0%B82-0/8086%E5%BC%82%E5%B8%B8%E4%B8%AD%E6%96%AD%E5%A4%84%E7%90%867.jpg" alt></p><p><img src="/2020/04/16/linux%E5%86%85%E6%A0%B82-0/%E4%BB%BB%E5%8A%A1%E7%AE%A1%E7%90%86.jpg" alt><br><img src="/2020/04/16/linux%E5%86%85%E6%A0%B82-0/%E4%BB%BB%E5%8A%A1%E7%AE%A1%E7%90%862.jpg" alt><br><img src="/2020/04/16/linux%E5%86%85%E6%A0%B82-0/%E4%BB%BB%E5%8A%A1%E7%AE%A1%E7%90%863.jpg" alt></p><p><img src="/2020/04/16/linux%E5%86%85%E6%A0%B82-0/%E4%BB%BB%E5%8A%A1%E7%AE%A1%E7%90%86%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84.jpg" alt><br>任务状态段：<br>用于恢复一个任务执行的处理器状态信息被保存在称为任务状态段TSS的段中。<br>TSS段中个字段分为两大类： 动态字段和静态字段<br><img src="/2020/04/16/linux%E5%86%85%E6%A0%B82-0/%E4%BB%BB%E5%8A%A1%E7%AE%A1%E7%90%86%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%842.jpg" alt></p><p><a href="任务管理数据结构动态字段.jpg"></a><br><img src="/2020/04/16/linux%E5%86%85%E6%A0%B82-0/%E4%BB%BB%E5%8A%A1%E7%AE%A1%E7%90%86%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E9%9D%99%E6%80%81%E5%AD%97%E6%AE%B5.jpg" alt><br><img src="/2020/04/16/linux%E5%86%85%E6%A0%B82-0/%E4%BB%BB%E5%8A%A1%E7%AE%A1%E7%90%86tss%E6%8F%8F%E8%BF%B0%E7%AC%A6.jpg" alt><br><img src="/2020/04/16/linux%E5%86%85%E6%A0%B82-0/%E4%BB%BB%E5%8A%A1%E7%AE%A1%E7%90%86%E4%BB%BB%E5%8A%A1%E5%AF%84%E5%AD%98%E5%99%A8.jpg" alt><br><img src="/2020/04/16/linux%E5%86%85%E6%A0%B82-0/%E4%BB%BB%E5%8A%A1%E7%AE%A1%E7%90%86%E4%BB%BB%E5%8A%A1%E9%97%A8%E6%8F%8F%E8%BF%B0%E7%AC%A6.jpg" alt></p><p><img src="/2020/04/16/linux%E5%86%85%E6%A0%B82-0/%E4%BB%BB%E5%8A%A1%E7%AE%A1%E7%90%86%E4%BB%BB%E5%8A%A1%E9%93%BE.jpg" alt><br><img src="/2020/04/16/linux%E5%86%85%E6%A0%B82-0/%E4%BB%BB%E5%8A%A1%E7%AE%A1%E7%90%86%E4%BB%BB%E5%8A%A1%E9%93%BE2.jpg" alt><br>保护模式系统表：一个代码段和数据段的GDT，支持分页机制的页目录和页表，每个应用程序的段和LDT表段。<br>保护模式异常和中断初始化：如见初始化设置一个保护模式IDT，IDT门描述符，任务门，TSS以及相关代码，数据和堆栈段<br>分页机制初始化：控制寄存器CR0的PG标志设置。<br>多任务初始化：TSS及TSS段描述符。</p><h4 id="模式切换"><a href="#模式切换" class="headerlink" title="模式切换"></a>模式切换</h4><p><img src="/2020/04/16/linux%E5%86%85%E6%A0%B82-0/%E5%88%87%E6%8D%A2%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F.jpg" alt><br><img src="/2020/04/16/linux%E5%86%85%E6%A0%B82-0/%E5%88%87%E6%8D%A2%E5%AE%9E%E5%9C%B0%E5%9D%80%E6%A8%A1%E5%BC%8F.jpg" alt><br><img src="/2020/04/16/linux%E5%86%85%E6%A0%B82-0/%E5%88%87%E6%8D%A2%E5%AE%9E%E5%9C%B0%E5%9D%80%E6%A8%A1%E5%BC%8F2.jpg" alt></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;80x86保护模式及其编程&quot;&gt;&lt;a href=&quot;#80x86保护模式及其编程&quot; class=&quot;headerlink&quot; title=&quot;80x86保护模式及其编程&quot;&gt;&lt;/a&gt;80x86保护模式及其编程&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;-本书介绍的linux擦欧总系统基于
      
    
    </summary>
    
    
      <category term="Linux" scheme="https://cnawesome.github.io/categories/Linux/"/>
    
    
      <category term="Linux" scheme="https://cnawesome.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>linux内核1.0</title>
    <link href="https://cnawesome.github.io/2020/04/15/linux%E5%86%85%E6%A0%B81-0/"/>
    <id>https://cnawesome.github.io/2020/04/15/linux%E5%86%85%E6%A0%B81-0/</id>
    <published>2020-04-15T13:56:12.000Z</published>
    <updated>2020-05-24T09:47:28.126Z</updated>
    
    <content type="html"><![CDATA[<pre><code>---------- 再一次看内核书籍，这一次一定要努力看完</code></pre><h3 id="1-linux的由来"><a href="#1-linux的由来" class="headerlink" title="1.linux的由来"></a>1.linux的由来</h3><p>由unix，minix，gun计划，posix标准，internet网络发展过来。</p><p><img src="/2020/04/15/linux%E5%86%85%E6%A0%B81-0/%E5%86%85%E6%A0%B8%E7%89%88%E6%9C%AC.jpg" alt><br><img src="/2020/04/15/linux%E5%86%85%E6%A0%B81-0/%E5%86%85%E6%A0%B8%E7%89%88%E6%9C%AC2.jpg" alt></p><p><img src="/2020/04/15/linux%E5%86%85%E6%A0%B81-0/%E5%86%85%E6%A0%B8%E6%96%87%E4%BB%B6.jpg" alt><br>bootimage 是软盘印象image的引导启动文件。<br>包括磁盘引导扇区代码，操作系统加载程序和内核执行代码。</p><p>磁盘引导扇区代码：<br>    pc的ram bios启动-&gt;默认启动驱动器的引导扇区代码-&gt;操作系统加载程序和内核执行代码读入内存-&gt;操作系统加载程序进行初始化内核-&gt;最终加载陈旭把控制权交给内核代码</p><p>内核代码正常运行需要文件系统的支持。</p><p>rootimage 向内和提供基本的根文件系统。</p><p>这两个盘合起来相当于一个可启动的dos操作系统盘。</p><p>as86.tar.Z 是16位汇编器连接程序软件包<br>Ǆlinux-0.11.tar.Z 压缩的内核源代码</p><p><img src="/2020/04/15/linux%E5%86%85%E6%A0%B81-0/linnux%E7%9B%AE%E5%BD%95.jpg" alt><br><img src="/2020/04/15/linux%E5%86%85%E6%A0%B81-0/linux%E5%8F%82%E8%80%83%E7%9A%84%E4%B9%A6.jpg" alt><br><img src="/2020/04/15/linux%E5%86%85%E6%A0%B81-0/linux%E8%AF%9E%E7%94%9F.jpg" alt></p><h3 id="微型计算机组成结构"><a href="#微型计算机组成结构" class="headerlink" title="微型计算机组成结构"></a>微型计算机组成结构</h3><h4 id="i-o端口寻址"><a href="#i-o端口寻址" class="headerlink" title="i/o端口寻址"></a>i/o端口寻址</h4><p>cpu访问i/o接口控制器或其上的信息，需要首先指定他们的地址。这种地址成为i/o端口</p><p>i/o控制器 包含：访问数据的数据端口，输出命令的命令端口，访问控制器状态的状态端口。</p><p>端口地址的设置方法：1.统一编制：2.独立编址<br><img src="/2020/04/15/linux%E5%86%85%E6%A0%B81-0/%E7%AB%AF%E5%8F%A3%E7%BB%9F%E4%B8%80%E7%BC%96%E5%9D%80.jpg" alt><br><img src="/2020/04/15/linux%E5%86%85%E6%A0%B81-0/%E7%AB%AF%E5%8F%A3%E7%8B%AC%E7%AB%8B%E7%BC%96%E5%9D%80.jpg" alt></p><p>Linux下 在/proc/ioports 可以查看相关控制器或设置使用的i/o地址范围</p><h4 id="接口访问控制"><a href="#接口访问控制" class="headerlink" title="接口访问控制"></a>接口访问控制</h4><p>pc机接口数据传输控制方式：<br>    1.程序循环查询方式<br>    2.中断处理方式<br>    3.DMA传输方式</p><p><img src="/2020/04/15/linux%E5%86%85%E6%A0%B81-0/%E4%B8%AD%E6%96%AD%E5%A4%84%E7%90%86%E6%96%B9%E5%BC%8F.jpg" alt></p><h3 id="主存，bios和cmos存储器"><a href="#主存，bios和cmos存储器" class="headerlink" title="主存，bios和cmos存储器"></a>主存，bios和cmos存储器</h3><h4 id="主存"><a href="#主存" class="headerlink" title="主存"></a>主存</h4><p>计算机上电-&gt;内存地址初始化（除去0xA0000到0xFFFFF 640K到1M 和  0xFFFE0000 到0xFFFFFFFF 4g处的最后一64k，这两个区域特定用于i/o设备和bios程序）</p><p><img src="/2020/04/15/linux%E5%86%85%E6%A0%B81-0/at%E5%86%85%E5%AD%98%E4%BD%BF%E7%94%A8%E5%8C%BA%E5%9F%9F.jpg" alt></p><h4 id="bios"><a href="#bios" class="headerlink" title="bios"></a>bios</h4><p><img src="/2020/04/15/linux%E5%86%85%E6%A0%B81-0/bios.jpg" alt><br>计算机上电-&gt; 内存地址初始化-&gt; cpu自动把代码段寄存器cs设置为0xF000，段基地址为 0xFFFF0000，段长度为64kb-&gt; ip=0xFFF0,cpu代码指向 0xFFFFFFF0 ，系统ram bios程序存放位置-&gt; bios在该位置存放一条jmp跳转指令转入bios内开始执行-&gt; bios执行初始化后将bios代码与数据复制到内存低端1M末端的64k处-&gt; 跳转到该位置让cpu静茹真正的实地址模式工作-&gt; 将操作系统引导程序加载到内存0x7c00处，继续执行引导程序<br><img src="/2020/04/15/linux%E5%86%85%E6%A0%B81-0/bios%E6%89%A7%E8%A1%8C.jpg" alt></p><h4 id="cmos"><a href="#cmos" class="headerlink" title="cmos"></a>cmos</h4><p>存储系统硬件信息和时钟信息</p><h3 id="控制器和控制卡"><a href="#控制器和控制卡" class="headerlink" title="控制器和控制卡"></a>控制器和控制卡</h3><p>—–2020.4.15</p><h4 id="中断控制器"><a href="#中断控制器" class="headerlink" title="中断控制器"></a>中断控制器</h4><p>ibm pc/at 80x86 兼容微机使用两片级联的8259A可编程中断控制芯片醉成中断控制器。如图2-6.</p><p><img src="/2020/04/15/linux%E5%86%85%E6%A0%B81-0/%E5%9B%BE2-6.jpg" alt></p><p>计算机初始化时，<br>    -&gt; rom bios 对两片8259芯片初始化<br>    -&gt; 同时，把15个中断优先级分配给时钟定时器，键盘，串行口，打印口，等设备控制器使用<br>    -&gt; 同时，在内存开始处0x000-0xFFF区域建立一个中断向量表。</p><p>linux对此做了重新的设置。</p><p><img src="/2020/04/15/linux%E5%86%85%E6%A0%B81-0/%E4%B8%AD%E6%96%AD%E5%90%91%E9%87%8F%E8%A1%A8%E5%88%9D%E5%A7%8B%E5%8C%96%E8%AE%BE%E7%BD%AE.jpg" alt></p><p><img src="/2020/04/15/linux%E5%86%85%E6%A0%B81-0/DMA%E6%8E%A7%E5%88%B6%E5%99%A8.jpg" alt><br><img src="/2020/04/15/linux%E5%86%85%E6%A0%B81-0/%E5%AE%9A%E6%97%B6%E6%8E%A7%E5%88%B6%E5%99%A8.jpg" alt></p><h4 id="键盘控制器"><a href="#键盘控制器" class="headerlink" title="键盘控制器"></a>键盘控制器</h4><p><img src="/2020/04/15/linux%E5%86%85%E6%A0%B81-0/%E9%94%AE%E7%9B%98%E6%8E%A7%E5%88%B6%E5%99%A8.jpg" alt><br>键盘控制器=键盘的键盘编码器+主机的键盘控制器</p><p>键盘编码器收集按键按下松开的状态信息（即扫描码）-&gt;  主机键盘控制器接收到键盘扫描码（11为的串行信息）后进行解码-&gt; 转换位pc/xt标准键盘兼容的系统扫描码-&gt; 通过中断控制器IRQ1引脚向cpu发送中断请求-&gt; 响应该中断请求后，调用键盘中断处理程序来读取控制器的xt键盘扫描码-&gt; 解码后把数据发送给操作系统的键盘数据队列中</p><h4 id="串行控制卡"><a href="#串行控制卡" class="headerlink" title="串行控制卡"></a>串行控制卡</h4><p><img src="/2020/04/15/linux%E5%86%85%E6%A0%B81-0/%E5%BC%82%E6%AD%A5%E9%80%9A%E4%BF%A1%E4%BC%A0%E8%BE%93.jpg" alt><br><img src="/2020/04/15/linux%E5%86%85%E6%A0%B81-0/%E4%B8%B2%E8%A1%8C%E6%8E%A7%E5%88%B6%E5%99%A8.jpg" alt></p><h4 id="磁盘控制器"><a href="#磁盘控制器" class="headerlink" title="磁盘控制器"></a>磁盘控制器</h4><p><img src="/2020/04/15/linux%E5%86%85%E6%A0%B81-0/%E7%A3%81%E7%9B%98.jpg" alt><br><img src="/2020/04/15/linux%E5%86%85%E6%A0%B81-0/%E7%A3%81%E7%9B%982.jpg" alt><br><img src="/2020/04/15/linux%E5%86%85%E6%A0%B81-0/%E7%A3%81%E7%9B%983.jpg" alt><br><img src="/2020/04/15/linux%E5%86%85%E6%A0%B81-0/%E7%A3%81%E7%9B%984.jpg" alt></p><h3 id="内核编程语言和环境（阅读源码的准备工作）"><a href="#内核编程语言和环境（阅读源码的准备工作）" class="headerlink" title="内核编程语言和环境（阅读源码的准备工作）"></a>内核编程语言和环境（阅读源码的准备工作）</h3><h4 id="as86汇编器"><a href="#as86汇编器" class="headerlink" title="as86汇编器"></a>as86汇编器</h4><p><img src="/2020/04/15/linux%E5%86%85%E6%A0%B81-0/as86%E6%B1%87%E7%BC%96%E5%99%A8%E4%BB%8B%E7%BB%8D.jpg" alt></p><p>as86汇编语句：赋值语句，伪操作符语句，机器指令语句<br>汇编器编译的产生的目标文件起码包含三个段或区：正文段，数据段，未初始化数据段</p><p>汇编如何实现读写操作，使用相应的寄存器，将数值存入寄存器，程序自动对其读写</p><p>简单的引导扇区启动程序：<br><img src="/2020/04/15/linux%E5%86%85%E6%A0%B81-0/as86%E6%B1%87%E7%BC%96bootsec%E5%AE%9E%E4%BE%8B.jpg" alt></p><p><img src="/2020/04/15/linux%E5%86%85%E6%A0%B81-0/as86%E6%B1%87%E7%BC%96bootsec%E5%AE%9E%E4%BE%8B%E8%A7%A3%E9%87%8A.jpg" alt><br><img src="/2020/04/15/linux%E5%86%85%E6%A0%B81-0/as86%E6%B1%87%E7%BC%96bootsec%E5%AE%9E%E4%BE%8B%E8%A7%A3%E9%87%8A2.jpg" alt><br><img src="/2020/04/15/linux%E5%86%85%E6%A0%B81-0/as86%E6%B1%87%E7%BC%96bootsec%E5%AE%9E%E4%BE%8B%E8%A7%A3%E9%87%8A3.jpg" alt><br><img src="/2020/04/15/linux%E5%86%85%E6%A0%B81-0/as86%E6%B1%87%E7%BC%96bootsec%E5%AE%9E%E4%BE%8B%E8%A7%A3%E9%87%8A4.jpg" alt><br><img src="/2020/04/15/linux%E5%86%85%E6%A0%B81-0/as86%E6%B1%87%E7%BC%96bootsec%E5%AE%9E%E4%BE%8B%E8%A7%A3%E9%87%8A5.jpg" alt></p><p><img src="/2020/04/15/linux%E5%86%85%E6%A0%B81-0/as86%E6%B1%87%E7%BC%96bootsec%E5%AE%9E%E4%BE%8B%E7%BC%96%E8%AF%91.jpg" alt><br><img src="/2020/04/15/linux%E5%86%85%E6%A0%B81-0/as86%E6%B1%87%E7%BC%96bootsec%E5%AE%9E%E4%BE%8B%E7%BC%96%E8%AF%91%E8%A7%A3%E9%87%8A.jpg" alt></p><h4 id="gun-as汇编器"><a href="#gun-as汇编器" class="headerlink" title="gun as汇编器"></a>gun as汇编器</h4><p><img src="/2020/04/15/linux%E5%86%85%E6%A0%B81-0/gas%E6%B1%87%E7%BC%96.jpg" alt><br><img src="/2020/04/15/linux%E5%86%85%E6%A0%B81-0/gas%E6%B1%87%E7%BC%96%E8%AF%AD%E6%B3%95.jpg" alt><br><img src="/2020/04/15/linux%E5%86%85%E6%A0%B81-0/gas%E6%B1%87%E7%BC%96%E8%AF%AD%E6%B3%951.jpg" alt><br>as汇编器有简单的预处理功能</p><h5 id="指令语句，操作数和寻址"><a href="#指令语句，操作数和寻址" class="headerlink" title="指令语句，操作数和寻址"></a>指令语句，操作数和寻址</h5><p><img src="/2020/04/15/linux%E5%86%85%E6%A0%B81-0/gas%E6%B1%87%E7%BC%96%E8%AF%AD%E6%B3%95%E6%8C%87%E4%BB%A4%E8%AF%AD%E5%8F%A5.jpg" alt><br><img src="/2020/04/15/linux%E5%86%85%E6%A0%B81-0/gas%E6%B1%87%E7%BC%96%E8%AF%AD%E6%B3%95%E6%93%8D%E4%BD%9C%E7%A0%81%E5%91%BD%E5%90%8D.jpg" alt><br><img src="/2020/04/15/linux%E5%86%85%E6%A0%B81-0/gas%E6%B1%87%E7%BC%96%E8%AF%AD%E6%B3%95%E6%93%8D%E4%BD%9C%E7%A0%81%E5%89%8D%E7%BC%80.jpg" alt><br><img src="/2020/04/15/linux%E5%86%85%E6%A0%B81-0/gas%E6%B1%87%E7%BC%96%E8%AF%AD%E6%B3%95%E8%B7%B3%E8%BD%AC%E6%8C%87%E4%BB%A4.jpg" alt><br><img src="/2020/04/15/linux%E5%86%85%E6%A0%B81-0/gas%E6%B1%87%E7%BC%96%E8%AF%AD%E6%B3%95%E5%8C%BA%E4%B8%8E%E9%87%8D%E5%AE%9A%E4%BD%8D.jpg" alt><br><img src="/2020/04/15/linux%E5%86%85%E6%A0%B81-0/gas%E6%B1%87%E7%BC%96%E8%AF%AD%E6%B3%95%E5%8C%BA%E4%B8%8E%E9%87%8D%E5%AE%9A%E4%BD%8D2.jpg" alt><br><img src="/2020/04/15/linux%E5%86%85%E6%A0%B81-0/gas%E6%B1%87%E7%BC%96%E8%AF%AD%E6%B3%95%E5%8C%BA%E4%B8%8E%E9%87%8D%E5%AE%9A%E4%BD%8D3.jpg" alt><br><img src="/2020/04/15/linux%E5%86%85%E6%A0%B81-0/gas%E6%B1%87%E7%BC%96%E8%AF%AD%E6%B3%95%E5%86%85%E5%AD%98%E5%BC%95%E7%94%A8.jpg" alt></p><p><img src="/2020/04/15/linux%E5%86%85%E6%A0%B81-0/gas%E6%B1%87%E7%BC%96%E5%91%BD%E4%BB%A4.jpg" alt><br><img src="/2020/04/15/linux%E5%86%85%E6%A0%B81-0/gas%E6%B1%87%E7%BC%96%E7%BC%96%E5%86%9916%E4%BD%8D.jpg" alt></p><p><img src="/2020/04/15/linux%E5%86%85%E6%A0%B81-0/ld%E4%BD%BF%E7%94%A8%E6%96%B9%E5%BC%8F.jpg" alt><br><img src="/2020/04/15/linux%E5%86%85%E6%A0%B81-0/ld%E8%BF%9E%E6%8E%A5%E5%99%A8%E5%8C%BA.jpg" alt><br><img src="/2020/04/15/linux%E5%86%85%E6%A0%B81-0/ld%E8%BF%9E%E6%8E%A5%E5%99%A8%E5%8C%BA2.jpg" alt><br><img src="/2020/04/15/linux%E5%86%85%E6%A0%B81-0/ld%E8%BF%9E%E6%8E%A5%E5%99%A8%E5%8C%BA%E4%B8%8E%E9%87%8D%E5%AE%9A%E4%BD%8D.jpg" alt></p><h3 id="c语言环境"><a href="#c语言环境" class="headerlink" title="c语言环境"></a>c语言环境</h3><p><img src="/2020/04/15/linux%E5%86%85%E6%A0%B81-0/c%E8%AF%AD%E8%A8%80%E5%B5%8C%E5%85%A5%E5%AF%84%E5%AD%98%E5%99%A8%E5%8F%98%E9%87%8F.jpg" alt><br><img src="/2020/04/15/linux%E5%86%85%E6%A0%B81-0/c%E8%AF%AD%E8%A8%80%E5%B5%8C%E5%85%A5%E6%B1%87%E7%BC%96.jpg" alt><br><img src="/2020/04/15/linux%E5%86%85%E6%A0%B81-0/c%E8%AF%AD%E8%A8%80%E5%B5%8C%E5%85%A5%E6%B1%87%E7%BC%96%E7%BB%84%E5%90%88%E8%AF%AD%E5%8F%A5.jpg" alt><br><img src="/2020/04/15/linux%E5%86%85%E6%A0%B81-0/c%E8%AF%AD%E8%A8%80%E7%BC%96%E8%AF%91%E8%BF%87%E7%A8%8B.jpg" alt></p><p><img src="/2020/04/15/linux%E5%86%85%E6%A0%B81-0/as86%E6%B1%87%E7%BC%96bootsec%E5%AE%9E%E4%BE%8B%E7%BC%96%E8%AF%91.jpg" alt><br><img src="/2020/04/15/linux%E5%86%85%E6%A0%B81-0/as86%E6%B1%87%E7%BC%96bootsec%E5%AE%9E%E4%BE%8B%E7%BC%96%E8%AF%91%E8%A7%A3%E9%87%8A.jpg" alt></p><p><img src="/2020/04/15/linux%E5%86%85%E6%A0%B81-0/%E6%B1%87%E7%BC%96%E8%B0%83%E7%94%A8c%E5%87%BD%E6%95%B01.jpg" alt><br><img src="/2020/04/15/linux%E5%86%85%E6%A0%B81-0/%E6%B1%87%E7%BC%96%E8%B0%83%E7%94%A8c%E5%87%BD%E6%95%B02.jpg" alt></p><p>汇编调用c函数，将参数入栈，call函数名即调用带有参数的函数</p><p>这里看的云里雾里的，不太行</p><h4 id="linux目标文件格式"><a href="#linux目标文件格式" class="headerlink" title="linux目标文件格式"></a>linux目标文件格式</h4><p>本书介绍:<br>    编译器申城目标文件结构-&gt; 链接器把目标文件模块组合，生成二进制可执行映像文件</p><pre><code>二进制代码文件image生成原理与过程</code></pre><p><img src="/2020/04/15/linux%E5%86%85%E6%A0%B81-0/linux%E7%9B%AE%E6%A0%87%E6%96%87%E4%BB%B6%E6%A0%BC%E5%BC%8F.jpg" alt><br><img src="/2020/04/15/linux%E5%86%85%E6%A0%B81-0/linux%E7%9B%AE%E6%A0%87%E6%96%87%E4%BB%B6%E6%A0%BC%E5%BC%8F2.jpg" alt></p><pre><code>执行头部分：包含有关整体结构信息。代码区：由编译器或汇编器生成的二进制指令代码和数据信息。数据区：由编译器或汇编器生成的数据信息。代码重定部分：含有供链接程序使用的记录数据。数据重定位部分：用于数据段重定位。符号表部分：同样含有供链接程序使用的记录数据。字符串表部分：含有与符号命相对应的字符串</code></pre><p><img src="/2020/04/15/linux%E5%86%85%E6%A0%B81-0/linux%E7%9B%AE%E6%A0%87%E6%96%87%E4%BB%B6%E6%A0%BC%E5%BC%8F3.jpg" alt><br><img src="/2020/04/15/linux%E5%86%85%E6%A0%B81-0/linux%E7%9B%AE%E6%A0%87%E6%96%87%E4%BB%B6%E6%A0%BC%E5%BC%8F4.jpg" alt></p><p><img src="/2020/04/15/linux%E5%86%85%E6%A0%B81-0/linux%E8%BF%9E%E6%8E%A5%E7%A8%8B%E5%BA%8F%E7%9A%84%E6%93%8D%E4%BD%9C.jpg" alt><br><img src="/2020/04/15/linux%E5%86%85%E6%A0%B81-0/linux%E8%BF%9E%E6%8E%A5%E7%A8%8B%E5%BA%8F%E7%9A%84%E6%93%8D%E4%BD%9C2.jpg" alt><br><img src="/2020/04/15/linux%E5%86%85%E6%A0%B81-0/linux%E8%BF%9E%E6%8E%A5%E7%A8%8B%E5%BA%8F%E7%9A%84%E6%93%8D%E4%BD%9C3.jpg" alt><br><img src="/2020/04/15/linux%E5%86%85%E6%A0%B81-0/linux%E8%BF%9E%E6%8E%A5%E7%A8%8B%E5%BA%8F%E7%9A%84%E6%93%8D%E4%BD%9C4.jpg" alt><br><img src="/2020/04/15/linux%E5%86%85%E6%A0%B81-0/linux%E8%BF%9E%E6%8E%A5%E7%A8%8B%E5%BA%8F%E7%9A%84%E6%93%8D%E4%BD%9C5.jpg" alt></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;pre&gt;&lt;code&gt;---------- 再一次看内核书籍，这一次一定要努力看完&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;1-linux的由来&quot;&gt;&lt;a href=&quot;#1-linux的由来&quot; class=&quot;headerlink&quot; title=&quot;1.linux的由来&quot;&gt;&lt;/a&gt;1.
      
    
    </summary>
    
    
      <category term="Linux" scheme="https://cnawesome.github.io/categories/Linux/"/>
    
    
      <category term="Linux" scheme="https://cnawesome.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>概率论1.0</title>
    <link href="https://cnawesome.github.io/2020/04/15/%E6%A6%82%E7%8E%87%E8%AE%BA1-0/"/>
    <id>https://cnawesome.github.io/2020/04/15/%E6%A6%82%E7%8E%87%E8%AE%BA1-0/</id>
    <published>2020-04-15T03:20:36.000Z</published>
    <updated>2020-07-23T08:17:56.111Z</updated>
    
    <content type="html"><![CDATA[<h3 id="随机过程-random-process"><a href="#随机过程-random-process" class="headerlink" title="随机过程 random process"></a>随机过程 random process</h3><p>easiest random process ：伯努利过程 Bernoulli process</p><h3 id="伯努利过程：一直随机的抛一枚硬币-独立的"><a href="#伯努利过程：一直随机的抛一枚硬币-独立的" class="headerlink" title="伯努利过程：一直随机的抛一枚硬币,独立的"></a>伯努利过程：一直随机的抛一枚硬币,独立的</h3><p>independent</p><p>at each trials:<br>    $P(sucess) = P(X=1) = p$<br>    $P(failure) = P(X=0) = 1-p$</p><p>最简单的随机过程是把随机过程当做一串随机变量的随机序列</p><p>$x_1,x_2,x_3$的联合分布<br>    得这些随机变量的概率密度函数：$P_{x_1,x_2,x_3}=P_{x_1}P_{x_2}P_{x_3}$<br>        由于这些随机变量是独立的<br>小总结：随机过程只是随机变量的集合</p><p>例：<br><img src="/2020/04/15/%E6%A6%82%E7%8E%87%E8%AE%BA1-0/概率13：interarrival time.jpg" alt></p><p>经过一段实验时间遇见第一个1的时间，我们称为$T_{1}$<br>$T_{1}$的概率分布<br>    $p(T_{1}=t)=(1-p)^{t-1}p$,$t=1,2,3,…$<br>    符合几何分布<br>    $E[t_{1}]=1/p$<br>    $Var[t_{1}]=(1-p)/p^{2}$</p><p>一个伯努利实验加上一个伯努利试验可以成为新的一个伯努利试验</p><h3 id="泊松分布"><a href="#泊松分布" class="headerlink" title="泊松分布"></a>泊松分布</h3><p>泊松分布是连续的伯努利过程版本</p><p>伯努利实验：<br>            每个间隔相当于一次实验<br>            1.每个间隔的概率是相同的<br>               2.每个间隔的概率是独立的<br>将时间轴使用插槽平等分割，每个时间槽都是独立的。不同长度的时间间隔也是相互独立的</p><p>伯努利过程在一个时间段使用一个个插槽，在插槽中用一个0,1表示时间是否发生，如果这个插槽是秒级的，或者毫秒级，越分越小，可以直接用时间段的没一点查看是否发生事件。这样，只需要知道在某个时间点是否发生该时间<br>如下式表达：<br><img src="/2020/04/15/%E6%A6%82%E7%8E%87%E8%AE%BA1-0/概率13：small interval.jpg" alt><br>$lim \frac{P(1,\delta)}{\delta}=\lambda$<br>这个$\lambda$ 我们称为到达率，或者过程的密度</p><p>$E(number of arrived,in [0,\delta])=\lambda \delta$</p><p>now,<br>我们有一个大的时间间隔t，我们用小的间隔delta来分割t，<br>能分割的个数$n=\frac{t}{\delta}$<br>又每个$\delta$的概率$p=\lambda \delta$,且不同的\delta间隔之间是独立的<br>近似可得一个伯努利过程<br>当$\delta$ 趋近于0时，使用伯努利实验的概率密度函数</p><p>得出泊松的伯努利过程<br>when $\delta$趋于0，n趋于无穷大</p><script type="math/tex; mode=display">p(k)=(n  choose  k)(\frac{\lambda t}{n})^{k}(1-\frac{\lambda t}{n})^{n-k}</script><p>由微积分得<script type="math/tex">(1-\frac{\lambda t}{n})^{n-k}=e^{-\lambda t}</script></p><script type="math/tex; mode=display">p(k,t)=(n  choose  k)(\frac{\lambda t}{n})^{k}e^{-\lambda t}</script><script type="math/tex; mode=display">E(N_{t})=\lambda t</script><script type="math/tex; mode=display">Var(N_{t})=\lambda t</script><p>—-         詹2020.7.14</p><p>泊松PMF:</p><script type="math/tex; mode=display">p(k,t)=\frac{(\lambda t)^{k}e^{-\lambda t}}{k!}</script><script type="math/tex; mode=display">k=0,1,2...</script><h4 id="分裂泊松分布"><a href="#分裂泊松分布" class="headerlink" title="分裂泊松分布"></a>分裂泊松分布</h4><p>在在一个泊松分布的随机变量变化轴的一点上可以选择多个其他的泊松分布轴。</p><h3 id="马尔科夫链"><a href="#马尔科夫链" class="headerlink" title="马尔科夫链"></a>马尔科夫链</h3><p>马尔科夫过程是随机过程的一类，建立在事件之间有依赖</p><p><img src="/2020/04/15/%E6%A6%82%E7%8E%87%E8%AE%BA1-0/马尔科夫链.jpg" alt><br>马尔科夫通用框架：<br>$new state = f(old state,noise)$<br>一般表示一些系统或变量的演变</p><p><img src="/2020/04/15/%E6%A6%82%E7%8E%87%E8%AE%BA1-0/马尔科夫链1.jpg" alt><br>为什么马尔科夫链成立？</p><p><img src="/2020/04/15/%E6%A6%82%E7%8E%87%E8%AE%BA1-0/马尔科夫链2.jpg" alt><br>$p_{31}$看做在state状态3条件下转换state状态1的条件概率<br>$p_{ij}=P(X_{n+1}=j|X_{n}=i)$</p><p>$p_{31}$的转换的概率不受它之前转换的概率的影响，如$p_{23}$是$p_{31}$的概率，$p_{31}$的概率不会受$p_{23}$影响<br>$p_{ij}=P(X_{n+1}=j|X_{n}=i,X_{n-1},X_{n-2},…,X_{0})$<br>之前的不影响之后的</p><p>马尔科夫链模型制作：<br>1.确定你的状态变量是什么，确定状态的概率<br>2.确定不同的状态，再确定状态转换的概率<br>3.确定转换概率</p><p>怎么使用马尔科夫模型？</p><p>需要该模型做预测<br>当你需要在这个模型中预测从某一状态到拧一个状态后，可能出现的状态是什么。</p><p>例，求下面的$p_{ij}$<br><img src="/2020/04/15/%E6%A6%82%E7%8E%87%E8%AE%BA1-0/马尔科夫链3.jpg" alt><br>key recursion:<br>$r_{ij}=\sum_{k=1}^{n}r_{ik}(n-1)P_{kj}$</p><p>with random initial state:<br>$P(x_{n}=j)=\sum_{i=1}^{n}P(x_{0}=i)r_{ij}(n)$</p><p>马尔科夫模型的变量的状态会一直改变，但他的变量的概率到一定程度就会稳定。</p><p>如果马尔科夫链有周期性，他可能无法收敛</p><h5 id="回归和传输状态"><a href="#回归和传输状态" class="headerlink" title="回归和传输状态"></a>回归和传输状态</h5><p>回归状态：从某一状态出去，总是能有一条回来改状态的路径<br>传输状态：从该状态出去，无法再回到该状态，也称瞬态</p><p>从一个瞬态出发，最终会在一个回归态群，无法回到瞬态</p><p>有指向自己的传输过程一定不是周期性链</p><h5 id="稳定状态概率"><a href="#稳定状态概率" class="headerlink" title="稳定状态概率"></a>稳定状态概率</h5><p>马尔科夫链收敛定理：<br>判断一个马尔科夫链最终会成为稳态<br>1，只有一个大的回归态群<br>2，这个回归态群没有周期性</p><p>稳定态马尔科夫链的从i到j概率</p><p>$r_{ij}(n)=\sum_{k}r_{ik}(n-1)r_{kj}$</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;随机过程-random-process&quot;&gt;&lt;a href=&quot;#随机过程-random-process&quot; class=&quot;headerlink&quot; title=&quot;随机过程 random process&quot;&gt;&lt;/a&gt;随机过程 random process&lt;/h3&gt;&lt;p&gt;ea
      
    
    </summary>
    
    
      <category term="算法" scheme="https://cnawesome.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
    
  </entry>
  
  <entry>
    <title>ubuntu 操作</title>
    <link href="https://cnawesome.github.io/2020/04/08/ubuntu-%E6%93%8D%E4%BD%9C/"/>
    <id>https://cnawesome.github.io/2020/04/08/ubuntu-%E6%93%8D%E4%BD%9C/</id>
    <published>2020-04-08T10:21:30.000Z</published>
    <updated>2020-04-09T11:52:04.291Z</updated>
    
    <content type="html"><![CDATA[<h2 id="基本命令"><a href="#基本命令" class="headerlink" title="基本命令"></a>基本命令</h2><p>whoami 用来查看当前用户名</p><h3 id="安装软件"><a href="#安装软件" class="headerlink" title="安装软件"></a>安装软件</h3><p>APT管理软件：高级报管理工具</p><p>软件更新，升级<br>    sudo apt-get update 或者 sudo apt-get upgrade<br>软件安装<br>    sudo apt-get install 软件包名</p><p>软件删除<br>    sudo apt-get remove</p><p>搜索软件包<br>    sudo apt-get search 软件包名</p><p>显示该包的依赖信息<br>    sudo apt-get depends 软件包名</p><h4 id="dpkg-command"><a href="#dpkg-command" class="headerlink" title="dpkg command"></a>dpkg command</h4><p>安装dpkg命令：<br>    sudo dpkg -i deb 包名</p><p>shutdown 关机命令<br>    -t 告诉init多久后关机<br>    -r 重新启动<br>    -k 不是真正的关机，只是警告信息<br>    -h 关机后关闭电源</p><p>halt 命令 关闭系统</p><p>putty 远程登录<br>    pputty以中国远程登陆工具，功能强大</p><pre><code>1。在服务器端安装openssh-serveropenssh服务器组件sshd持续监听老子客户端工具的连接请求。在ubuntu安装 openssh-servesudo apt-get install opensssh-server2.客户端安装putty</code></pre><h2 id="ubuntu-文件管理"><a href="#ubuntu-文件管理" class="headerlink" title="ubuntu 文件管理"></a>ubuntu 文件管理</h2><p>在linux里，一切都看作文件<br>在linux中没有磁盘的逻辑分区，任何一种类的文件系统被创建后都需要挂载到某个特定的目录才能使用。</p><p>linux用磁盘块管理内存空间。磁盘块=超级节点+i-节点+数据块</p><p>cat命令：显示文件或追加文件<br>cat -n 编号输出文件<br>cat可以用于输出重定向，将现有的文件内容重定向到已有的文件。如果目标文件不存在，创建该文件。<br>    cat a1.txt&gt;a2.txt<br>    cat a1.txt&gt;&gt;a2.txt 表示追加重定向</p><p>more显示输出内容，根据窗口大小调整分页 </p><p>less 显示文件</p><p>head 显示文件前n行，不带选项时默认显示前10行<br>tail 显示文件后n行</p><p>echo 输出字符串到基本输出，在显示器的输出</p><h3 id="管道"><a href="#管道" class="headerlink" title="管道"></a>管道</h3><p>一个由标准输入</p><h3 id="linux-多用户"><a href="#linux-多用户" class="headerlink" title="linux 多用户"></a>linux 多用户</h3><p>liunx用户分类：<br>    1.超级用户<br>    2.系统用户（一些系统进程的使用名）<br>    3.普通用户</p><p>每一个用户都只能属于一个基本用户组，可以属于多个附加组。</p><p>quote 磁盘配额</p><p>物理内存时系统提供的内存大小。<br>linux的虚拟内存时利用磁盘空间的一块逻辑内存<br>用作虚拟内存的磁盘空间称为交换空间<br>swap时linux下的虚拟内存分区，作用是在物理内存使用完之后，将磁盘空间即swap分区当作内存来使用。</p><p>gcc 编译流程：预编译，编译，汇编（生成目标文件），链接（生成可执行文件）</p><p>gdb程序调试工具</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;基本命令&quot;&gt;&lt;a href=&quot;#基本命令&quot; class=&quot;headerlink&quot; title=&quot;基本命令&quot;&gt;&lt;/a&gt;基本命令&lt;/h2&gt;&lt;p&gt;whoami 用来查看当前用户名&lt;/p&gt;
&lt;h3 id=&quot;安装软件&quot;&gt;&lt;a href=&quot;#安装软件&quot; class=&quot;head
      
    
    </summary>
    
    
      <category term="linux" scheme="https://cnawesome.github.io/categories/linux/"/>
    
    
      <category term="linux" scheme="https://cnawesome.github.io/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>算法设计4.0</title>
    <link href="https://cnawesome.github.io/2020/04/02/%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A14-0/"/>
    <id>https://cnawesome.github.io/2020/04/02/%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A14-0/</id>
    <published>2020-04-02T13:11:58.000Z</published>
    <updated>2020-04-06T13:22:13.723Z</updated>
    
    <content type="html"><![CDATA[<h3 id="散列-hashing"><a href="#散列-hashing" class="headerlink" title="散列 hashing"></a>散列 hashing</h3><p><img src="/2020/04/02/%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A14-0/%E6%95%A3%E5%88%97%E5%8E%9F%E7%90%86.jpg" alt></p><p><img src="/2020/04/02/%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A14-0/%E6%95%A3%E5%88%97%E8%A1%A8%E5%AE%9E%E4%BE%8B.jpg" alt></p><p>三列表长度：90001</p><p>n/m ：装填因子</p><p><img src="/2020/04/02/%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A14-0/%E6%95%A3%E5%88%97%E8%A1%A8%E5%86%B2%E7%AA%81.jpg" alt></p><p>散列冲突处理方式：<br>    1.选择有效的散列函数<br>    2.多槽位<br>    3.</p><h4 id="散列函数"><a href="#散列函数" class="headerlink" title="散列函数"></a>散列函数</h4><p><img src="/2020/04/02/%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A14-0/%E6%95%A3%E5%88%97%E5%87%BD%E6%95%B0%E4%BB%BB%E5%8A%A1.jpg" alt><br><img src="/2020/04/02/%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A14-0/%E6%95%A3%E5%88%97%E5%87%BD%E6%95%B0%E9%99%A4%E4%BD%99%E6%B3%95.jpg" alt><br><img src="/2020/04/02/%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A14-0/%E6%95%A3%E5%88%97%E5%87%BD%E6%95%B0MAD%E6%B3%95.jpg" alt><br><img src="/2020/04/02/%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A14-0/%E6%95%A3%E5%88%97%E5%87%BD%E6%95%B0%E5%A4%9A%E9%A1%B9%E5%BC%8F%E6%B3%95.jpg" alt><br><img src="/2020/04/02/%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A14-0/%E6%95%A3%E5%88%97%E5%87%BD%E6%95%B0%E5%B9%B3%E6%96%B9%E5%8F%96%E4%B8%AD.jpg" alt><br><img src="/2020/04/02/%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A14-0/%E6%95%A3%E5%88%97%E5%87%BD%E6%95%B0%E6%8A%98%E5%8F%A0%E6%B3%95.jpg" alt><br><img src="/2020/04/02/%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A14-0/%E6%95%A3%E5%88%97%E5%87%BD%E6%95%B0%E4%BC%AA%E9%9A%8F%E6%9C%BA%E6%95%B0%E6%B3%95.jpg" alt></p><h4 id="多槽位"><a href="#多槽位" class="headerlink" title="多槽位"></a>多槽位</h4><p><img src="/2020/04/02/%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A14-0/%E6%95%A3%E5%88%97%E8%A1%A8%E5%86%B2%E7%AA%81.jpg" alt><br><img src="/2020/04/02/%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A14-0/%E6%95%A3%E5%88%97%E8%A1%A8%E5%86%B2%E7%AA%81%E5%A4%9A%E6%A7%BD%E4%BD%8D.jpg" alt><br><img src="/2020/04/02/%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A14-0/%E6%95%A3%E5%88%97%E8%A1%A8%E5%86%B2%E7%AA%81%E7%8B%AC%E7%AB%8B%E9%93%BE.jpg" alt><br><img src="/2020/04/02/%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A14-0/%E6%95%A3%E5%88%97%E8%A1%A8%E5%86%B2%E7%AA%81%E7%8B%AC%E7%AB%8B%E9%93%BE%E4%BC%98%E7%BC%BA%E7%82%B9.jpg" alt></p><h3 id="优先级队列"><a href="#优先级队列" class="headerlink" title="优先级队列"></a>优先级队列</h3><p><img src="/2020/04/02/%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A14-0/%E4%BC%98%E5%85%88%E7%BA%A7%E9%98%9F%E5%88%97.jpg" alt><br><img src="/2020/04/02/%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A14-0/%E4%BC%98%E5%85%88%E7%BA%A7%E9%98%9F%E5%88%97%E7%BB%93%E6%9E%84%E6%80%A7.jpg" alt><br><img src="/2020/04/02/%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A14-0/%E4%BC%98%E5%85%88%E7%BA%A7%E9%98%9F%E5%88%97%E5%A0%86%E5%BA%8F%E6%80%A7.jpg" alt><br><img src="/2020/04/02/%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A14-0/%E4%BC%98%E5%85%88%E7%BA%A7%E9%98%9F%E5%88%97%E4%BB%A3%E7%A0%81.jpg" alt></p><p>按优先级排序，需要一个优先级队列来实现</p><h4 id="完全二叉堆"><a href="#完全二叉堆" class="headerlink" title="完全二叉堆"></a>完全二叉堆</h4><p><img src="/2020/04/02/%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A14-0/%E4%BC%98%E5%85%88%E7%BA%A7%E9%98%9F%E5%88%97%E5%AE%8C%E5%85%A8%E4%BA%8C%E5%8F%89%E6%A0%91.jpg" alt><br><img src="/2020/04/02/%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A14-0/%E4%BC%98%E5%85%88%E7%BA%A7%E9%98%9F%E5%88%97%E5%AE%8C%E5%85%A8%E4%BA%8C%E5%8F%89%E5%A0%86%E4%BB%A3%E7%A0%81.jpg" alt></p><p><img src="/2020/04/02/%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A14-0/%E5%AE%8C%E5%85%A8%E4%BA%8C%E5%8F%89%E5%A0%86%E5%88%A0%E9%99%A4%E6%93%8D%E4%BD%9C.jpg" alt><br><img src="/2020/04/02/%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A14-0/%E5%AE%8C%E5%85%A8%E4%BA%8C%E5%8F%89%E5%A0%86%E5%88%A0%E9%99%A4%E6%93%8D%E4%BD%9C%E4%BB%A3%E7%A0%81.jpg" alt></p><p>删除操作：为什么不用左子树根节点？<br>如果用左子树根节点换根节点，也必然会出现顺序错误，在调整顺序的操作上比起用最后一个节点来说，多余了一些操作。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;散列-hashing&quot;&gt;&lt;a href=&quot;#散列-hashing&quot; class=&quot;headerlink&quot; title=&quot;散列 hashing&quot;&gt;&lt;/a&gt;散列 hashing&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;/2020/04/02/%E7%AE%97%E6%B3%
      
    
    </summary>
    
    
      <category term="算法" scheme="https://cnawesome.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="算法" scheme="https://cnawesome.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>c++笔记</title>
    <link href="https://cnawesome.github.io/2020/03/26/c-%E5%9F%BA%E7%A1%80/"/>
    <id>https://cnawesome.github.io/2020/03/26/c-%E5%9F%BA%E7%A1%80/</id>
    <published>2020-03-26T04:18:55.000Z</published>
    <updated>2020-04-19T15:08:24.750Z</updated>
    
    <content type="html"><![CDATA[<h3 id="define宏定义"><a href="#define宏定义" class="headerlink" title="define宏定义"></a>define宏定义</h3><p>ANSI标准五个预定义的宏名<br>    <strong>LINE</strong> 表示该行代码的所在行号<br>    <strong>FILE</strong> 表示源文件的文件名<br>    <strong>DATE</strong> 表示源文件被编译的日期，格式(月/日/年)<br>    <strong>TIME</strong> 表示源文件被编译成目标代码的时间，格式(时:分:秒)<br>    <strong>STDC</strong> 表示编译器是否标准，标准时表示常量1，非标准则表示其它数字</p><p>宏定义可以使用在函数身上：</p><pre><code>#define INFO(msg) info_debug(__FILE__, __LINE__, __DATE__, __TIME__, msg) void info_debug(const char* filename, int line, const char* date, const char* time, const char* msg){    printf_s(&quot;info_debug %s:%d (%s-%s):%s&quot;, filename, line, date, time, msg);}int main(){    INFO(&quot;Hello world!\n&quot;);    system(&quot;pause&quot;);    return 0;}</code></pre><p>宏定义的细节<br>    1）对于有参数的宏定义，宏定义时，在宏名与带参数的括号之间不应加空格，否则将空格以后的字符都作为替代字符串的一部分。<br>    2）带参数的宏定义只是进行简单的字符替换，宏展开则是在编译前进行的，在展开时并不分配内存单元，不进行值的传递处理，因此替换不会占用运行时间，只占用编译时间。<br>    3）宏不存在类型问题，宏名无类型，宏的参数也无类型，只是一个符号代表，展开时代入指定的字符串即可，宏定义时，字符串可以是任何类型的数据。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;define宏定义&quot;&gt;&lt;a href=&quot;#define宏定义&quot; class=&quot;headerlink&quot; title=&quot;define宏定义&quot;&gt;&lt;/a&gt;define宏定义&lt;/h3&gt;&lt;p&gt;ANSI标准五个预定义的宏名&lt;br&gt;    &lt;strong&gt;LINE&lt;/strong
      
    
    </summary>
    
    
      <category term="c++" scheme="https://cnawesome.github.io/categories/c/"/>
    
    
      <category term="c++" scheme="https://cnawesome.github.io/tags/c/"/>
    
  </entry>
  
  <entry>
    <title>错误集</title>
    <link href="https://cnawesome.github.io/2020/03/23/%E9%94%99%E8%AF%AF%E9%9B%86/"/>
    <id>https://cnawesome.github.io/2020/03/23/%E9%94%99%E8%AF%AF%E9%9B%86/</id>
    <published>2020-03-23T09:51:59.000Z</published>
    <updated>2020-03-23T13:29:22.255Z</updated>
    
    <content type="html"><![CDATA[<p>ifndef 的作用<br>    当有很多头文件时，一般都需要用它<br>    它可以防止头文件被一个源文件多次包含出现冲突<br>    不是防止两个源文件包含同一个头文件</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;ifndef 的作用&lt;br&gt;    当有很多头文件时，一般都需要用它&lt;br&gt;    它可以防止头文件被一个源文件多次包含出现冲突&lt;br&gt;    不是防止两个源文件包含同一个头文件&lt;/p&gt;

      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Android学习日记1.0</title>
    <link href="https://cnawesome.github.io/2020/03/21/Android%E5%AD%A6%E4%B9%A0%E6%97%A5%E8%AE%B01-0/"/>
    <id>https://cnawesome.github.io/2020/03/21/Android%E5%AD%A6%E4%B9%A0%E6%97%A5%E8%AE%B01-0/</id>
    <published>2020-03-21T03:33:43.000Z</published>
    <updated>2020-03-21T05:32:46.244Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/2020/03/21/Android%E5%AD%A6%E4%B9%A0%E6%97%A5%E8%AE%B01-0/newPJ.jpg" alt></p><p><img src="/2020/03/21/Android%E5%AD%A6%E4%B9%A0%E6%97%A5%E8%AE%B01-0/moudle.jpg.jpg" alt></p><p><img src="/2020/03/21/Android%E5%AD%A6%E4%B9%A0%E6%97%A5%E8%AE%B01-0/%E9%A1%B9%E7%9B%AE%E5%B8%83%E5%B1%80.jpg" alt><br><img src="/2020/03/21/Android%E5%AD%A6%E4%B9%A0%E6%97%A5%E8%AE%B01-0/manifest.jpg" alt></p><p><img src="/2020/03/21/Android%E5%AD%A6%E4%B9%A0%E6%97%A5%E8%AE%B01-0/mainactivity.jpg" alt></p><p><img src="/2020/03/21/Android%E5%AD%A6%E4%B9%A0%E6%97%A5%E8%AE%B01-0/r%E6%96%87%E4%BB%B6.jpg" alt><br>android R文件出现问题可以 clear 恢复。</p><p><img src="/2020/03/21/Android%E5%AD%A6%E4%B9%A0%E6%97%A5%E8%AE%B01-0/r%E6%96%87%E4%BB%B6%E8%A7%A3%E5%86%B3.jpg" alt></p><p>res/：包含应用资源，例如可绘制对象文件、布局文件和 UI 字符串。</p><p>raw/：用于存放各种原生资源(音频，视频，一些XML文件等)，我们可以通过openRawResource(int id)来获得资源的二进制流！其实和Assets差不多，不过这里面的资源会在R文件那里生成一个资源id而已。</p><p>AVD：安卓模拟器</p><p>viewgroup是抽象类，一般使用它的子类</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;/2020/03/21/Android%E5%AD%A6%E4%B9%A0%E6%97%A5%E8%AE%B01-0/newPJ.jpg&quot; alt&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/2020/03/21/Android%E5%AD%A6%E4%B9%
      
    
    </summary>
    
    
      <category term="Android" scheme="https://cnawesome.github.io/categories/Android/"/>
    
    
      <category term="Android" scheme="https://cnawesome.github.io/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>算法设计3.0</title>
    <link href="https://cnawesome.github.io/2020/03/19/%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A13-0/"/>
    <id>https://cnawesome.github.io/2020/03/19/%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A13-0/</id>
    <published>2020-03-19T05:06:32.000Z</published>
    <updated>2020-04-02T13:31:08.399Z</updated>
    
    <content type="html"><![CDATA[<h3 id="图"><a href="#图" class="headerlink" title="图"></a>图</h3><p><img src="/2020/03/19/%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A13-0/%E5%9B%BE%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%9C%AF%E8%AF%AD.jpg" alt><br>v 顶点 ，e 边<br>|v| 顶点个数 ，|e| 边数</p><p><img src="/2020/03/19/%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A13-0/%E6%97%A0%E5%90%91%E5%9B%BE.jpg" alt><br><img src="/2020/03/19/%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A13-0/%E6%9C%89%E5%90%91%E5%9B%BE.jpg" alt><br><img src="/2020/03/19/%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A13-0/%E6%9C%89%EF%BC%8C%E6%97%A0%E5%90%91%E5%9B%BE.jpg" alt></p><p><img src="/2020/03/19/%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A13-0/%E5%9B%BE%E7%9A%84%E8%B7%AF%E5%BE%84.jpg" alt></p><p><img src="/2020/03/19/%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A13-0/%E5%9B%BE%E7%9A%84%E6%A8%A1%E6%9D%BF%E7%B1%BB.jpg" alt></p><p><img src="/2020/03/19/%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A13-0/%E9%82%BB%E6%8E%A5%E7%9F%A9%E9%98%B5%E4%B8%8E%E5%85%B3%E8%81%94%E7%9F%A9%E9%98%B5.jpg" alt></p><p><img src="/2020/03/19/%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A13-0/%E9%A1%B6%E7%82%B9%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0.jpg" alt><br><img src="/2020/03/19/%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A13-0/%E8%BE%B9%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0.jpg" alt></p><p><img src="/2020/03/19/%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A13-0/%E5%9B%BE%E9%82%BB%E6%8E%A5%E7%9F%A9%E9%98%B5%E4%BB%A3%E7%A0%81.jpg" alt></p><p><img src="/2020/03/19/%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A13-0/%E9%A1%B6%E7%82%B9%E6%93%8D%E4%BD%9C.jpg" alt><br><img src="/2020/03/19/%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A13-0/%E9%A1%B6%E7%82%B9%E6%93%8D%E4%BD%9C%E5%85%B7%E4%BD%93.jpg" alt><br><img src="/2020/03/19/%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A13-0/%E9%A1%B6%E7%82%B9%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0.jpg" alt></p><p><img src="/2020/03/19/%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A13-0/%E5%9B%BE%E9%A1%B6%E7%82%B9%E6%8F%92%E5%85%A5%E4%BB%A3%E7%A0%81.jpg" alt></p><p><img src="/2020/03/19/%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A13-0/%E5%9B%BE%E9%A1%B6%E7%82%B9%E5%88%A0%E9%99%A4%E4%BB%A3%E7%A0%81.jpg" alt><br>在图中插入一个新的节点</p><p><img src="/2020/03/19/%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A13-0/%E5%9B%BE%E8%BE%B9%E6%8F%92%E5%85%A5%E4%BB%A3%E7%A0%81.jpg" alt><br><img src="/2020/03/19/%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A13-0/%E5%9B%BE%E8%BE%B9%E5%88%A0%E9%99%A4%E4%BB%A3%E7%A0%81.jpg" alt></p><h4 id="BFS-广度优先遍历"><a href="#BFS-广度优先遍历" class="headerlink" title="BFS 广度优先遍历"></a>BFS 广度优先遍历</h4><p>把图化为树，把非线性变为半线性。<br>正如把树通过遍历化为队列，把半线性化为了线性。</p><p><img src="/2020/03/19/%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A13-0/%E5%9B%BE%E7%9A%84BFS.jpg" alt></p><p>图的广度优先遍历类似与树的层次遍历。</p><p><img src="/2020/03/19/%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A13-0/%E5%9B%BE%E7%9A%84BFS%E4%BB%A3%E7%A0%81.jpg" alt><br><img src="/2020/03/19/%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A13-0/%E5%9B%BE%E7%9A%84BFS%E4%BB%A3%E7%A0%811.jpg" alt></p><p><img src="/2020/03/19/%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A13-0/%E5%9B%BE%E7%9A%84BFS%E8%BF%87%E7%A8%8B1.jpg" alt></p><p>简单的实现，不建议模仿</p><pre><code>void BFS(Graph g,int n){// 广度优先遍历    if(g.v[n].vs==UNDISCOVER||g.v[n].vs==DISCOVER){        g.v[n].vs=VISITED;    }    for (int i = 0; i &lt;MAX ; i++) //入栈相邻节点    {           if(g.e[i][n].hasEdge == 1 &amp;&amp; g.v[i].vs==UNDISCOVER){                g.v[i].vs=VISITED;                Vquene[k++]=i;           }    }    for (int j = k+1; j &lt; MAX; j++)    {        Vquene[j]=-1;    }    if(Vquene[0]!=-1){        printf(&quot;next node number:%d\n&quot;,Vquene[0]);        int num=Vquene[0];        for (int p = 0; p &lt;MAX; p++)        {            Vquene[p]=Vquene[p+1];        }        BFS(g,num);}</code></pre><p>按BFS广度优先遍历出来的节点到节点的距离时最短路径。</p><h4 id="DFS-深度优先搜索"><a href="#DFS-深度优先搜索" class="headerlink" title="DFS 深度优先搜索"></a>DFS 深度优先搜索</h4><p><img src="/2020/03/19/%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A13-0/DFS%E4%BB%8B%E7%BB%8D.jpg" alt></p><p><img src="/2020/03/19/%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A13-0/%E5%9B%BE%E7%9A%84DFS%E4%BB%A3%E7%A0%81.jpg" alt><br><img src="/2020/03/19/%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A13-0/%E5%9B%BE%E7%9A%84DFS%E4%BB%A3%E7%A0%81%E7%BB%86%E8%8A%82.jpg" alt></p><p>分为有向图和无向图的DFS</p><p>dTime 刚访问时间  Ftime 结束访问时间</p><h4 id="嵌套引理"><a href="#嵌套引理" class="headerlink" title="嵌套引理"></a>嵌套引理</h4><p>祖先节点 与 子孙节点的依据活跃期判断： 祖先的活跃期必然大于子孙的活跃期<br>连个节点无关，活跃期不相交<br><img src="/2020/03/19/%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A13-0/%E5%9B%BE%E7%9A%84dtime.jpg" alt><br><img src="/2020/03/19/%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A13-0/%E5%9B%BE%E7%9A%84%E6%B4%BB%E8%B7%83%E6%9C%9F%E7%9A%84%E5%BA%94%E7%94%A8.jpg" alt></p><h3 id="二叉搜索树"><a href="#二叉搜索树" class="headerlink" title="二叉搜索树"></a>二叉搜索树</h3><p><img src="/2020/03/19/%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A13-0/%E8%AF%8D%E6%9D%A1.jpg" alt><br><img src="/2020/03/19/%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A13-0/BST%E9%A1%BA%E5%BA%8F%E6%80%A7.jpg" alt></p><p><img src="/2020/03/19/%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A13-0/BST%E6%8E%A5%E5%8F%A3.jpg" alt></p><p><img src="/2020/03/19/%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A13-0/BST%E6%9F%A5%E6%89%BE%E5%9B%BE.jpg" alt><br><img src="/2020/03/19/%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A13-0/BST%E6%9F%A5%E6%89%BE%E4%BB%A3%E7%A0%81.jpg" alt><br><img src="/2020/03/19/%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A13-0/BST%E6%9F%A5%E6%89%BE%E6%8E%A5%E5%8F%A3%E5%9B%BE.jpg" alt></p><p><img src="/2020/03/19/%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A13-0/BST%E7%AD%89%E4%BB%B7.jpg" alt><br><img src="/2020/03/19/%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A13-0/BST%E7%AD%89%E4%BB%B7%E5%8F%98%E6%8D%A2%E5%9B%BE1.jpg" alt></p><p><img src="/2020/03/19/%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A13-0/BST%E6%8F%92%E5%85%A5%E8%BF%87%E7%A8%8B%E5%9B%BEjpg" alt><br><img src="/2020/03/19/%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A13-0/BST%E6%8F%92%E5%85%A5%E4%BB%A3%E7%A0%81.jpg" alt></p><p><img src="/2020/03/19/%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A13-0/BST%E5%88%A0%E9%99%A4%E6%A1%86%E6%9E%B6%E4%BB%A3%E7%A0%81.jpg" alt><br><img src="/2020/03/19/%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A13-0/BST%E5%88%A0%E9%99%A41%E5%9B%BE.jpg" alt><br><img src="/2020/03/19/%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A13-0/BST%E5%88%A0%E9%99%A41%E4%BB%A3%E7%A0%81.jpg" alt><br><img src="/2020/03/19/%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A13-0/BST%E5%88%A0%E9%99%A42%E5%9B%BE.jpg" alt><br><img src="/2020/03/19/%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A13-0/BST%E5%88%A0%E9%99%A42%E4%BB%A3%E7%A0%81.jpg" alt></p><h4 id="BBST-平衡二叉树"><a href="#BBST-平衡二叉树" class="headerlink" title="BBST 平衡二叉树"></a>BBST 平衡二叉树</h4><p>适度平衡准则，任何一个树节点在BBST外，都可以变换到BBST内部。</p><p><img src="/2020/03/19/%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A13-0/BST%E7%AD%89%E4%BB%B7.jpg" alt></p><p>####AVL树</p><p><img src="/2020/03/19/%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A13-0/avl%E6%8E%A5%E5%8F%A3.jpg" alt><br><img src="/2020/03/19/%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A13-0/avl%E5%A4%B1%E8%A1%A1.jpg" alt><br><img src="/2020/03/19/%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A13-0/avl%E5%B9%B3%E8%A1%A1%E5%9B%A0%E5%AD%90.jpg" alt><br><img src="/2020/03/19/%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A13-0/avlzigzag.jpg" alt><br><img src="/2020/03/19/%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A13-0/avl%E9%80%82%E5%BA%A6%E5%B9%B3%E8%A1%A1.jpg" alt><br><img src="/2020/03/19/%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A13-0/avl%E6%8F%92%E5%85%A5%E5%8D%95%E6%97%8B.jpg" alt><br><img src="/2020/03/19/%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A13-0/avl%E6%8F%92%E5%85%A5%E5%8F%8C%E6%97%8B.jpg" alt><br><img src="/2020/03/19/%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A13-0/avl%E6%8F%92%E5%85%A5%E5%AE%9E%E7%8E%B0.jpg" alt><br><img src="/2020/03/19/%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A13-0/avl%E5%88%A0%E9%99%A4%E5%8F%8C%E6%97%8B.jpg" alt><br><img src="/2020/03/19/%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A13-0/avl%E5%88%A0%E9%99%A4%E4%BB%A3%E7%A0%81.jpg" alt><br><img src="/2020/03/19/%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A13-0/avl%E6%A0%B8%E5%BF%83ro%E4%BB%A3%E7%A0%81.jpg" alt></p><p>拥有 链表和向量的特点，并且有很好的很低复杂度。</p><p>AVL中，一个节点的删除，只可能是一个节点失衡；而一个节点的插入，可能导致多个节点失衡。</p><p>####3+4重构</p><p><img src="/2020/03/19/%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A13-0/avl3+4%E7%AE%97%E6%B3%95.jpg" alt><br><img src="/2020/03/19/%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A13-0/avl3+4%E7%AE%97%E6%B3%95%E4%BB%A3%E7%A0%81.jpg" alt></p><h4 id="高级搜索树"><a href="#高级搜索树" class="headerlink" title="高级搜索树"></a>高级搜索树</h4><p>伸张树：为了更宽松的使用avl的性质。</p><p><img src="/2020/03/19/%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A13-0/%E4%BC%B8%E5%BC%A0%E6%A0%91%E8%87%AA%E9%80%82%E5%BA%94%E8%B0%83%E6%95%B4%E6%80%9D%E8%B7%AF.jpg" alt><br><img src="/2020/03/19/%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A13-0/%E4%BC%B8%E5%BC%A0%E6%A0%91%E5%B1%80%E9%83%A8%E6%80%A7.jpg" alt><br><img src="/2020/03/19/%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A13-0/%E4%BC%B8%E5%BC%A0%E6%A0%91%E6%9C%80%E5%9D%8F%E6%83%85%E5%86%B5.jpg" alt><br><img src="/2020/03/19/%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A13-0/%E4%BC%B8%E5%BC%A0%E6%A0%91%E5%8F%8C%E5%B1%82%E4%BC%B8%E5%BC%A0.jpg" alt><br><img src="/2020/03/19/%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A13-0/%E4%BC%B8%E5%BC%A0%E6%A0%91%E5%8F%8C%E5%B1%82%E4%BC%B8%E5%BC%A01.jpg" alt><br><img src="/2020/03/19/%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A13-0/%E4%BC%B8%E5%BC%A0%E6%A0%91%E5%8F%8C%E5%B1%82%E4%BC%B8%E5%BC%A02.jpg" alt><br><img src="/2020/03/19/%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A13-0/%E4%BC%B8%E5%BC%A0%E6%A0%91%E5%8F%8C%E5%B1%82%E4%BC%B8%E5%BC%A03.jpg" alt></p><p>伸张树自适应调整策略并非最佳策略</p><h4 id="B-TREE（高级搜索树）"><a href="#B-TREE（高级搜索树）" class="headerlink" title="B-TREE（高级搜索树）"></a>B-TREE（高级搜索树）</h4><p>原因：数据越来越多，让内存看起来越来越小</p><p>又称平衡多路搜索树</p><p><img src="/2020/03/19/%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A13-0/b%E6%A0%91%E5%A4%9A%E8%B7%AF%E5%B9%B3%E8%A1%A1.jpg" alt><br><img src="/2020/03/19/%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A13-0/b%E6%A0%91%E8%8A%82%E7%82%B9.jpg" alt><br><img src="/2020/03/19/%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A13-0/b%E6%A0%91%E9%98%B6%E6%95%B0.jpg" alt><br><img src="/2020/03/19/%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A13-0/b%E6%A0%91%E6%9F%A5%E8%AF%A2%E6%95%88%E6%9E%9C.jpg" alt><br><img src="/2020/03/19/%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A13-0/b%E6%A0%91%E7%B4%A7%E5%87%91%E8%A1%A8%E7%A4%BA.jpg" alt><br><img src="/2020/03/19/%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A13-0/b%E6%A0%91%E6%9F%A5%E6%89%BE%E7%AE%97%E6%B3%95.jpg" alt><br><img src="/2020/03/19/%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A13-0/b%E6%A0%91%E6%9C%80%E5%B0%8F%E6%A0%91%E9%AB%98.jpg" alt><br><img src="/2020/03/19/%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A13-0/b%E6%A0%91%E6%9C%80%E5%A4%A7%E6%A0%91%E9%AB%98.jpg" alt><br><img src="/2020/03/19/%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A13-0/b%E6%A0%91%E6%9F%A5%E6%89%BE%E7%AE%97%E6%B3%95.jpg" alt><br><img src="/2020/03/19/%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A13-0/b%E6%A0%91.jpg" alt><br>利用向量来表示<br><img src="/2020/03/19/%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A13-0/b%E6%A0%91tree%E4%BB%A3%E7%A0%81.jpg" alt><br><img src="/2020/03/19/%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A13-0/b%E6%A0%91%E6%9F%A5%E6%89%BE%E7%AE%97%E6%B3%95%E4%BB%A3%E7%A0%81jpg" alt><br><img src="/2020/03/19/%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A13-0/b%E6%A0%91%E6%9F%A5%E6%89%BE%E5%A4%B1%E8%B4%A5.jpg" alt><br>b树的查找失败，必然是在外部的叶子节点。</p><p><img src="/2020/03/19/%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A13-0/b%E6%A0%91%E5%88%A0%E9%99%A4%E7%AE%97%E6%B3%95%E4%BB%A3%E7%A0%81.jpg" alt><br><img src="/2020/03/19/%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A13-0/b%E6%A0%91%E5%88%86%E8%A3%82.jpg" alt><br><img src="/2020/03/19/%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A13-0/b%E6%A0%91%E4%B8%8B%E6%BA%A2%E6%97%8B%E8%BD%AC.jpg" alt><br><img src="/2020/03/19/%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A13-0/b%E6%A0%91%E4%B8%8B%E6%BA%A2%E5%90%88%E5%B9%B6.jpg" alt></p><h4 id="红黑树（高级搜索树）"><a href="#红黑树（高级搜索树）" class="headerlink" title="红黑树（高级搜索树）"></a>红黑树（高级搜索树）</h4><p><img src="/2020/03/19/%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A13-0/%E7%BA%A2%E9%BB%91%E6%A0%91%E4%B8%80%E8%87%B4%E6%80%A7%E7%BB%93%E6%9E%84.jpg" alt><br><img src="/2020/03/19/%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A13-0/%E7%BA%A2%E9%BB%91%E6%A0%91%E5%85%B3%E8%81%94%E6%80%A7.jpg" alt></p><p>目的：为了使各个版本的BST能更快的访问，更小的空间。</p><p><img src="/2020/03/19/%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A13-0/%E7%BA%A2%E9%BB%91%E6%A0%91%E5%85%B3%E8%81%94%E6%80%A7.jpg" alt><br><img src="/2020/03/19/%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A13-0/%E7%BA%A2%E9%BB%91%E6%A0%91%E7%BA%A2%E4%B8%8E%E9%BB%91.jpg" alt><br><img src="/2020/03/19/%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A13-0/%E7%BA%A2%E9%BB%91%E6%A0%91%E5%90%91%E4%B8%8A%E6%8F%90%E5%8D%87.jpg" alt><br><img src="/2020/03/19/%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A13-0/%E7%BA%A2%E9%BB%91%E6%A0%91%E5%90%91%E4%B8%8A%E6%8F%90%E5%8D%871.jpg" alt><br>红色节点向上提升与黑节点平齐。<br><img src="/2020/03/19/%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A13-0/%E7%BA%A2%E9%BB%91%E6%A0%9124%E6%A0%91.jpg" alt><br><img src="/2020/03/19/%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A13-0/%E7%BA%A2%E9%BB%91%E6%A0%91%E6%8E%A5%E5%8F%A3%E5%AE%9A%E4%B9%89.jpg" alt></p><p>红黑树的变化要依赖于b树的结构</p><p><img src="/2020/03/19/%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A13-0/%E7%BA%A2%E9%BB%91%E6%A0%91%E6%8F%92%E5%85%A51.jpg" alt><br><img src="/2020/03/19/%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A13-0/%E7%BA%A2%E9%BB%91%E6%A0%91%E6%8F%92%E5%85%A52.jpg" alt><br><img src="/2020/03/19/%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A13-0/%E7%BA%A2%E9%BB%91%E6%A0%91%E6%8F%92%E5%85%A52%E5%8F%8C%E7%BA%A2%E7%BC%BA%E9%99%B7.jpg" alt><br><img src="/2020/03/19/%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A13-0/%E7%BA%A2%E9%BB%91%E6%A0%91%E6%8F%92%E5%85%A53%E5%9F%BA%E6%9C%AC%E6%A1%86%E6%9E%B6%E4%BB%A3%E7%A0%81.jpg" alt><br><img src="/2020/03/19/%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A13-0/%E7%BA%A2%E9%BB%91%E6%A0%91%E6%8F%92%E5%85%A54%E5%8F%8C%E7%BA%A2%E7%BC%BA%E9%99%B7%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%881.jpg" alt><br><img src="/2020/03/19/%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A13-0/%E7%BA%A2%E9%BB%91%E6%A0%91%E6%8F%92%E5%85%A54%E5%8F%8C%E7%BA%A2%E7%BC%BA%E9%99%B7%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%881.jpg" alt><br><img src="/2020/03/19/%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A13-0/%E7%BA%A2%E9%BB%91%E6%A0%91%E6%8F%92%E5%85%A55%E5%8F%8C%E7%BA%A2%E7%BC%BA%E9%99%B7%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%881.jpg" alt><br><img src="/2020/03/19/%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A13-0/%E7%BA%A2%E9%BB%91%E6%A0%91%E6%8F%92%E5%85%A56%E5%8F%8C%E7%BA%A2%E7%BC%BA%E9%99%B7%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%882.jpg" alt><br><img src="/2020/03/19/%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A13-0/%E7%BA%A2%E9%BB%91%E6%A0%91%E6%8F%92%E5%85%A57%E5%8F%8C%E7%BA%A2%E4%BF%AE%E6%AD%A3%E6%B5%81%E7%A8%8B%E5%9B%BE.jpg" alt></p><p><img src="/2020/03/19/%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A13-0/%E7%BA%A2%E9%BB%91%E6%A0%91%E5%88%A0%E9%99%A41.jpg" alt><br><img src="/2020/03/19/%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A13-0/%E7%BA%A2%E9%BB%91%E6%A0%91%E5%88%A0%E9%99%A42.jpg" alt><br><img src="/2020/03/19/%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A13-0/%E7%BA%A2%E9%BB%91%E6%A0%91%E5%88%A0%E9%99%A42%E5%8F%8C%E9%BB%91%E7%BC%BA%E9%99%B7.jpg" alt><br><img src="/2020/03/19/%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A13-0/%E7%BA%A2%E9%BB%91%E6%A0%91%E5%88%A0%E9%99%A42%E5%8F%8C%E9%BB%91%E7%BC%BA%E9%99%B71.jpg" alt><br><img src="/2020/03/19/%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A13-0/%E7%BA%A2%E9%BB%91%E6%A0%91%E5%88%A0%E9%99%A42%E5%8F%8C%E9%BB%91%E7%BC%BA%E9%99%B72.jpg" alt><br><img src="/2020/03/19/%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A13-0/%E7%BA%A2%E9%BB%91%E6%A0%91%E5%88%A0%E9%99%A42%E5%8F%8C%E9%BB%91%E7%BC%BA%E9%99%B73.jpg" alt><br><img src="/2020/03/19/%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A13-0/%E7%BA%A2%E9%BB%91%E6%A0%91%E5%88%A0%E9%99%A43%E5%8F%8C%E9%BB%91%E7%BC%BA%E9%99%B71.jpg" alt><br><img src="/2020/03/19/%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A13-0/%E7%BA%A2%E9%BB%91%E6%A0%91%E5%88%A0%E9%99%A43%E5%8F%8C%E9%BB%91%E7%BC%BA%E9%99%B72.jpg" alt><br><img src="/2020/03/19/%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A13-0/%E7%BA%A2%E9%BB%91%E6%A0%91%E5%88%A0%E9%99%A44%E5%8F%8C%E9%BB%91%E7%BC%BA%E9%99%B71.jpg" alt></p><h3 id="end-at-2019-4-2"><a href="#end-at-2019-4-2" class="headerlink" title="end at 2019.4.2"></a>end at 2019.4.2</h3>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;图&quot;&gt;&lt;a href=&quot;#图&quot; class=&quot;headerlink&quot; title=&quot;图&quot;&gt;&lt;/a&gt;图&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;/2020/03/19/%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A13-0/%E5%9B%BE%E7
      
    
    </summary>
    
    
      <category term="算法" scheme="https://cnawesome.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="算法" scheme="https://cnawesome.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>vscode配置编译环境</title>
    <link href="https://cnawesome.github.io/2020/03/18/vscode%E9%85%8D%E7%BD%AE%E7%BC%96%E8%AF%91%E7%8E%AF%E5%A2%83/"/>
    <id>https://cnawesome.github.io/2020/03/18/vscode%E9%85%8D%E7%BD%AE%E7%BC%96%E8%AF%91%E7%8E%AF%E5%A2%83/</id>
    <published>2020-03-18T09:05:53.000Z</published>
    <updated>2020-03-18T09:05:53.351Z</updated>
    
    <content type="html"><![CDATA[<hr>]]></content>
    
    <summary type="html">
    
      
      
        &lt;hr&gt;

      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>电路分析</title>
    <link href="https://cnawesome.github.io/2020/03/14/%E7%94%B5%E8%B7%AF%E5%88%86%E6%9E%90/"/>
    <id>https://cnawesome.github.io/2020/03/14/%E7%94%B5%E8%B7%AF%E5%88%86%E6%9E%90/</id>
    <published>2020-03-14T03:18:32.000Z</published>
    <updated>2020-04-20T13:37:49.910Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/2020/03/14/%E7%94%B5%E8%B7%AF%E5%88%86%E6%9E%90/%E4%BD%95%E4%B8%BA%E7%94%B5%E8%B7%AF.jpg" alt><br><img src="/2020/03/14/%E7%94%B5%E8%B7%AF%E5%88%86%E6%9E%90/%E7%90%86%E6%83%B3%E5%85%83%E4%BB%B6.jpg" alt></p><p>一个电路可能有不同的电路模型<br><img src="/2020/03/14/%E7%94%B5%E8%B7%AF%E5%88%86%E6%9E%90/%E4%B8%8D%E5%90%8C%E7%94%B5%E8%B7%AF%E7%B1%BB%E5%9E%8B%E4%B8%8D%E5%90%8C%E7%94%B5%E8%B7%AF.jpg" alt></p><p><img src="/2020/03/14/%E7%94%B5%E8%B7%AF%E5%88%86%E6%9E%90/%E5%8F%82%E6%95%B0%E7%94%B5%E8%B7%AF.jpg" alt><br>主要研究集总参数电路。</p><p><img src="/2020/03/14/%E7%94%B5%E8%B7%AF%E5%88%86%E6%9E%90/%E6%B3%A2%E6%AE%B5.jpg" alt></p><p><img src="/2020/03/14/%E7%94%B5%E8%B7%AF%E5%88%86%E6%9E%90/%E7%94%B5%E6%B5%81%E7%9A%84%E5%BD%A2%E6%88%90.jpg" alt></p><p><img src="/2020/03/14/%E7%94%B5%E8%B7%AF%E5%88%86%E6%9E%90/%E7%94%B5%E8%B7%AF%E4%B8%AD%E7%9A%84%E7%94%B5%E7%A3%81%E8%83%BD%E9%87%8F.jpg" alt></p><h4 id="电路分类："><a href="#电路分类：" class="headerlink" title="电路分类："></a>电路分类：</h4><p><img src="/2020/03/14/%E7%94%B5%E8%B7%AF%E5%88%86%E6%9E%90/%E5%8A%A8%E6%80%81%E7%94%B5%E9%98%BB.jpg" alt><br><img src="/2020/03/14/%E7%94%B5%E8%B7%AF%E5%88%86%E6%9E%90/%E6%9C%89%E6%BA%90%E6%97%A0%E6%BA%90.jpg" alt><br><img src="/2020/03/14/%E7%94%B5%E8%B7%AF%E5%88%86%E6%9E%90/%E6%97%B6%E5%8F%98%E6%97%B6%E4%B8%8D%E5%8F%98%E7%94%B5%E8%B7%AF.jpg" alt><br><img src="/2020/03/14/%E7%94%B5%E8%B7%AF%E5%88%86%E6%9E%90/%E7%BA%BF%E6%80%A7%E4%B8%8E%E9%9D%9E%E7%BA%BF%E6%80%A7%E7%94%B5%E8%B7%AF.jpg" alt></p><h4 id="电路变量"><a href="#电路变量" class="headerlink" title="电路变量"></a>电路变量</h4><p>为了定量描述电路性能，引入电路变量.<br>分为基本变量和复合变量<br><img src="/2020/03/14/%E7%94%B5%E8%B7%AF%E5%88%86%E6%9E%90/%E7%94%B5%E5%8E%8B%E7%9A%84%E5%AE%9A%E4%B9%89.jpg" alt></p><p><img src="/2020/03/14/%E7%94%B5%E8%B7%AF%E5%88%86%E6%9E%90/%E7%94%B5%E6%B5%81%E7%9A%84%E5%BD%A2%E6%88%90.jpg" alt><br><img src="/2020/03/14/%E7%94%B5%E8%B7%AF%E5%88%86%E6%9E%90/%E7%94%B5%E6%B5%81%E7%9A%84%E6%96%B9%E5%90%91.jpg" alt><br><img src="/2020/03/14/%E7%94%B5%E8%B7%AF%E5%88%86%E6%9E%90/%E7%94%B5%E6%B5%81%E7%9A%84%E5%A4%A7%E5%B0%8F.jpg" alt></p><p>基本变量如：电流，电压等。<br>复合变量如：功率，能量等。</p><p><img src="/2020/03/14/%E7%94%B5%E8%B7%AF%E5%88%86%E6%9E%90/%E5%85%B3%E8%81%94%E5%8F%82%E8%80%83%E6%96%B9%E5%90%91.jpg" alt></p><p>电路的实际方向不好确定，使用参考方向，参考方向可以任意指定。</p><p><img src="/2020/03/14/%E7%94%B5%E8%B7%AF%E5%88%86%E6%9E%90/%E5%8A%9F%E7%8E%87%E7%9A%84%E5%AE%9A%E4%B9%89.jpg" alt><br><img src="/2020/03/14/%E7%94%B5%E8%B7%AF%E5%88%86%E6%9E%90/%E5%8A%9F%E7%8E%87%E7%9A%84%E8%AE%A1%E7%AE%97.jpg" alt><br><img src="/2020/03/14/%E7%94%B5%E8%B7%AF%E5%88%86%E6%9E%90/%E8%83%BD%E9%87%8F%E8%AE%A1%E7%AE%97.jpg" alt><br>阻值和功率是电阻的属性。<br>超过电阻的额定功率会导致电阻损坏。</p><p><img src="/2020/03/14/%E7%94%B5%E8%B7%AF%E5%88%86%E6%9E%90/%E7%94%B5%E8%B7%AF%E5%90%B8%E6%94%B6%E4%B8%8E%E5%8F%91%E5%87%BA.jpg" alt><br><img src="/2020/03/14/%E7%94%B5%E8%B7%AF%E5%88%86%E6%9E%90/%E7%94%B5%E8%B7%AF%E7%94%B5%E9%98%BB%E5%90%B8%E6%94%B6%E4%B8%8E%E5%8F%91%E5%87%BA.jpg" alt><br>电阻不论是关联和非关联，都是吸收功率。</p><p><img src="/2020/03/14/%E7%94%B5%E8%B7%AF%E5%88%86%E6%9E%90/%E5%8F%97%E6%8E%A7%E6%BA%90%E6%98%AF%E5%90%A6%E4%B8%BA%E4%BA%8C%E7%AB%AF.jpg" alt></p><p><img src="/2020/03/14/%E7%94%B5%E8%B7%AF%E5%88%86%E6%9E%90/%E5%9F%BA%E5%B0%94%E9%9C%8D%E5%A4%AB%E6%9C%AF%E8%AF%AD.jpg" alt><br><img src="/2020/03/14/%E7%94%B5%E8%B7%AF%E5%88%86%E6%9E%90/%E5%9F%BA%E5%B0%94%E9%9C%8D%E5%A4%AB%E5%AE%9A%E5%BE%8B.jpg" alt></p><p><img src="/2020/03/14/%E7%94%B5%E8%B7%AF%E5%88%86%E6%9E%90/kvl.jpg" alt><br><img src="/2020/03/14/%E7%94%B5%E8%B7%AF%E5%88%86%E6%9E%90/%E5%B9%BF%E4%B9%89kvl.jpg" alt><br><img src="/2020/03/14/%E7%94%B5%E8%B7%AF%E5%88%86%E6%9E%90/%E5%B9%BF%E4%B9%89kcl.jpg" alt></p><p>###电阻等效变换</p><h4 id="2b法"><a href="#2b法" class="headerlink" title="2b法"></a>2b法</h4><p>列出所有原件方程，kcl方程，kvl方程<br><img src="/2020/03/14/%E7%94%B5%E8%B7%AF%E5%88%86%E6%9E%90/2b%E6%B3%95.jpg" alt><br><img src="/2020/03/14/%E7%94%B5%E8%B7%AF%E5%88%86%E6%9E%90/%E7%94%B5%E8%B7%AF%E7%94%B5%E9%98%BB%E5%90%B8%E6%94%B6%E4%B8%8E%E5%8F%91%E5%87%BA.jpg" alt></p><h3 id="电路的等效变换"><a href="#电路的等效变换" class="headerlink" title="电路的等效变换"></a>电路的等效变换</h3><p><img src="/2020/03/14/%E7%94%B5%E8%B7%AF%E5%88%86%E6%9E%90/%E7%AD%89%E6%95%88%E5%8F%98%E6%8D%A2.jpg" alt><br>0值电压源等效于0值电阻等效于短路</p><p><img src="/2020/03/14/%E7%94%B5%E8%B7%AF%E5%88%86%E6%9E%90/%E4%B8%B2%E5%B9%B6%E8%81%94.jpg" alt><br><img src="/2020/03/14/%E7%94%B5%E8%B7%AF%E5%88%86%E6%9E%90/%E7%94%B5%E9%98%BB%E5%85%83%E4%BB%B6%E4%B8%B2%E8%81%94.jpg" alt></p><p><img src="/2020/03/14/%E7%94%B5%E8%B7%AF%E5%88%86%E6%9E%90/%E7%94%B5%E9%98%BB%E5%85%83%E4%BB%B6%E5%B9%B6%E8%81%94.jpg" alt></p><pre><code>---2020/4/10</code></pre><h4 id="y型电路和三角形电路"><a href="#y型电路和三角形电路" class="headerlink" title="y型电路和三角形电路"></a>y型电路和三角形电路</h4><p><img src="/2020/03/14/%E7%94%B5%E8%B7%AF%E5%88%86%E6%9E%90/y%E5%9E%8B%E5%92%8C%E4%B8%89%E8%A7%92%E5%BD%A2%E7%94%B5%E8%B7%AF.jpg" alt><br><img src="/2020/03/14/%E7%94%B5%E8%B7%AF%E5%88%86%E6%9E%90/y%E5%9E%8B%E5%92%8C%E4%B8%89%E8%A7%92%E5%BD%A2%E7%94%B5%E8%B7%AF%E7%AD%89%E6%95%88%E6%8E%A8%E5%AF%BC.jpg" alt><br><img src="/2020/03/14/%E7%94%B5%E8%B7%AF%E5%88%86%E6%9E%90/y%E5%9E%8B%E5%92%8C%E4%B8%89%E8%A7%92%E5%BD%A2%E7%94%B5%E8%B7%AF%E7%AD%89%E6%95%88%E6%8E%A8%E5%AF%BC2.jpg" alt><br><img src="/2020/03/14/%E7%94%B5%E8%B7%AF%E5%88%86%E6%9E%90/y%E5%9E%8B%E5%92%8C%E4%B8%89%E8%A7%92%E5%BD%A2%E7%94%B5%E8%B7%AF%E7%9A%84%E5%8F%98%E6%8D%A2.jpg" alt></p><h3 id="电压等效变换"><a href="#电压等效变换" class="headerlink" title="电压等效变换"></a>电压等效变换</h3><p><img src="/2020/03/14/%E7%94%B5%E8%B7%AF%E5%88%86%E6%9E%90/%E7%90%86%E6%83%B3%E7%8B%AC%E7%AB%8B%E6%BA%90%E7%9A%84%E4%B8%B2%E8%81%94.jpg" alt><br><img src="/2020/03/14/%E7%94%B5%E8%B7%AF%E5%88%86%E6%9E%90/%E7%90%86%E6%83%B3%E7%8B%AC%E7%AB%8B%E6%BA%90%E7%9A%84%E5%B9%B6%E8%81%94.jpg" alt><br><img src="/2020/03/14/%E7%94%B5%E8%B7%AF%E5%88%86%E6%9E%90/%E5%AE%9E%E9%99%85%E7%8B%AC%E7%AB%8B%E6%BA%90%E7%9A%84%E7%AD%89%E6%95%88%E8%A1%A8%E6%8D%A2.jpg" alt><br><img src="/2020/03/14/%E7%94%B5%E8%B7%AF%E5%88%86%E6%9E%90/%E5%AE%9E%E9%99%85%E7%8B%AC%E7%AB%8B%E6%BA%90%E7%9A%84%E7%AD%89%E6%95%88%E5%8F%98%E6%8D%A22.jpg" alt><br><img src="/2020/03/14/%E7%94%B5%E8%B7%AF%E5%88%86%E6%9E%90/%E5%AE%9E%E9%99%85%E7%8B%AC%E7%AB%8B%E6%BA%90%E7%9A%84%E7%AD%89%E6%95%88%E5%8F%98%E6%8D%A23.jpg" alt></p><p>求和电路源串联的电压源的电流时，电压源的电流看作0.</p><h4 id="运算放大器"><a href="#运算放大器" class="headerlink" title="运算放大器"></a>运算放大器</h4><p><img src="/2020/03/14/%E7%94%B5%E8%B7%AF%E5%88%86%E6%9E%90/%E8%BF%90%E7%AE%97%E6%94%BE%E5%A4%A7%E5%99%A8%E7%89%B9%E6%80%A7.jpg" alt><br><img src="/2020/03/14/%E7%94%B5%E8%B7%AF%E5%88%86%E6%9E%90/%E8%BF%90%E7%AE%97%E6%94%BE%E5%A4%A7%E5%99%A8%E8%B4%9F%E5%8F%8D%E9%A6%88.jpg" alt></p><p>在特定的情况下，只能用加压求流，或加流求压。</p><pre><code>----2020/4/14</code></pre><h4 id="二端口"><a href="#二端口" class="headerlink" title="二端口"></a>二端口</h4><p><img src="/2020/03/14/%E7%94%B5%E8%B7%AF%E5%88%86%E6%9E%90/%E4%BA%8C%E7%AB%AF%E5%8F%A3.jpg" alt><br><img src="/2020/03/14/%E7%94%B5%E8%B7%AF%E5%88%86%E6%9E%90/%E4%BA%92%E6%98%93%E4%BA%8C%E7%AB%AF%E5%8F%A3.jpg" alt><br><img src="/2020/03/14/%E7%94%B5%E8%B7%AF%E5%88%86%E6%9E%90/%E5%AF%B9%E7%A7%B0%E4%BA%8C%E7%AB%AF%E5%8F%A3.jpg" alt></p><pre><code>----2020/4/20</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;/2020/03/14/%E7%94%B5%E8%B7%AF%E5%88%86%E6%9E%90/%E4%BD%95%E4%B8%BA%E7%94%B5%E8%B7%AF.jpg&quot; alt&gt;&lt;br&gt;&lt;img src=&quot;/2020/03/14/%E7%94
      
    
    </summary>
    
    
      <category term="程序人生" scheme="https://cnawesome.github.io/categories/%E7%A8%8B%E5%BA%8F%E4%BA%BA%E7%94%9F/"/>
    
    
      <category term="程序人生" scheme="https://cnawesome.github.io/tags/%E7%A8%8B%E5%BA%8F%E4%BA%BA%E7%94%9F/"/>
    
  </entry>
  
</feed>
