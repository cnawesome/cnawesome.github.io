<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Life &amp;&amp; Study</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://cnawesome.github.io/"/>
  <updated>2020-06-10T08:54:10.421Z</updated>
  <id>https://cnawesome.github.io/</id>
  
  <author>
    <name>alei</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>机器学习2.0</title>
    <link href="https://cnawesome.github.io/2020/06/08/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A02-0/"/>
    <id>https://cnawesome.github.io/2020/06/08/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A02-0/</id>
    <published>2020-06-08T04:26:18.000Z</published>
    <updated>2020-06-10T08:54:10.421Z</updated>
    
    <content type="html"><![CDATA[<hr><p>对数据做标签，即定义处理数据后的正确结果</p><p>监督学习：<br>根据当前步骤给出下一步操作</p><p>强化学习：<br>通过自己与自己训练，不需要标注</p><p>使用何种函数，即使用什么模型model</p><p>loss function ：损耗函数。输入是一个函数，输出是一个判断好不好的数，标量</p><p>根据损耗函数，挑选最好的函数。</p><p>梯度下降</p><p><img src="/2020/06/08/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A02-0/%E8%BF%87%E6%8B%9F%E5%90%88.jpg" alt></p><p>处理过拟合情况：正则化<br><img src="/2020/06/08/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A02-0/%E6%AD%A3%E5%88%99%E5%8C%96.jpg" alt><br><img src="/2020/06/08/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A02-0/%E6%AD%A3%E5%88%99%E5%8C%962.jpg" alt></p><p>偏差与方差</p><p>偏差表示样本点与测试值的差距，方差表示样本与方差的差距</p><p>一般，简单的model函数，偏差大，方差小，这种情况model underfitting；复杂的model偏差小，方差大，这种情况model overfitting</p><p>梯度下降：</p><p>1.调整学习率</p><p>学习率不能太大，也不能太小，太大会始终到不了</p><p>自动调整学习率。因为正常情况下学习率在梯度下降过程中是会越来越小的，所以自动调整实现成为可能。</p><p>使用梯度下降法，梯度不一定会下降。</p><p>梯度下降推导：</p><p>随机选取一个点，在这个点的周围画一个圆圈范围。<br>在该点的圆圈中找出一个最小值。</p><p><img src="/2020/06/08/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A02-0/%E6%A2%AF%E5%BA%A6%E4%B8%8B%E9%99%8D%E8%AF%81%E6%98%8E.jpg" alt><br><img src="/2020/06/08/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A02-0/%E6%A2%AF%E5%BA%A6%E4%B8%8B%E9%99%8D%E8%AF%81%E6%98%8E3.jpg" alt><br>如何找最小值？使用泰勒展开<br>泰勒展开：任意一个点的函数可以使用邻近的点近似表示<br>将损耗函数使用该点的泰勒展开表示。<br><img src="/2020/06/08/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A02-0/%E6%A2%AF%E5%BA%A6%E4%B8%8B%E9%99%8D%E8%AF%81%E6%98%8E4.jpg" alt><br>只需要确定后面u，v什么时候最小</p><p><img src="/2020/06/08/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A02-0/%E6%A2%AF%E5%BA%A6%E4%B8%8B%E9%99%8D%E8%AF%81%E6%98%8E5.jpg" alt><br><img src="/2020/06/08/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A02-0/%E6%A2%AF%E5%BA%A6%E4%B8%8B%E9%99%8D%E8%AF%81%E6%98%8E2.jpg" alt><br>当该点为周围最小值，停止下降<br>这样算出来的loss function 局部最小</p><p>但未必是全局最小</p><p><img src="/2020/06/08/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A02-0/%E6%A2%AF%E5%BA%A6%E4%B8%8B%E9%99%8D%E8%AF%81%E6%98%8E.jpg" alt><br><img src="/2020/06/08/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A02-0/%E6%A2%AF%E5%BA%A6%E4%B8%8B%E9%99%8D%E8%AF%81%E6%98%8E.jpg" alt></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;hr&gt;
&lt;p&gt;对数据做标签，即定义处理数据后的正确结果&lt;/p&gt;
&lt;p&gt;监督学习：&lt;br&gt;根据当前步骤给出下一步操作&lt;/p&gt;
&lt;p&gt;强化学习：&lt;br&gt;通过自己与自己训练，不需要标注&lt;/p&gt;
&lt;p&gt;使用何种函数，即使用什么模型model&lt;/p&gt;
&lt;p&gt;loss function ：
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>差分私人生成对抗网络</title>
    <link href="https://cnawesome.github.io/2020/05/30/%E5%B7%AE%E5%88%86%E7%A7%81%E4%BA%BA%E7%94%9F%E6%88%90%E5%AF%B9%E6%8A%97%E7%BD%91%E7%BB%9C/"/>
    <id>https://cnawesome.github.io/2020/05/30/%E5%B7%AE%E5%88%86%E7%A7%81%E4%BA%BA%E7%94%9F%E6%88%90%E5%AF%B9%E6%8A%97%E7%BD%91%E7%BB%9C/</id>
    <published>2020-05-30T03:18:42.000Z</published>
    <updated>2020-06-07T22:47:09.850Z</updated>
    
    <content type="html"><![CDATA[<p>Differentially Private Generative Adversarial Network</p><p>生成对抗网络（GAN）：Generative Adversarial Network</p><h3 id="前情提要-GAN"><a href="#前情提要-GAN" class="headerlink" title="前情提要 GAN"></a>前情提要 GAN</h3><p>问题：图像的比较怎么比？图像在计算机中不都是二进制，怎么判断图片的好坏</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Differentially Private Generative Adversarial Network&lt;/p&gt;
&lt;p&gt;生成对抗网络（GAN）：Generative Adversarial Network&lt;/p&gt;
&lt;h3 id=&quot;前情提要-GAN&quot;&gt;&lt;a href=&quot;#前
      
    
    </summary>
    
    
      <category term="深度学习" scheme="https://cnawesome.github.io/categories/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="深度学习" scheme="https://cnawesome.github.io/tags/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>机器学习1.0</title>
    <link href="https://cnawesome.github.io/2020/05/25/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A01-0/"/>
    <id>https://cnawesome.github.io/2020/05/25/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A01-0/</id>
    <published>2020-05-25T06:21:54.000Z</published>
    <updated>2020-06-07T11:53:59.614Z</updated>
    
    <content type="html"><![CDATA[<p>机器学习所解决的问题：<br>机器学习是基于数据来解决问题的，算法是基于算法的标准来解决问题。</p><p> 机器学习的流程如下：</p><p>数据准备 -&gt; 建模 -&gt; 训练 -&gt; 评估 -&gt; 应用<br>在实际应用时，由于训练的过程可能时间比较长，所以我们会分两个阶段进行：<br>1、学习阶段：数据准备 -&gt; 建模 -&gt; 训练 -&gt; 评估 -&gt; 保存模型<br>2、消费阶段：读取模型 -&gt; 应用</p><p>机器学习包含深度学习</p><p><img src="/2020/05/25/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A01-0/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%9F%A5%E8%AF%86%E6%A1%86%E6%9E%B6.jpg" alt></p><p>数据挖掘与机器学习的关系：<br>    机器学习是数据挖掘的一个重要工具</p><h4 id="机器学习内容："><a href="#机器学习内容：" class="headerlink" title="机器学习内容："></a>机器学习内容：</h4><p><img src="/2020/05/25/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A01-0/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5.jpg" alt></p><p>训练带有标签的训练集是 监督学习<br>训练无标签的训练集 无监督学习</p><p><img src="/2020/05/25/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A01-0/%E5%8D%8A%E7%9B%91%E7%9D%A3%E5%AD%A6%E4%B9%A0.jpg" alt></p><p><img src="/2020/05/25/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A01-0/%E7%BA%BF%E6%80%A7%E5%9B%9E%E5%BD%92.jpg" alt></p><p><img src="/2020/05/25/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A01-0/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5.jpg" alt></p><pre><code>分类 聚类</code></pre><p><img src="/2020/05/25/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A01-0/%E5%9B%9E%E5%BD%92%E5%88%86%E7%B1%BB%E8%81%9A%E7%B1%BB.jpg" alt></p><h4 id="回归分析"><a href="#回归分析" class="headerlink" title="回归分析"></a>回归分析</h4><p>如何确定几个回归线哪个是最合适的？<br>使用代价函数（又称损失函数）</p><p><img src="/2020/05/25/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A01-0/%E4%BB%A3%E4%BB%B7%E5%87%BD%E6%95%B0.jpg" alt></p><p>通过代价函数的参数调整来找到代价函数的最小值</p><p><img src="/2020/05/25/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A01-0/%E4%BB%A3%E4%BB%B7%E5%87%BD%E6%95%B02.jpg" alt><br><img src="/2020/05/25/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A01-0/%E7%9B%B8%E5%85%B3%E7%B3%BB%E6%95%B0.jpg" alt><br><img src="/2020/05/25/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A01-0/%E5%86%B3%E5%AE%9A%E7%B3%BB%E6%95%B0.jpg" alt></p><h5 id="一元线性回归"><a href="#一元线性回归" class="headerlink" title="一元线性回归"></a>一元线性回归</h5><p><img src="/2020/05/25/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A01-0/%E4%B8%80%E5%85%83%E7%BA%BF%E6%80%A7%E5%9B%9E%E5%BD%92.jpg" alt><br><img src="/2020/05/25/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A01-0/%E4%B8%80%E5%85%83%E7%BA%BF%E6%80%A7%E5%9B%9E%E5%BD%922.jpg" alt><br><img src="/2020/05/25/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A01-0/%E6%9C%80%E5%B0%8F%E4%BA%8C%E4%B9%98%E6%B3%95%E4%BB%A3%E7%A0%81.jpg" alt><br><img src="/2020/05/25/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A01-0/%E6%A2%AF%E5%BA%A6%E4%B8%8B%E9%99%8D%E4%BB%A3%E7%A0%81.jpg" alt><br>在梯度下降的过程是否可以使用广度优先，或深度优先</p><h5 id="多元线性回归"><a href="#多元线性回归" class="headerlink" title="多元线性回归"></a>多元线性回归</h5><p><img src="/2020/05/25/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A01-0/%E5%A4%9A%E5%85%83%E7%BA%BF%E6%80%A7%E5%9B%9E%E5%BD%92.jpg" alt><br><img src="/2020/05/25/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A01-0/%E5%A4%9A%E5%85%83%E7%BA%BF%E6%80%A7%E5%9B%9E%E5%BD%922.jpg" alt><br><img src="/2020/05/25/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A01-0/%E5%A4%9A%E5%85%83%E7%BA%BF%E6%80%A7%E5%9B%9E%E5%BD%92%E5%8C%BA%E5%88%AB.jpg" alt></p><p><img src="/2020/05/25/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A01-0/%E5%A4%9A%E7%89%B9%E5%BE%81%E7%BA%BF%E6%80%A7%E5%9B%9E%E5%BD%92.jpg" alt></p><h5 id="多项式回归"><a href="#多项式回归" class="headerlink" title="多项式回归"></a>多项式回归</h5><p><img src="/2020/05/25/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A01-0/%E5%A4%9A%E9%A1%B9%E5%BC%8F%E5%9B%9E%E5%BD%92.jpg" alt></p><h5 id="标准方程法"><a href="#标准方程法" class="headerlink" title="标准方程法"></a>标准方程法</h5><p><img src="/2020/05/25/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A01-0/%E6%A0%87%E5%87%86%E6%96%B9%E7%A8%8B%E6%B3%95.jpg" alt><br><img src="/2020/05/25/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A01-0/%E6%A0%87%E5%87%86%E6%96%B9%E7%A8%8B%E6%B3%951.jpg" alt><br><img src="/2020/05/25/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A01-0/%E6%A0%87%E5%87%86%E6%96%B9%E7%A8%8B%E6%B3%95%E5%88%86%E5%AD%90%E5%88%86%E6%AF%8D%E5%B8%83%E5%B1%80.jpg" alt><br><img src="/2020/05/25/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A01-0/%E6%A0%87%E5%87%86%E6%96%B9%E7%A8%8B%E6%B3%952.jpg" alt><br><img src="/2020/05/25/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A01-0/%E6%A0%87%E5%87%86%E6%96%B9%E7%A8%8B%E6%B3%953.jpg" alt></p><h5 id="特征缩放，交叉验证"><a href="#特征缩放，交叉验证" class="headerlink" title="特征缩放，交叉验证"></a>特征缩放，交叉验证</h5><p>特征值很大时，使用梯度下降是需要的过程时间过长<br><img src="/2020/05/25/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A01-0/%E6%95%B0%E6%8D%AE%E5%BD%92%E4%B8%80%E5%8C%96.jpg" alt><br><img src="/2020/05/25/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A01-0/%E5%9D%87%E5%80%BC%E6%A0%87%E5%87%86%E5%8C%96.jpg" alt></p><p>测试数据不多是，可以使用交叉验证<br><img src="/2020/05/25/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A01-0/%E4%BA%A4%E5%8F%89%E9%AA%8C%E8%AF%81%E6%B3%95.jpg" alt></p><p><img src="/2020/05/25/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A01-0/%E6%8B%9F%E5%90%88.jpg" alt></p><p>在分类拟合中，为什么要一次性拟合呢？我可以在一次拟合的情况下迭代拟合。<br><img src="/2020/05/25/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A01-0/%E6%8B%9F%E5%90%88%E5%88%86%E7%B1%BB.jpg" alt></p><p><img src="/2020/05/25/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A01-0/%E6%AD%A3%E5%88%99%E5%8C%96.jpg" alt></p><h5 id="岭回归"><a href="#岭回归" class="headerlink" title="岭回归"></a>岭回归</h5><p><img src="/2020/05/25/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A01-0/%E5%B2%AD%E5%9B%9E%E5%BD%92.jpg" alt><br><img src="/2020/05/25/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A01-0/%E5%B2%AD%E5%9B%9E%E5%BD%92.jpg" alt><br><img src="/2020/05/25/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A01-0/%E5%B2%AD%E5%9B%9E%E5%BD%92.jpg" alt><br><img src="/2020/05/25/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A01-0/%E5%B2%AD%E5%9B%9E%E5%BD%92.jpg" alt></p><h5 id="lasso回归"><a href="#lasso回归" class="headerlink" title="lasso回归"></a>lasso回归</h5><p><img src="/2020/05/25/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A01-0/lasso.jpg" alt><br><img src="/2020/05/25/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A01-0/lasso%E4%B8%8E%E5%B2%AD%E5%9B%9E%E5%BD%92.jpg" alt><br><img src="/2020/05/25/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A01-0/lasso%E4%B8%8E%E5%B2%AD%E5%9B%9E%E5%BD%922.jpg" alt><br><img src="/2020/05/25/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A01-0/lasso%E4%B8%8E%E5%B2%AD%E5%9B%9E%E5%BD%923.jpg" alt></p><h5 id="弹性网"><a href="#弹性网" class="headerlink" title="弹性网"></a>弹性网</h5><p>结合了岭回归和lasso<br><img src="/2020/05/25/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A01-0/%E5%BC%B9%E6%80%A7%E7%BD%91.jpg" alt><br><img src="/2020/05/25/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A01-0/%E5%BC%B9%E6%80%A7%E7%BD%911.jpg" alt></p><h4 id="逻辑回归"><a href="#逻辑回归" class="headerlink" title="逻辑回归"></a>逻辑回归</h4><p><img src="/2020/05/25/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A01-0/%E9%80%BB%E8%BE%91%E5%9B%9E%E5%BD%92.jpg" alt><br><img src="/2020/05/25/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A01-0/%E9%80%BB%E8%BE%91%E5%9B%9E%E5%BD%92%E4%BB%A3%E4%BB%B7%E5%87%BD%E6%95%B0.jpg" alt><br><img src="/2020/05/25/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A01-0/%E9%80%BB%E8%BE%91%E5%9B%9E%E5%BD%92%E4%BB%A3%E4%BB%B7%E5%87%BD%E6%95%B02.jpg" alt><br><img src="/2020/05/25/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A01-0/%E9%80%BB%E8%BE%91%E5%9B%9E%E5%BD%92%E4%BB%A3%E4%BB%B7%E5%87%BD%E6%95%B03.jpg" alt><br><img src="/2020/05/25/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A01-0/%E9%80%BB%E8%BE%91%E5%9B%9E%E5%BD%92%E9%80%BB%E8%BE%91%E5%87%BD%E6%95%B0.jpg" alt></p><h4 id="神经网络"><a href="#神经网络" class="headerlink" title="神经网络"></a>神经网络</h4><p><img src="/2020/05/25/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A01-0/%E4%BA%BA%E4%BD%93%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C.jpg" alt><br><img src="/2020/05/25/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A01-0/%E5%8D%95%E5%B1%82%E6%84%9F%E7%9F%A5%E5%99%A8.jpg" alt><br><img src="/2020/05/25/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A01-0/%E5%8D%95%E5%B1%82%E6%84%9F%E7%9F%A5%E5%99%A82.jpg" alt><br><img src="/2020/05/25/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A01-0/%E6%84%9F%E7%9F%A5%E5%99%A8%E5%AD%A6%E4%B9%A0%E8%A7%84%E5%88%99.jpg" alt></p><h5 id="BP神经网络"><a href="#BP神经网络" class="headerlink" title="BP神经网络"></a>BP神经网络</h5><p><img src="/2020/05/25/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A01-0/bp%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E7%BB%93%E6%9E%84.jpg" alt><br><img src="/2020/05/25/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A01-0/bp%E7%AE%97%E6%B3%95.jpg" alt><br><img src="/2020/05/25/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A01-0/%E5%8D%95%E5%B1%82%E6%84%9F%E7%9F%A5%E5%99%A82.jpg" alt><br><img src="/2020/05/25/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A01-0/%E6%84%9F%E7%9F%A5%E5%99%A8%E5%AD%A6%E4%B9%A0%E8%A7%84%E5%88%99.jpg" alt><br><img src="/2020/05/25/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A01-0/%E6%84%9F%E7%9F%A5%E5%99%A8%E5%AD%A6%E4%B9%A0%E8%A7%84%E5%88%992.jpg" alt></p><h4 id="决策树"><a href="#决策树" class="headerlink" title="决策树"></a>决策树</h4><p><img src="/2020/05/25/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A01-0/%E5%86%B3%E7%AD%96%E6%A0%91%E4%BB%8B%E7%BB%8D.jpg" alt><br><img src="/2020/05/25/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A01-0/%E5%86%B3%E7%AD%96%E6%A0%91%E4%BB%8B%E7%BB%8D3.jpg" alt></p><p>期待的结果<br><img src="/2020/05/25/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A01-0/%E5%86%B3%E7%AD%96%E6%A0%91%E4%BB%8B%E7%BB%8D2.jpg" alt></p><p><img src="/2020/05/25/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A01-0/%E7%86%B5%E6%A6%82%E5%BF%B5.jpg" alt><br><img src="/2020/05/25/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A01-0/%E4%BF%A1%E6%81%AF%E7%86%B5.jpg" alt></p><p>信息熵越大，事件的可能性越小。</p><p><img src="/2020/05/25/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A01-0/id3%E7%AE%97%E6%B3%95.jpg" alt><br><img src="/2020/05/25/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A01-0/id3%E7%AE%97%E6%B3%952.jpg" alt></p><p><img src="/2020/05/25/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A01-0/c4.5%E7%AE%97%E6%B3%95.jpg" alt><br>根据信息熵来选择根节点</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;机器学习所解决的问题：&lt;br&gt;机器学习是基于数据来解决问题的，算法是基于算法的标准来解决问题。&lt;/p&gt;
&lt;p&gt; 机器学习的流程如下：&lt;/p&gt;
&lt;p&gt;数据准备 -&amp;gt; 建模 -&amp;gt; 训练 -&amp;gt; 评估 -&amp;gt; 应用&lt;br&gt;在实际应用时，由于训练的过程可能时间比
      
    
    </summary>
    
    
    
      <category term="机器学习" scheme="https://cnawesome.github.io/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>linux内核3.0</title>
    <link href="https://cnawesome.github.io/2020/05/16/linux%E5%86%85%E6%A0%B83-0/"/>
    <id>https://cnawesome.github.io/2020/05/16/linux%E5%86%85%E6%A0%B83-0/</id>
    <published>2020-05-16T14:19:44.000Z</published>
    <updated>2020-05-25T01:54:47.982Z</updated>
    
    <content type="html"><![CDATA[<p>linux内核由5个模块组成：<br>    进程调度模块<br>    内存管理模块<br>    文件系统模块<br>    进程间通信模块<br>    网络接口模块</p><h3 id="5-3-内存管理"><a href="#5-3-内存管理" class="headerlink" title="5.3 内存管理"></a>5.3 内存管理</h3><p>为了更好地使用机器中物理内存 ，系统初始化时内存被分为</p><p><img src="/2020/05/16/linux%E5%86%85%E6%A0%B83-0/%E5%86%85%E6%A0%B8%E7%BB%93%E6%9E%84%E6%A1%86%E5%9B%BE.jpg" alt></p><p><img src="/2020/05/16/linux%E5%86%85%E6%A0%B83-0/%E7%B3%BB%E7%BB%9F%E5%8A%A0%E7%94%B5%E5%88%9D%E5%A7%8B%E5%8C%96.jpg" alt></p><h4 id="bootsect-s"><a href="#bootsect-s" class="headerlink" title="bootsect.s"></a>bootsect.s</h4><p>流程：<br>系统加电 –&gt; bios开启，从地址0x00开始执行程序 –&gt;bios执行系统检测，在物理地址0的地方初始化中断向量 –&gt;bios把可启动设备的一个扇区的代码bootsect读入内存绝对地址为0x7c00的位置，并跳转到此处 –&gt;bootsect执行期间，将自己移动到0x9000位置并开始执行。</p><p>bootsect.s是磁盘引导块程序，驻留在磁盘的第一个扇区(0磁道，0磁头，第一个扇区)。<br>rom bios加电后，rom bios会将扇区代码bootsect加载到内存地址为0x7c00的位置。</p><p>bootsect作用，把从磁盘第二个扇区开始的四个扇区的setup模块加载到内存紧接着bootsect的后面0x90200。然后利用bios中断0x13取磁盘参数表中当前启动引导盘的参数。接着系统就显示“ system loading…”。接着把setup模块后的system模块加载到内存0x10000的位置。确定根文件系统的确认号。</p><p><img src="/2020/05/16/linux%E5%86%85%E6%A0%B83-0/%E5%86%85%E6%A0%B8%E7%A3%81%E7%9B%98%E5%88%86%E5%B8%83%E6%83%85%E5%86%B5.jpg" alt><br><img src="/2020/05/16/linux%E5%86%85%E6%A0%B83-0/%E5%86%85%E6%A0%B8%E7%A3%81%E7%9B%98%E5%88%86%E5%B8%83%E6%83%85%E5%86%B51.jpg" alt></p><p><img src="/2020/05/16/linux%E5%86%85%E6%A0%B83-0/%E6%B1%87%E7%BC%96%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95.jpg" alt></p><p>伪指令：bootsect步骤</p><p>boot-start</p><p>把自身程序从0x07c0转移到0x9000，跳转到下一句继续执行。<br>设置段寄存器，和堆栈寄存器。栈指针sp要大于514字节。<br>（bootsect程序段执行结束）<br>bootsect后执行setup模块<br>利用bios中段0x13将setup模块从磁盘第二个扇区开始读到0x90200，共读4个扇区，如果读错了，复位驱动器，并重试，无退路。<br>获取磁盘，驱动器参数。<br>加载system模块到内存0x10000<br>设置根设备器</p><p>跳转到后面的setup模块执行。<br>-end</p><p>setup-start</p><p>read-it用于读取磁盘上的system模块。<br>kill—moter 用于关闭软驱的马达。</p><p>-end</p><p>参考书籍 Alessandro Rubini 《linux内核源代码漫游》</p><p>硬盘引导程序：<br>系统上电 –&gt; 可启动硬盘的第一个扇区（主引导记录MBR）会被bios加载到内存0x7c0的<br>位置执行 –&gt;主引导记录把自己转移到0x600的位置 –&gt;根据MBR中的分区表信息所指明的活动分区的第一个扇区加载到内存0x7c00的位置。–&gt;在该位置开始执行</p><p><img src="/2020/05/16/linux%E5%86%85%E6%A0%B83-0/linux%E7%A1%AC%E7%9B%98%E8%AE%BE%E5%A4%87%E5%8F%B7.jpg" alt></p><h4 id="setup-s"><a href="#setup-s" class="headerlink" title="setup.s"></a>setup.s</h4><p>setup.s是一个操作系统加载程序<br>主要作用：利用bios的中断机制读取机器系统数据，并将数据保存在内存0x9000的位置（覆盖掉bootsect的内容）</p><p><img src="/2020/05/16/linux%E5%86%85%E6%A0%B83-0/setup%E7%9A%84%E5%8F%82%E6%95%B0.jpg" alt></p><p>流程：<br>利用bios的中断机制读取机器系统数据，并将数据保存在内存0x9000的位置（覆盖掉bootsect的内容）–&gt;<br>将system模块整体移动到内存绝对地址为0x0000的位置 –&gt;加载中断描述符表寄存器IDT和全局描述符GDT –&gt;开启A20地址线 –&gt;<br>重新设置两个中断控制芯片8259A –&gt;重新设置硬件中断号 –&gt;设置cpu控制寄存器CR0（也称机器状态字）–&gt;进入32位保护模式 –&gt;跳转到system模块的最前面的head.s继续执行。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;linux内核由5个模块组成：&lt;br&gt;    进程调度模块&lt;br&gt;    内存管理模块&lt;br&gt;    文件系统模块&lt;br&gt;    进程间通信模块&lt;br&gt;    网络接口模块&lt;/p&gt;
&lt;h3 id=&quot;5-3-内存管理&quot;&gt;&lt;a href=&quot;#5-3-内存管理&quot; class=&quot;h
      
    
    </summary>
    
    
      <category term="linux" scheme="https://cnawesome.github.io/categories/linux/"/>
    
    
      <category term="linux" scheme="https://cnawesome.github.io/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>计算机组成1.0</title>
    <link href="https://cnawesome.github.io/2020/05/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%901-0/"/>
    <id>https://cnawesome.github.io/2020/05/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%901-0/</id>
    <published>2020-05-07T07:54:29.000Z</published>
    <updated>2020-05-29T04:05:42.074Z</updated>
    
    <content type="html"><![CDATA[<h3 id="计算机组成概念"><a href="#计算机组成概念" class="headerlink" title="计算机组成概念"></a>计算机组成概念</h3><p>计算机组成与计算机体系区别</p><p><img src="/2020/05/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%901-0/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8C%BA%E5%88%AB.jpg" alt></p><p><img src="/2020/05/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%901-0/%E5%86%AF%E8%AF%BA%E4%BE%9D%E6%9B%BC%E7%BB%93%E6%9E%84.jpg" alt><br>实线是数据传输，虚线是控制传输<br><img src="/2020/05/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%901-0/%E5%86%AF%E8%AF%BA%E4%BE%9D%E6%9B%BC%E7%BB%93%E6%9E%842.jpg" alt><br><img src="/2020/05/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%901-0/%E5%86%AF%E8%AF%BA%E4%BE%9D%E6%9B%BC%E7%BB%93%E6%9E%843.jpg" alt></p><p>累加运算器</p><p><img src="/2020/05/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%901-0/%E8%BF%90%E7%AE%97%E5%99%A8%E7%BB%93%E6%9E%84.jpg" alt><br>ACC：数据寄存器<br>ALU：运算寄存器<br>X：运算数<br>MQ：存放结果</p><p>控制器<br><img src="/2020/05/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%901-0/%E6%8E%A7%E5%88%B6%E5%99%A8.jpg" alt><br>PC:保存指令地址</p><p>运算速度：<br>机器字长：cpu一次处理数据的位数<br>与cpu寄存器位数有关</p><p>CPI：执行一条指令所需要的时间周期</p><p><img src="/2020/05/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%901-0/%E5%90%89%E6%99%AE%E6%A3%AE%E6%B3%95.jpg" alt><br>f表示频率；</p><p>MIPS:每秒执行百万条指令</p><p>ELOPS：每秒浮点运算次数</p><h4 id="总线结构"><a href="#总线结构" class="headerlink" title="总线结构"></a>总线结构</h4><p><img src="/2020/05/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%901-0/%E6%80%BB%E7%BA%BF%E5%88%86%E7%B1%BB.jpg" alt></p><p>1.单总线结构框图</p><p><img src="/2020/05/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%901-0/%E5%8D%95%E6%80%BB%E7%BA%BF%E7%BB%93%E6%9E%84.jpg" alt></p><p><img src="/2020/05/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%901-0/%E5%8F%8C%E6%80%BB%E7%BA%BF%E7%BB%93%E6%9E%84.jpg" alt></p><p>多总线结构</p><p><img src="/2020/05/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%901-0/%E5%8F%8C%E6%80%BB%E7%BA%BF%E7%BB%93%E6%9E%841.jpg" alt><br><img src="/2020/05/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%901-0/%E4%B8%89%E6%80%BB%E7%BA%BF%E7%BB%93%E6%9E%841.jpg" alt><br><img src="/2020/05/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%901-0/%E4%B8%89%E6%80%BB%E7%BA%BF%E7%BB%93%E6%9E%841.jpg" alt><br><img src="/2020/05/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%901-0/%E4%B8%89%E6%80%BB%E7%BA%BF%E7%BB%93%E6%9E%842.jpg" alt><br><img src="/2020/05/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%901-0/%E5%9B%9B%E6%80%BB%E7%BA%BF%E7%BB%93%E6%9E%841.jpg" alt></p><p><img src="/2020/05/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%901-0/pci%E6%80%BB%E7%BA%BF%E7%BB%93%E6%9E%84.jpg" alt><br><img src="/2020/05/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%901-0/%E5%A4%9A%E5%B1%82pci%E6%80%BB%E7%BA%BF%E7%BB%93%E6%9E%84.jpg" alt><br><img src="/2020/05/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%901-0/vl-bus%E6%80%BB%E7%BA%BF%E7%BB%93%E6%9E%84.jpg" alt></p><h4 id="总线控制"><a href="#总线控制" class="headerlink" title="总线控制"></a>总线控制</h4><p>基础概念：</p><p>主设备（模块）：多总线由控制权<br>从设备（模块）：响应从主设备发来的总线命令</p><p>功能：总线判优，总线通信</p><h5 id="总线判优控制"><a href="#总线判优控制" class="headerlink" title="总线判优控制"></a>总线判优控制</h5><p><img src="/2020/05/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%901-0/%E6%80%BB%E7%BA%BF%E5%88%A4%E4%BC%98%E6%8E%A7%E5%88%B6.jpg" alt></p><p><img src="/2020/05/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%901-0/%E6%80%BB%E7%BA%BF%E5%88%A4%E4%BC%98%E9%93%BE%E5%BC%8F%E6%9F%A5%E8%AF%A2.jpg" alt><br>BS:总线忙<br>BR：总线请求<br>BG:链式查询  是否提出总线占用请求</p><p><img src="/2020/05/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%901-0/%E8%AE%A1%E6%95%B0%E5%99%A8%E5%AE%9A%E6%97%B6%E6%9F%A5%E8%AF%A2.jpg" alt></p><p><img src="/2020/05/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%901-0/%E7%8B%AC%E7%AB%8B%E8%AF%B7%E6%B1%82.jpg" alt></p><h5 id="总线通信控制"><a href="#总线通信控制" class="headerlink" title="总线通信控制"></a>总线通信控制</h5><p><img src="/2020/05/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%901-0/%E6%80%BB%E7%BA%BF%E4%BC%A0%E8%BE%93%E5%91%A8%E6%9C%9F.jpg" alt></p><p>总线通信方式：<br>    1.同步通信<br>    2.异步通信<br>    3.半同步通信<br>    4.分离式通信<br><img src="/2020/05/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%901-0/%E5%90%8C%E6%AD%A5%E5%BC%8F%E6%95%B0%E6%8D%AE%E8%BE%93%E5%85%A5.jpg" alt><br><img src="/2020/05/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%901-0/%E5%BC%82%E6%AD%A5%E9%80%9A%E4%BF%A1.jpg" alt><br><img src="/2020/05/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%901-0/%E5%90%8C%E6%AD%A5%E5%BC%82%E6%AD%A5.jpg" alt><br><img src="/2020/05/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%901-0/%E5%8D%8A%E5%90%8C%E6%AD%A5%E5%90%8C%E4%BF%A1.jpg" alt></p><p><img src="/2020/05/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%901-0/%E5%88%86%E7%A6%BB%E5%BC%8F%E9%80%9A%E4%BF%A1.jpg" alt><br><img src="/2020/05/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%901-0/%E5%88%86%E7%A6%BB%E5%BC%8F%E9%80%9A%E4%BF%A1%E7%89%B9%E7%82%B9.jpg" alt></p><h3 id="存储器"><a href="#存储器" class="headerlink" title="存储器"></a>存储器</h3><p>1.按存储介质<br>（1）半导体存储器<br>（2）磁表面存储器<br>（3）磁芯存储器<br>（4）光盘存储器</p><p><img src="/2020/05/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%901-0/%E7%BC%93%E5%AD%98%E4%B8%BB%E5%AD%98.jpg" alt><br><img src="/2020/05/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%901-0/%E7%BC%93%E5%AD%98%E4%B8%BB%E5%AD%982.jpg" alt></p><h4 id="主存储器"><a href="#主存储器" class="headerlink" title="主存储器"></a>主存储器</h4><p>主存的基本组成</p><p>主存与cpu的联系：数据总线，控制总线，地址总线</p><p><img src="/2020/05/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%901-0/%E4%B8%BB%E5%AD%98%E4%B8%8Ecpu%E8%81%94%E7%B3%BB.jpg" alt><br><img src="/2020/05/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%901-0/%E4%B8%BB%E5%AD%98%E5%AD%98%E5%82%A8%E6%96%B9%E5%BC%8F.jpg" alt></p><p>半导体存储芯片<br><img src="/2020/05/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%901-0/%E5%8D%8A%E5%AF%BC%E4%BD%93%E5%AD%98%E5%82%A8%E8%8A%AF%E7%89%87.jpg" alt></p><p><img src="/2020/05/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%901-0/%E5%AD%98%E5%82%A8%E8%8A%AF%E7%89%87%E7%89%87%E9%80%89%E7%BA%BF.jpg" alt></p><p>片选线 cs 选择 ce 使能<br>读、写控制线 we 低电平写，高电平读</p><p><img src="/2020/05/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%901-0/%E5%AD%98%E5%82%A8%E8%8A%AF%E7%89%87%E8%AF%91%E7%A0%81%E9%A9%B1%E5%8A%A8%E6%96%B9%E5%BC%8F.jpg" alt><br>重合法<br><img src="/2020/05/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%901-0/%E5%AD%98%E5%82%A8%E8%8A%AF%E7%89%87%E8%AF%91%E7%A0%81%E9%A9%B1%E5%8A%A8%E6%96%B9%E5%BC%8F2.jpg" alt></p><h5 id="随机存取存储器"><a href="#随机存取存储器" class="headerlink" title="随机存取存储器"></a>随机存取存储器</h5><p>静态ram<br><img src="/2020/05/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%901-0/%E9%9D%99%E6%80%81ram.jpg" alt><br><img src="/2020/05/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%901-0/%E9%9D%99%E6%80%81ram%E8%AF%BB%E6%93%8D%E4%BD%9C.jpg" alt><br><img src="/2020/05/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%901-0/%E9%9D%99%E6%80%81ram%E5%86%99%E6%93%8D%E4%BD%9C.jpg" alt></p><p><img src="/2020/05/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%901-0/%E5%8D%95%E7%AE%A1%E5%8A%A8%E6%80%81ram.jpg" alt></p><h6 id="只读存储器"><a href="#只读存储器" class="headerlink" title="只读存储器"></a>只读存储器</h6><p>掩膜rom</p><p>行列选择线交叉处mos管为1</p><p>2的10次方=1k</p><p>位扩展<br><img src="/2020/05/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%901-0/%E4%BD%8D%E6%89%A9%E5%B1%95.jpg" alt></p><p>字位扩展<br><img src="/2020/05/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%901-0/%E5%AD%97%E4%BD%8D%E6%89%A9%E5%B1%95.jpg" alt></p><p>存储器校验</p><p>编码的最小距离：任意两组合法代码之间 二进制位数 的 最小差异</p><p>编码的纠错检错与编码的最小距离有关</p><p>汉明码：<br>采用奇偶校验和分组校验</p><p><img src="/2020/05/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%901-0/%E6%B1%89%E6%98%8E%E7%A0%81.jpg" alt></p><p>汉明码的组成:<br>    汉明码的组成要组成多少位检测位：<br>    检测位的位置：2的i次方位置<br>    检测位的取值：与该位所在的检测“小组”承担的奇偶校验任务有关</p><p>cache 是静态ram</p><p>单体多字系统：扩大了数据寄存器，多个字节以整体方式存储<br><img src="/2020/05/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%901-0/%E6%8F%90%E9%AB%98%E8%AE%BF%E5%AD%98.jpg" alt><br><img src="/2020/05/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%901-0/%E6%8F%90%E9%AB%98%E8%AE%BF%E5%AD%982.jpg" alt><br><img src="/2020/05/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%901-0/%E6%8F%90%E9%AB%98%E8%AE%BF%E5%AD%983.jpg" alt></p><h4 id="高速缓冲存储器"><a href="#高速缓冲存储器" class="headerlink" title="高速缓冲存储器"></a>高速缓冲存储器</h4><p>目的：为了避免cpu空等问题，提高访问数据速度</p><p>为什么cache不需要块内地址：内存块内地址和cache的块内地址是匹配的<br>内存编址与cache编址需要匹配</p><p>cache命中率与cache的容量与块长有关</p><p>块长 取一个存储周期内从内存调出的信息长度</p><p><img src="/2020/05/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%901-0/cache%E8%AF%BB%E6%93%8D%E4%BD%9C.jpg" alt><br><img src="/2020/05/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%901-0/cache%E5%86%99%E6%93%8D%E4%BD%9C.jpg" alt></p><p><img src="/2020/05/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%901-0/cache%E7%9B%B4%E6%8E%A5%E6%98%A0%E5%B0%84.jpg" alt><br><img src="/2020/05/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%901-0/cache%E5%85%A8%E7%9B%B8%E8%81%94%E6%98%A0%E5%B0%84.jpg" alt></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;计算机组成概念&quot;&gt;&lt;a href=&quot;#计算机组成概念&quot; class=&quot;headerlink&quot; title=&quot;计算机组成概念&quot;&gt;&lt;/a&gt;计算机组成概念&lt;/h3&gt;&lt;p&gt;计算机组成与计算机体系区别&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/2020/05/07/%E8%AE%
      
    
    </summary>
    
    
      <category term="计算机组成" scheme="https://cnawesome.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90/"/>
    
    
      <category term="计算机组成" scheme="https://cnawesome.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90/"/>
    
  </entry>
  
  <entry>
    <title>linux内核2.0</title>
    <link href="https://cnawesome.github.io/2020/04/16/linux%E5%86%85%E6%A0%B82-0/"/>
    <id>https://cnawesome.github.io/2020/04/16/linux%E5%86%85%E6%A0%B82-0/</id>
    <published>2020-04-16T14:17:08.000Z</published>
    <updated>2020-04-18T09:37:53.885Z</updated>
    
    <content type="html"><![CDATA[<h3 id="80x86保护模式及其编程"><a href="#80x86保护模式及其编程" class="headerlink" title="80x86保护模式及其编程"></a>80x86保护模式及其编程</h3><pre><code>-本书介绍的linux擦欧总系统基于intel公司80x86及其相关外围硬件组成的pc机。</code></pre><p>80x86 参考书籍： 《IA-32 intal体系结构软件开发者手册》<br>，《系统编程指南》</p><h4 id="80x86-系统寄存器和系统指令"><a href="#80x86-系统寄存器和系统指令" class="headerlink" title="80x86 系统寄存器和系统指令"></a>80x86 系统寄存器和系统指令</h4><h5 id="系统寄存器"><a href="#系统寄存器" class="headerlink" title="系统寄存器"></a>系统寄存器</h5><p>标志寄存器： EFLAGS的系统标志和IOPL字段用于控制i/o访问，可屏蔽硬件中断，调试，任务切换以及虚拟-8086模式。<br><img src="/2020/04/16/linux%E5%86%85%E6%A0%B82-0/80x86%E6%A0%87%E5%BF%97%E5%AF%84%E5%AD%98%E5%99%A8.jpg" alt><br>内存管理寄存器：<br>处理器提供四个内存管理寄存器（GDTR，LDTR，IDTR和TR），用于指定分段内存管理所使用的系统表的基地址。<br><img src="/2020/04/16/linux%E5%86%85%E6%A0%B82-0/80x86%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86%E5%AF%84%E5%AD%98%E5%99%A8.jpg" alt><br>控制寄存器：（CR0，CR1，CR2和CR3），用于控制和确定处理器的操作模式以及当前执行的任务的特性。<br><img src="/2020/04/16/linux%E5%86%85%E6%A0%B82-0/80x86%E6%8E%A7%E5%88%B6%E5%AF%84%E5%AD%98%E5%99%A8.jpg" alt></p><h5 id="系统指令"><a href="#系统指令" class="headerlink" title="系统指令"></a>系统指令</h5><p><img src="/2020/04/16/linux%E5%86%85%E6%A0%B82-0/80x86%E7%B3%BB%E7%BB%9F%E6%8C%87%E4%BB%A4.jpg" alt><br><img src="/2020/04/16/linux%E5%86%85%E6%A0%B82-0/80x86%E7%B3%BB%E7%BB%9F%E6%8C%87%E4%BB%A42.jpg" alt></p><h5 id="保存模式内存管理"><a href="#保存模式内存管理" class="headerlink" title="保存模式内存管理"></a>保存模式内存管理</h5><p><img src="/2020/04/16/linux%E5%86%85%E6%A0%B82-0/80x86%E5%86%85%E5%AD%98%E5%AF%BB%E5%9D%80.jpg" alt><br><img src="/2020/04/16/linux%E5%86%85%E6%A0%B82-0/80x86%E5%9C%B0%E5%9D%80%E5%8F%98%E6%8D%A2.jpg" alt><br><img src="/2020/04/16/linux%E5%86%85%E6%A0%B82-0/80x86%E5%9C%B0%E5%9D%80%E5%8F%98%E6%8D%A22.jpg" alt><br><img src="/2020/04/16/linux%E5%86%85%E6%A0%B82-0/80x86%E5%9C%B0%E5%9D%80%E5%8F%98%E6%8D%A23.jpg" alt></p><p><img src="/2020/04/16/linux%E5%86%85%E6%A0%B82-0/80x86%E5%9C%B0%E5%9D%80%E4%BF%9D%E6%8A%A4.jpg" alt><br><img src="/2020/04/16/linux%E5%86%85%E6%A0%B82-0/80x86%E5%9C%B0%E5%9D%80%E4%BF%9D%E6%8A%A42.jpg" alt></p><p>虚拟地址 采用 段结构<br>段地址 映射到 线性地址<br>线性地址 映射到 物理地址<br>线性地址 可采用 页表结构</p><p><img src="/2020/04/16/linux%E5%86%85%E6%A0%B82-0/80x86%E5%88%86%E6%AE%B5%E6%9C%BA%E5%88%B6.jpg" alt><br><img src="/2020/04/16/linux%E5%86%85%E6%A0%B82-0/80x86%E5%88%86%E6%AE%B5%E6%9C%BA%E5%88%B6%E7%AB%AF%E6%AE%B5%E7%9A%84%E5%AE%9A%E4%B9%89.jpg" alt><br><img src="/2020/04/16/linux%E5%86%85%E6%A0%B82-0/80x86%E5%88%86%E6%AE%B5%E6%9C%BA%E5%88%B6%E7%AB%AF%E6%AE%B5%E7%9A%84%E5%AE%9A%E4%B9%892.jpg" alt></p><h5 id="段描述符表"><a href="#段描述符表" class="headerlink" title="段描述符表"></a>段描述符表</h5><p>段描述表 分为 GDT(全局描述表) 和 LDT(局部描述表)<br>虚拟内存中，一般是GDT，一半是LDT。<br>GDT任务共享<br><img src="/2020/04/16/linux%E5%86%85%E6%A0%B82-0/80x86%E5%88%86%E6%AE%B5%E6%9C%BA%E5%88%B6%E7%AB%AF%E6%AE%B5%E6%8F%8F%E8%BF%B0%E7%AC%A6%E8%A1%A8.jpg" alt><br><img src="/2020/04/16/linux%E5%86%85%E6%A0%B82-0/80x86%E5%88%86%E6%AE%B5%E6%9C%BA%E5%88%B6%E7%AB%AF%E6%AE%B5%E6%8F%8F%E8%BF%B0%E7%AC%A6%E8%A1%A82.jpg" alt><br><img src="/2020/04/16/linux%E5%86%85%E6%A0%B82-0/80x86%E5%88%86%E6%AE%B5%E6%9C%BA%E5%88%B6%E7%AB%AF%E6%AE%B5%E6%8F%8F%E8%BF%B0%E7%AC%A6%E8%A1%A83.jpg" alt><br><img src="/2020/04/16/linux%E5%86%85%E6%A0%B82-0/80x86%E5%88%86%E6%AE%B5%E6%9C%BA%E5%88%B6%E7%AB%AF%E6%AE%B5%E6%8F%8F%E8%BF%B0%E7%AC%A6%E8%A1%A84.jpg" alt></p><h5 id="段选择符"><a href="#段选择符" class="headerlink" title="段选择符"></a>段选择符</h5><p><img src="/2020/04/16/linux%E5%86%85%E6%A0%B82-0/80x86%E5%88%86%E6%AE%B5%E6%9C%BA%E5%88%B6%E7%AB%AF%E6%AE%B5%E9%80%89%E6%8B%A9%E7%AC%A6.jpg" alt><br><img src="/2020/04/16/linux%E5%86%85%E6%A0%B82-0/80x86%E5%88%86%E6%AE%B5%E6%9C%BA%E5%88%B6%E7%AB%AF%E6%AE%B5%E9%80%89%E6%8B%A9%E7%AC%A62.jpg" alt><br><img src="/2020/04/16/linux%E5%86%85%E6%A0%B82-0/80x86%E5%88%86%E6%AE%B5%E6%9C%BA%E5%88%B6%E7%AB%AF%E6%AE%B5%E9%80%89%E6%8B%A9%E7%AC%A63.jpg" alt><br><img src="/2020/04/16/linux%E5%86%85%E6%A0%B82-0/80x86%E5%88%86%E6%AE%B5%E6%9C%BA%E5%88%B6%E7%AB%AF%E6%AE%B5%E9%80%89%E6%8B%A9%E7%AC%A64.jpg" alt></p><h5 id="段描述符"><a href="#段描述符" class="headerlink" title="段描述符"></a>段描述符</h5><p><img src="/2020/04/16/linux%E5%86%85%E6%A0%B82-0/80x86%E5%88%86%E6%AE%B5%E6%9C%BA%E5%88%B6%E7%AB%AF%E6%AE%B5%E6%8F%8F%E8%BF%B0%E7%AC%A6.jpg" alt><br><img src="/2020/04/16/linux%E5%86%85%E6%A0%B82-0/80x86%E5%88%86%E6%AE%B5%E6%9C%BA%E5%88%B6%E7%AB%AF%E6%AE%B5%E6%8F%8F%E8%BF%B0%E7%AC%A62.jpg" alt><br><img src="/2020/04/16/linux%E5%86%85%E6%A0%B82-0/80x86%E5%88%86%E6%AE%B5%E6%9C%BA%E5%88%B6%E7%AB%AF%E6%AE%B5%E6%8F%8F%E8%BF%B0%E7%AC%A63.jpg" alt><br><img src="/2020/04/16/linux%E5%86%85%E6%A0%B82-0/80x86%E5%88%86%E6%AE%B5%E6%9C%BA%E5%88%B6%E7%AB%AF%E6%AE%B5%E6%8F%8F%E8%BF%B0%E7%AC%A64.jpg" alt></p><p>段选择符 指向 段描述符表 向内寻找 段描述符 找到对应的空间</p><pre><code>-------2020.4.17  这段主要是介绍内存的管理，段内存的寻址至101页</code></pre><p><img src="/2020/04/16/linux%E5%86%85%E6%A0%B82-0/8086%E4%BB%A3%E7%A0%81%E5%92%8C%E6%95%B0%E6%8D%AE%E6%AE%B5%E6%8F%8F%E8%BF%B0%E7%AC%A6%E7%B1%BB%E5%9E%8B.jpg" alt><br><img src="/2020/04/16/linux%E5%86%85%E6%A0%B82-0/8086%E4%BB%A3%E7%A0%81%E5%92%8C%E6%95%B0%E6%8D%AE%E6%AE%B5%E6%8F%8F%E8%BF%B0%E7%AC%A6%E7%B1%BB%E5%9E%8B2.jpg" alt><br><img src="/2020/04/16/linux%E5%86%85%E6%A0%B82-0/8086%E4%BB%A3%E7%A0%81%E5%92%8C%E6%95%B0%E6%8D%AE%E6%AE%B5%E6%8F%8F%E8%BF%B0%E7%AC%A6%E7%B1%BB%E5%9E%8B3.jpg" alt></p><h4 id="分页机制"><a href="#分页机制" class="headerlink" title="分页机制"></a>分页机制</h4><p><img src="/2020/04/16/linux%E5%86%85%E6%A0%B82-0/8086%E5%88%86%E9%A1%B5%E6%9C%BA%E5%88%B6.jpg" alt><br><img src="/2020/04/16/linux%E5%86%85%E6%A0%B82-0/8086%E5%88%86%E9%A1%B5%E6%9C%BA%E5%88%B62.jpg" alt><br><img src="/2020/04/16/linux%E5%86%85%E6%A0%B82-0/8086%E5%88%86%E9%A1%B5%E6%9C%BA%E5%88%B63.jpg" alt><br><img src="/2020/04/16/linux%E5%86%85%E6%A0%B82-0/8086%E5%88%86%E9%A1%B5%E6%9C%BA%E5%88%B64.jpg" alt></p><h5 id="页表结构"><a href="#页表结构" class="headerlink" title="页表结构"></a>页表结构</h5><pre><code>二级页表有点难懂</code></pre><p><img src="/2020/04/16/linux%E5%86%85%E6%A0%B82-0/8086%E9%A1%B5%E8%A1%A8%E7%BB%93%E6%9E%84.jpg" alt><br><img src="/2020/04/16/linux%E5%86%85%E6%A0%B82-0/8086%E9%A1%B5%E8%A1%A8%E7%BB%93%E6%9E%842.jpg" alt><br><img src="/2020/04/16/linux%E5%86%85%E6%A0%B82-0/8086%E9%A1%B5%E8%A1%A8%E7%BB%93%E6%9E%843.jpg" alt><br><img src="/2020/04/16/linux%E5%86%85%E6%A0%B82-0/8086%E9%A1%B5%E8%A1%A8%E7%BB%93%E6%9E%844.jpg" alt></p><h5 id="保护"><a href="#保护" class="headerlink" title="保护"></a>保护</h5><p>段级保护和页级保护</p><h4 id="中断可异常处理"><a href="#中断可异常处理" class="headerlink" title="中断可异常处理"></a>中断可异常处理</h4><p><img src="/2020/04/16/linux%E5%86%85%E6%A0%B82-0/8086%E4%B8%AD%E6%96%AD%E5%92%8C%E5%BC%82%E5%B8%B8.jpg" alt><br><img src="/2020/04/16/linux%E5%86%85%E6%A0%B82-0/8086%E4%B8%AD%E6%96%AD%E5%92%8C%E5%BC%82%E5%B8%B8%E5%90%91%E9%87%8F.jpg" alt><br><img src="/2020/04/16/linux%E5%86%85%E6%A0%B82-0/8086%E4%B8%AD%E6%96%AD%E6%BA%90.jpg" alt><br><img src="/2020/04/16/linux%E5%86%85%E6%A0%B82-0/8086%E5%BC%82%E5%B8%B8%E6%BA%90.jpg" alt><br><img src="/2020/04/16/linux%E5%86%85%E6%A0%B82-0/8086%E5%BC%82%E5%B8%B8%E5%88%86%E7%B1%BB.jpg" alt></p><p><img src="/2020/04/16/linux%E5%86%85%E6%A0%B82-0/8086%E5%BC%82%E5%B8%B8%E4%B8%AD%E6%96%AD%E4%BC%98%E5%85%88%E7%BA%A7.jpg" alt><br><img src="/2020/04/16/linux%E5%86%85%E6%A0%B82-0/8086%E5%BC%80%E5%90%AF%EF%BC%8C%E7%A6%81%E6%AD%A2%E4%B8%AD%E6%96%AD.jpg" alt></p><p><img src="/2020/04/16/linux%E5%86%85%E6%A0%B82-0/8086%E5%BC%82%E5%B8%B8%E4%B8%AD%E6%96%AD%E6%8F%8F%E8%BF%B0%E7%AC%A6%E8%A1%A82.jpg" alt><br><img src="/2020/04/16/linux%E5%86%85%E6%A0%B82-0/8086%E5%BC%82%E5%B8%B8%E4%B8%AD%E6%96%AD%E6%8F%8F%E8%BF%B0%E7%AC%A6%E8%A1%A8.jpg" alt><br><img src="/2020/04/16/linux%E5%86%85%E6%A0%B82-0/8086%E5%BC%82%E5%B8%B8%E4%B8%AD%E6%96%AD%E6%8F%8F%E8%BF%B0%E7%AC%A6.jpg" alt><br><img src="/2020/04/16/linux%E5%86%85%E6%A0%B82-0/8086%E5%BC%82%E5%B8%B8%E4%B8%AD%E6%96%AD%E6%8F%8F%E8%BF%B0%E7%AC%A62.jpg" alt></p><p><img src="/2020/04/16/linux%E5%86%85%E6%A0%B82-0/8086%E5%BC%82%E5%B8%B8%E4%B8%AD%E6%96%AD%E5%A4%84%E7%90%86.jpg" alt><br><img src="/2020/04/16/linux%E5%86%85%E6%A0%B82-0/8086%E5%BC%82%E5%B8%B8%E4%B8%AD%E6%96%AD%E5%A4%84%E7%90%862.jpg" alt><br><img src="/2020/04/16/linux%E5%86%85%E6%A0%B82-0/8086%E5%BC%82%E5%B8%B8%E4%B8%AD%E6%96%AD%E5%A4%84%E7%90%863.jpg" alt><br><img src="/2020/04/16/linux%E5%86%85%E6%A0%B82-0/8086%E5%BC%82%E5%B8%B8%E4%B8%AD%E6%96%AD%E5%A4%84%E7%90%864.jpg" alt><br><img src="/2020/04/16/linux%E5%86%85%E6%A0%B82-0/8086%E5%BC%82%E5%B8%B8%E4%B8%AD%E6%96%AD%E5%A4%84%E7%90%865.jpg" alt><br><img src="/2020/04/16/linux%E5%86%85%E6%A0%B82-0/8086%E5%BC%82%E5%B8%B8%E4%B8%AD%E6%96%AD%E5%A4%84%E7%90%866.jpg" alt><br><img src="/2020/04/16/linux%E5%86%85%E6%A0%B82-0/8086%E5%BC%82%E5%B8%B8%E4%B8%AD%E6%96%AD%E5%A4%84%E7%90%867.jpg" alt></p><p><img src="/2020/04/16/linux%E5%86%85%E6%A0%B82-0/%E4%BB%BB%E5%8A%A1%E7%AE%A1%E7%90%86.jpg" alt><br><img src="/2020/04/16/linux%E5%86%85%E6%A0%B82-0/%E4%BB%BB%E5%8A%A1%E7%AE%A1%E7%90%862.jpg" alt><br><img src="/2020/04/16/linux%E5%86%85%E6%A0%B82-0/%E4%BB%BB%E5%8A%A1%E7%AE%A1%E7%90%863.jpg" alt></p><p><img src="/2020/04/16/linux%E5%86%85%E6%A0%B82-0/%E4%BB%BB%E5%8A%A1%E7%AE%A1%E7%90%86%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84.jpg" alt><br>任务状态段：<br>用于恢复一个任务执行的处理器状态信息被保存在称为任务状态段TSS的段中。<br>TSS段中个字段分为两大类： 动态字段和静态字段<br><img src="/2020/04/16/linux%E5%86%85%E6%A0%B82-0/%E4%BB%BB%E5%8A%A1%E7%AE%A1%E7%90%86%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%842.jpg" alt></p><p><a href="任务管理数据结构动态字段.jpg"></a><br><img src="/2020/04/16/linux%E5%86%85%E6%A0%B82-0/%E4%BB%BB%E5%8A%A1%E7%AE%A1%E7%90%86%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E9%9D%99%E6%80%81%E5%AD%97%E6%AE%B5.jpg" alt><br><img src="/2020/04/16/linux%E5%86%85%E6%A0%B82-0/%E4%BB%BB%E5%8A%A1%E7%AE%A1%E7%90%86tss%E6%8F%8F%E8%BF%B0%E7%AC%A6.jpg" alt><br><img src="/2020/04/16/linux%E5%86%85%E6%A0%B82-0/%E4%BB%BB%E5%8A%A1%E7%AE%A1%E7%90%86%E4%BB%BB%E5%8A%A1%E5%AF%84%E5%AD%98%E5%99%A8.jpg" alt><br><img src="/2020/04/16/linux%E5%86%85%E6%A0%B82-0/%E4%BB%BB%E5%8A%A1%E7%AE%A1%E7%90%86%E4%BB%BB%E5%8A%A1%E9%97%A8%E6%8F%8F%E8%BF%B0%E7%AC%A6.jpg" alt></p><p><img src="/2020/04/16/linux%E5%86%85%E6%A0%B82-0/%E4%BB%BB%E5%8A%A1%E7%AE%A1%E7%90%86%E4%BB%BB%E5%8A%A1%E9%93%BE.jpg" alt><br><img src="/2020/04/16/linux%E5%86%85%E6%A0%B82-0/%E4%BB%BB%E5%8A%A1%E7%AE%A1%E7%90%86%E4%BB%BB%E5%8A%A1%E9%93%BE2.jpg" alt><br>保护模式系统表：一个代码段和数据段的GDT，支持分页机制的页目录和页表，每个应用程序的段和LDT表段。<br>保护模式异常和中断初始化：如见初始化设置一个保护模式IDT，IDT门描述符，任务门，TSS以及相关代码，数据和堆栈段<br>分页机制初始化：控制寄存器CR0的PG标志设置。<br>多任务初始化：TSS及TSS段描述符。</p><h4 id="模式切换"><a href="#模式切换" class="headerlink" title="模式切换"></a>模式切换</h4><p><img src="/2020/04/16/linux%E5%86%85%E6%A0%B82-0/%E5%88%87%E6%8D%A2%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F.jpg" alt><br><img src="/2020/04/16/linux%E5%86%85%E6%A0%B82-0/%E5%88%87%E6%8D%A2%E5%AE%9E%E5%9C%B0%E5%9D%80%E6%A8%A1%E5%BC%8F.jpg" alt><br><img src="/2020/04/16/linux%E5%86%85%E6%A0%B82-0/%E5%88%87%E6%8D%A2%E5%AE%9E%E5%9C%B0%E5%9D%80%E6%A8%A1%E5%BC%8F2.jpg" alt></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;80x86保护模式及其编程&quot;&gt;&lt;a href=&quot;#80x86保护模式及其编程&quot; class=&quot;headerlink&quot; title=&quot;80x86保护模式及其编程&quot;&gt;&lt;/a&gt;80x86保护模式及其编程&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;-本书介绍的linux擦欧总系统基于
      
    
    </summary>
    
    
      <category term="Linux" scheme="https://cnawesome.github.io/categories/Linux/"/>
    
    
      <category term="Linux" scheme="https://cnawesome.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>linux内核1.0</title>
    <link href="https://cnawesome.github.io/2020/04/15/linux%E5%86%85%E6%A0%B81-0/"/>
    <id>https://cnawesome.github.io/2020/04/15/linux%E5%86%85%E6%A0%B81-0/</id>
    <published>2020-04-15T13:56:12.000Z</published>
    <updated>2020-05-24T09:47:28.126Z</updated>
    
    <content type="html"><![CDATA[<pre><code>---------- 再一次看内核书籍，这一次一定要努力看完</code></pre><h3 id="1-linux的由来"><a href="#1-linux的由来" class="headerlink" title="1.linux的由来"></a>1.linux的由来</h3><p>由unix，minix，gun计划，posix标准，internet网络发展过来。</p><p><img src="/2020/04/15/linux%E5%86%85%E6%A0%B81-0/%E5%86%85%E6%A0%B8%E7%89%88%E6%9C%AC.jpg" alt><br><img src="/2020/04/15/linux%E5%86%85%E6%A0%B81-0/%E5%86%85%E6%A0%B8%E7%89%88%E6%9C%AC2.jpg" alt></p><p><img src="/2020/04/15/linux%E5%86%85%E6%A0%B81-0/%E5%86%85%E6%A0%B8%E6%96%87%E4%BB%B6.jpg" alt><br>bootimage 是软盘印象image的引导启动文件。<br>包括磁盘引导扇区代码，操作系统加载程序和内核执行代码。</p><p>磁盘引导扇区代码：<br>    pc的ram bios启动-&gt;默认启动驱动器的引导扇区代码-&gt;操作系统加载程序和内核执行代码读入内存-&gt;操作系统加载程序进行初始化内核-&gt;最终加载陈旭把控制权交给内核代码</p><p>内核代码正常运行需要文件系统的支持。</p><p>rootimage 向内和提供基本的根文件系统。</p><p>这两个盘合起来相当于一个可启动的dos操作系统盘。</p><p>as86.tar.Z 是16位汇编器连接程序软件包<br>Ǆlinux-0.11.tar.Z 压缩的内核源代码</p><p><img src="/2020/04/15/linux%E5%86%85%E6%A0%B81-0/linnux%E7%9B%AE%E5%BD%95.jpg" alt><br><img src="/2020/04/15/linux%E5%86%85%E6%A0%B81-0/linux%E5%8F%82%E8%80%83%E7%9A%84%E4%B9%A6.jpg" alt><br><img src="/2020/04/15/linux%E5%86%85%E6%A0%B81-0/linux%E8%AF%9E%E7%94%9F.jpg" alt></p><h3 id="微型计算机组成结构"><a href="#微型计算机组成结构" class="headerlink" title="微型计算机组成结构"></a>微型计算机组成结构</h3><h4 id="i-o端口寻址"><a href="#i-o端口寻址" class="headerlink" title="i/o端口寻址"></a>i/o端口寻址</h4><p>cpu访问i/o接口控制器或其上的信息，需要首先指定他们的地址。这种地址成为i/o端口</p><p>i/o控制器 包含：访问数据的数据端口，输出命令的命令端口，访问控制器状态的状态端口。</p><p>端口地址的设置方法：1.统一编制：2.独立编址<br><img src="/2020/04/15/linux%E5%86%85%E6%A0%B81-0/%E7%AB%AF%E5%8F%A3%E7%BB%9F%E4%B8%80%E7%BC%96%E5%9D%80.jpg" alt><br><img src="/2020/04/15/linux%E5%86%85%E6%A0%B81-0/%E7%AB%AF%E5%8F%A3%E7%8B%AC%E7%AB%8B%E7%BC%96%E5%9D%80.jpg" alt></p><p>Linux下 在/proc/ioports 可以查看相关控制器或设置使用的i/o地址范围</p><h4 id="接口访问控制"><a href="#接口访问控制" class="headerlink" title="接口访问控制"></a>接口访问控制</h4><p>pc机接口数据传输控制方式：<br>    1.程序循环查询方式<br>    2.中断处理方式<br>    3.DMA传输方式</p><p><img src="/2020/04/15/linux%E5%86%85%E6%A0%B81-0/%E4%B8%AD%E6%96%AD%E5%A4%84%E7%90%86%E6%96%B9%E5%BC%8F.jpg" alt></p><h3 id="主存，bios和cmos存储器"><a href="#主存，bios和cmos存储器" class="headerlink" title="主存，bios和cmos存储器"></a>主存，bios和cmos存储器</h3><h4 id="主存"><a href="#主存" class="headerlink" title="主存"></a>主存</h4><p>计算机上电-&gt;内存地址初始化（除去0xA0000到0xFFFFF 640K到1M 和  0xFFFE0000 到0xFFFFFFFF 4g处的最后一64k，这两个区域特定用于i/o设备和bios程序）</p><p><img src="/2020/04/15/linux%E5%86%85%E6%A0%B81-0/at%E5%86%85%E5%AD%98%E4%BD%BF%E7%94%A8%E5%8C%BA%E5%9F%9F.jpg" alt></p><h4 id="bios"><a href="#bios" class="headerlink" title="bios"></a>bios</h4><p><img src="/2020/04/15/linux%E5%86%85%E6%A0%B81-0/bios.jpg" alt><br>计算机上电-&gt; 内存地址初始化-&gt; cpu自动把代码段寄存器cs设置为0xF000，段基地址为 0xFFFF0000，段长度为64kb-&gt; ip=0xFFF0,cpu代码指向 0xFFFFFFF0 ，系统ram bios程序存放位置-&gt; bios在该位置存放一条jmp跳转指令转入bios内开始执行-&gt; bios执行初始化后将bios代码与数据复制到内存低端1M末端的64k处-&gt; 跳转到该位置让cpu静茹真正的实地址模式工作-&gt; 将操作系统引导程序加载到内存0x7c00处，继续执行引导程序<br><img src="/2020/04/15/linux%E5%86%85%E6%A0%B81-0/bios%E6%89%A7%E8%A1%8C.jpg" alt></p><h4 id="cmos"><a href="#cmos" class="headerlink" title="cmos"></a>cmos</h4><p>存储系统硬件信息和时钟信息</p><h3 id="控制器和控制卡"><a href="#控制器和控制卡" class="headerlink" title="控制器和控制卡"></a>控制器和控制卡</h3><p>—–2020.4.15</p><h4 id="中断控制器"><a href="#中断控制器" class="headerlink" title="中断控制器"></a>中断控制器</h4><p>ibm pc/at 80x86 兼容微机使用两片级联的8259A可编程中断控制芯片醉成中断控制器。如图2-6.</p><p><img src="/2020/04/15/linux%E5%86%85%E6%A0%B81-0/%E5%9B%BE2-6.jpg" alt></p><p>计算机初始化时，<br>    -&gt; rom bios 对两片8259芯片初始化<br>    -&gt; 同时，把15个中断优先级分配给时钟定时器，键盘，串行口，打印口，等设备控制器使用<br>    -&gt; 同时，在内存开始处0x000-0xFFF区域建立一个中断向量表。</p><p>linux对此做了重新的设置。</p><p><img src="/2020/04/15/linux%E5%86%85%E6%A0%B81-0/%E4%B8%AD%E6%96%AD%E5%90%91%E9%87%8F%E8%A1%A8%E5%88%9D%E5%A7%8B%E5%8C%96%E8%AE%BE%E7%BD%AE.jpg" alt></p><p><img src="/2020/04/15/linux%E5%86%85%E6%A0%B81-0/DMA%E6%8E%A7%E5%88%B6%E5%99%A8.jpg" alt><br><img src="/2020/04/15/linux%E5%86%85%E6%A0%B81-0/%E5%AE%9A%E6%97%B6%E6%8E%A7%E5%88%B6%E5%99%A8.jpg" alt></p><h4 id="键盘控制器"><a href="#键盘控制器" class="headerlink" title="键盘控制器"></a>键盘控制器</h4><p><img src="/2020/04/15/linux%E5%86%85%E6%A0%B81-0/%E9%94%AE%E7%9B%98%E6%8E%A7%E5%88%B6%E5%99%A8.jpg" alt><br>键盘控制器=键盘的键盘编码器+主机的键盘控制器</p><p>键盘编码器收集按键按下松开的状态信息（即扫描码）-&gt;  主机键盘控制器接收到键盘扫描码（11为的串行信息）后进行解码-&gt; 转换位pc/xt标准键盘兼容的系统扫描码-&gt; 通过中断控制器IRQ1引脚向cpu发送中断请求-&gt; 响应该中断请求后，调用键盘中断处理程序来读取控制器的xt键盘扫描码-&gt; 解码后把数据发送给操作系统的键盘数据队列中</p><h4 id="串行控制卡"><a href="#串行控制卡" class="headerlink" title="串行控制卡"></a>串行控制卡</h4><p><img src="/2020/04/15/linux%E5%86%85%E6%A0%B81-0/%E5%BC%82%E6%AD%A5%E9%80%9A%E4%BF%A1%E4%BC%A0%E8%BE%93.jpg" alt><br><img src="/2020/04/15/linux%E5%86%85%E6%A0%B81-0/%E4%B8%B2%E8%A1%8C%E6%8E%A7%E5%88%B6%E5%99%A8.jpg" alt></p><h4 id="磁盘控制器"><a href="#磁盘控制器" class="headerlink" title="磁盘控制器"></a>磁盘控制器</h4><p><img src="/2020/04/15/linux%E5%86%85%E6%A0%B81-0/%E7%A3%81%E7%9B%98.jpg" alt><br><img src="/2020/04/15/linux%E5%86%85%E6%A0%B81-0/%E7%A3%81%E7%9B%982.jpg" alt><br><img src="/2020/04/15/linux%E5%86%85%E6%A0%B81-0/%E7%A3%81%E7%9B%983.jpg" alt><br><img src="/2020/04/15/linux%E5%86%85%E6%A0%B81-0/%E7%A3%81%E7%9B%984.jpg" alt></p><h3 id="内核编程语言和环境（阅读源码的准备工作）"><a href="#内核编程语言和环境（阅读源码的准备工作）" class="headerlink" title="内核编程语言和环境（阅读源码的准备工作）"></a>内核编程语言和环境（阅读源码的准备工作）</h3><h4 id="as86汇编器"><a href="#as86汇编器" class="headerlink" title="as86汇编器"></a>as86汇编器</h4><p><img src="/2020/04/15/linux%E5%86%85%E6%A0%B81-0/as86%E6%B1%87%E7%BC%96%E5%99%A8%E4%BB%8B%E7%BB%8D.jpg" alt></p><p>as86汇编语句：赋值语句，伪操作符语句，机器指令语句<br>汇编器编译的产生的目标文件起码包含三个段或区：正文段，数据段，未初始化数据段</p><p>汇编如何实现读写操作，使用相应的寄存器，将数值存入寄存器，程序自动对其读写</p><p>简单的引导扇区启动程序：<br><img src="/2020/04/15/linux%E5%86%85%E6%A0%B81-0/as86%E6%B1%87%E7%BC%96bootsec%E5%AE%9E%E4%BE%8B.jpg" alt></p><p><img src="/2020/04/15/linux%E5%86%85%E6%A0%B81-0/as86%E6%B1%87%E7%BC%96bootsec%E5%AE%9E%E4%BE%8B%E8%A7%A3%E9%87%8A.jpg" alt><br><img src="/2020/04/15/linux%E5%86%85%E6%A0%B81-0/as86%E6%B1%87%E7%BC%96bootsec%E5%AE%9E%E4%BE%8B%E8%A7%A3%E9%87%8A2.jpg" alt><br><img src="/2020/04/15/linux%E5%86%85%E6%A0%B81-0/as86%E6%B1%87%E7%BC%96bootsec%E5%AE%9E%E4%BE%8B%E8%A7%A3%E9%87%8A3.jpg" alt><br><img src="/2020/04/15/linux%E5%86%85%E6%A0%B81-0/as86%E6%B1%87%E7%BC%96bootsec%E5%AE%9E%E4%BE%8B%E8%A7%A3%E9%87%8A4.jpg" alt><br><img src="/2020/04/15/linux%E5%86%85%E6%A0%B81-0/as86%E6%B1%87%E7%BC%96bootsec%E5%AE%9E%E4%BE%8B%E8%A7%A3%E9%87%8A5.jpg" alt></p><p><img src="/2020/04/15/linux%E5%86%85%E6%A0%B81-0/as86%E6%B1%87%E7%BC%96bootsec%E5%AE%9E%E4%BE%8B%E7%BC%96%E8%AF%91.jpg" alt><br><img src="/2020/04/15/linux%E5%86%85%E6%A0%B81-0/as86%E6%B1%87%E7%BC%96bootsec%E5%AE%9E%E4%BE%8B%E7%BC%96%E8%AF%91%E8%A7%A3%E9%87%8A.jpg" alt></p><h4 id="gun-as汇编器"><a href="#gun-as汇编器" class="headerlink" title="gun as汇编器"></a>gun as汇编器</h4><p><img src="/2020/04/15/linux%E5%86%85%E6%A0%B81-0/gas%E6%B1%87%E7%BC%96.jpg" alt><br><img src="/2020/04/15/linux%E5%86%85%E6%A0%B81-0/gas%E6%B1%87%E7%BC%96%E8%AF%AD%E6%B3%95.jpg" alt><br><img src="/2020/04/15/linux%E5%86%85%E6%A0%B81-0/gas%E6%B1%87%E7%BC%96%E8%AF%AD%E6%B3%951.jpg" alt><br>as汇编器有简单的预处理功能</p><h5 id="指令语句，操作数和寻址"><a href="#指令语句，操作数和寻址" class="headerlink" title="指令语句，操作数和寻址"></a>指令语句，操作数和寻址</h5><p><img src="/2020/04/15/linux%E5%86%85%E6%A0%B81-0/gas%E6%B1%87%E7%BC%96%E8%AF%AD%E6%B3%95%E6%8C%87%E4%BB%A4%E8%AF%AD%E5%8F%A5.jpg" alt><br><img src="/2020/04/15/linux%E5%86%85%E6%A0%B81-0/gas%E6%B1%87%E7%BC%96%E8%AF%AD%E6%B3%95%E6%93%8D%E4%BD%9C%E7%A0%81%E5%91%BD%E5%90%8D.jpg" alt><br><img src="/2020/04/15/linux%E5%86%85%E6%A0%B81-0/gas%E6%B1%87%E7%BC%96%E8%AF%AD%E6%B3%95%E6%93%8D%E4%BD%9C%E7%A0%81%E5%89%8D%E7%BC%80.jpg" alt><br><img src="/2020/04/15/linux%E5%86%85%E6%A0%B81-0/gas%E6%B1%87%E7%BC%96%E8%AF%AD%E6%B3%95%E8%B7%B3%E8%BD%AC%E6%8C%87%E4%BB%A4.jpg" alt><br><img src="/2020/04/15/linux%E5%86%85%E6%A0%B81-0/gas%E6%B1%87%E7%BC%96%E8%AF%AD%E6%B3%95%E5%8C%BA%E4%B8%8E%E9%87%8D%E5%AE%9A%E4%BD%8D.jpg" alt><br><img src="/2020/04/15/linux%E5%86%85%E6%A0%B81-0/gas%E6%B1%87%E7%BC%96%E8%AF%AD%E6%B3%95%E5%8C%BA%E4%B8%8E%E9%87%8D%E5%AE%9A%E4%BD%8D2.jpg" alt><br><img src="/2020/04/15/linux%E5%86%85%E6%A0%B81-0/gas%E6%B1%87%E7%BC%96%E8%AF%AD%E6%B3%95%E5%8C%BA%E4%B8%8E%E9%87%8D%E5%AE%9A%E4%BD%8D3.jpg" alt><br><img src="/2020/04/15/linux%E5%86%85%E6%A0%B81-0/gas%E6%B1%87%E7%BC%96%E8%AF%AD%E6%B3%95%E5%86%85%E5%AD%98%E5%BC%95%E7%94%A8.jpg" alt></p><p><img src="/2020/04/15/linux%E5%86%85%E6%A0%B81-0/gas%E6%B1%87%E7%BC%96%E5%91%BD%E4%BB%A4.jpg" alt><br><img src="/2020/04/15/linux%E5%86%85%E6%A0%B81-0/gas%E6%B1%87%E7%BC%96%E7%BC%96%E5%86%9916%E4%BD%8D.jpg" alt></p><p><img src="/2020/04/15/linux%E5%86%85%E6%A0%B81-0/ld%E4%BD%BF%E7%94%A8%E6%96%B9%E5%BC%8F.jpg" alt><br><img src="/2020/04/15/linux%E5%86%85%E6%A0%B81-0/ld%E8%BF%9E%E6%8E%A5%E5%99%A8%E5%8C%BA.jpg" alt><br><img src="/2020/04/15/linux%E5%86%85%E6%A0%B81-0/ld%E8%BF%9E%E6%8E%A5%E5%99%A8%E5%8C%BA2.jpg" alt><br><img src="/2020/04/15/linux%E5%86%85%E6%A0%B81-0/ld%E8%BF%9E%E6%8E%A5%E5%99%A8%E5%8C%BA%E4%B8%8E%E9%87%8D%E5%AE%9A%E4%BD%8D.jpg" alt></p><h3 id="c语言环境"><a href="#c语言环境" class="headerlink" title="c语言环境"></a>c语言环境</h3><p><img src="/2020/04/15/linux%E5%86%85%E6%A0%B81-0/c%E8%AF%AD%E8%A8%80%E5%B5%8C%E5%85%A5%E5%AF%84%E5%AD%98%E5%99%A8%E5%8F%98%E9%87%8F.jpg" alt><br><img src="/2020/04/15/linux%E5%86%85%E6%A0%B81-0/c%E8%AF%AD%E8%A8%80%E5%B5%8C%E5%85%A5%E6%B1%87%E7%BC%96.jpg" alt><br><img src="/2020/04/15/linux%E5%86%85%E6%A0%B81-0/c%E8%AF%AD%E8%A8%80%E5%B5%8C%E5%85%A5%E6%B1%87%E7%BC%96%E7%BB%84%E5%90%88%E8%AF%AD%E5%8F%A5.jpg" alt><br><img src="/2020/04/15/linux%E5%86%85%E6%A0%B81-0/c%E8%AF%AD%E8%A8%80%E7%BC%96%E8%AF%91%E8%BF%87%E7%A8%8B.jpg" alt></p><p><img src="/2020/04/15/linux%E5%86%85%E6%A0%B81-0/as86%E6%B1%87%E7%BC%96bootsec%E5%AE%9E%E4%BE%8B%E7%BC%96%E8%AF%91.jpg" alt><br><img src="/2020/04/15/linux%E5%86%85%E6%A0%B81-0/as86%E6%B1%87%E7%BC%96bootsec%E5%AE%9E%E4%BE%8B%E7%BC%96%E8%AF%91%E8%A7%A3%E9%87%8A.jpg" alt></p><p><img src="/2020/04/15/linux%E5%86%85%E6%A0%B81-0/%E6%B1%87%E7%BC%96%E8%B0%83%E7%94%A8c%E5%87%BD%E6%95%B01.jpg" alt><br><img src="/2020/04/15/linux%E5%86%85%E6%A0%B81-0/%E6%B1%87%E7%BC%96%E8%B0%83%E7%94%A8c%E5%87%BD%E6%95%B02.jpg" alt></p><p>汇编调用c函数，将参数入栈，call函数名即调用带有参数的函数</p><p>这里看的云里雾里的，不太行</p><h4 id="linux目标文件格式"><a href="#linux目标文件格式" class="headerlink" title="linux目标文件格式"></a>linux目标文件格式</h4><p>本书介绍:<br>    编译器申城目标文件结构-&gt; 链接器把目标文件模块组合，生成二进制可执行映像文件</p><pre><code>二进制代码文件image生成原理与过程</code></pre><p><img src="/2020/04/15/linux%E5%86%85%E6%A0%B81-0/linux%E7%9B%AE%E6%A0%87%E6%96%87%E4%BB%B6%E6%A0%BC%E5%BC%8F.jpg" alt><br><img src="/2020/04/15/linux%E5%86%85%E6%A0%B81-0/linux%E7%9B%AE%E6%A0%87%E6%96%87%E4%BB%B6%E6%A0%BC%E5%BC%8F2.jpg" alt></p><pre><code>执行头部分：包含有关整体结构信息。代码区：由编译器或汇编器生成的二进制指令代码和数据信息。数据区：由编译器或汇编器生成的数据信息。代码重定部分：含有供链接程序使用的记录数据。数据重定位部分：用于数据段重定位。符号表部分：同样含有供链接程序使用的记录数据。字符串表部分：含有与符号命相对应的字符串</code></pre><p><img src="/2020/04/15/linux%E5%86%85%E6%A0%B81-0/linux%E7%9B%AE%E6%A0%87%E6%96%87%E4%BB%B6%E6%A0%BC%E5%BC%8F3.jpg" alt><br><img src="/2020/04/15/linux%E5%86%85%E6%A0%B81-0/linux%E7%9B%AE%E6%A0%87%E6%96%87%E4%BB%B6%E6%A0%BC%E5%BC%8F4.jpg" alt></p><p><img src="/2020/04/15/linux%E5%86%85%E6%A0%B81-0/linux%E8%BF%9E%E6%8E%A5%E7%A8%8B%E5%BA%8F%E7%9A%84%E6%93%8D%E4%BD%9C.jpg" alt><br><img src="/2020/04/15/linux%E5%86%85%E6%A0%B81-0/linux%E8%BF%9E%E6%8E%A5%E7%A8%8B%E5%BA%8F%E7%9A%84%E6%93%8D%E4%BD%9C2.jpg" alt><br><img src="/2020/04/15/linux%E5%86%85%E6%A0%B81-0/linux%E8%BF%9E%E6%8E%A5%E7%A8%8B%E5%BA%8F%E7%9A%84%E6%93%8D%E4%BD%9C3.jpg" alt><br><img src="/2020/04/15/linux%E5%86%85%E6%A0%B81-0/linux%E8%BF%9E%E6%8E%A5%E7%A8%8B%E5%BA%8F%E7%9A%84%E6%93%8D%E4%BD%9C4.jpg" alt><br><img src="/2020/04/15/linux%E5%86%85%E6%A0%B81-0/linux%E8%BF%9E%E6%8E%A5%E7%A8%8B%E5%BA%8F%E7%9A%84%E6%93%8D%E4%BD%9C5.jpg" alt></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;pre&gt;&lt;code&gt;---------- 再一次看内核书籍，这一次一定要努力看完&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;1-linux的由来&quot;&gt;&lt;a href=&quot;#1-linux的由来&quot; class=&quot;headerlink&quot; title=&quot;1.linux的由来&quot;&gt;&lt;/a&gt;1.
      
    
    </summary>
    
    
      <category term="Linux" scheme="https://cnawesome.github.io/categories/Linux/"/>
    
    
      <category term="Linux" scheme="https://cnawesome.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>离散数学1.0</title>
    <link href="https://cnawesome.github.io/2020/04/15/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A61-0/"/>
    <id>https://cnawesome.github.io/2020/04/15/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A61-0/</id>
    <published>2020-04-15T03:20:36.000Z</published>
    <updated>2020-05-25T06:06:26.735Z</updated>
    
    <content type="html"><![CDATA[<h4 id="五个联结词"><a href="#五个联结词" class="headerlink" title="五个联结词"></a>五个联结词</h4><p>非 取反<br>合取-&gt;二进制与运算<br>析取-&gt;二进制或运算<br>蕴含-&gt;  p=q为1，p=0，q=1，为1，否则为0<br>等价-&gt; p=q,1;p!=q,0;</p><p>变元 p，q，r<br>常元 1,0</p><p>命题公式：任何一个变元，或变元组合</p><p><img src="/2020/04/15/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A61-0/%E7%9C%9F%E5%80%BC%E8%A1%A8.jpg" alt></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;五个联结词&quot;&gt;&lt;a href=&quot;#五个联结词&quot; class=&quot;headerlink&quot; title=&quot;五个联结词&quot;&gt;&lt;/a&gt;五个联结词&lt;/h4&gt;&lt;p&gt;非 取反&lt;br&gt;合取-&amp;gt;二进制与运算&lt;br&gt;析取-&amp;gt;二进制或运算&lt;br&gt;蕴含-&amp;gt;  p=q为1，p
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>ubuntu 操作</title>
    <link href="https://cnawesome.github.io/2020/04/08/ubuntu-%E6%93%8D%E4%BD%9C/"/>
    <id>https://cnawesome.github.io/2020/04/08/ubuntu-%E6%93%8D%E4%BD%9C/</id>
    <published>2020-04-08T10:21:30.000Z</published>
    <updated>2020-04-09T11:52:04.291Z</updated>
    
    <content type="html"><![CDATA[<h2 id="基本命令"><a href="#基本命令" class="headerlink" title="基本命令"></a>基本命令</h2><p>whoami 用来查看当前用户名</p><h3 id="安装软件"><a href="#安装软件" class="headerlink" title="安装软件"></a>安装软件</h3><p>APT管理软件：高级报管理工具</p><p>软件更新，升级<br>    sudo apt-get update 或者 sudo apt-get upgrade<br>软件安装<br>    sudo apt-get install 软件包名</p><p>软件删除<br>    sudo apt-get remove</p><p>搜索软件包<br>    sudo apt-get search 软件包名</p><p>显示该包的依赖信息<br>    sudo apt-get depends 软件包名</p><h4 id="dpkg-command"><a href="#dpkg-command" class="headerlink" title="dpkg command"></a>dpkg command</h4><p>安装dpkg命令：<br>    sudo dpkg -i deb 包名</p><p>shutdown 关机命令<br>    -t 告诉init多久后关机<br>    -r 重新启动<br>    -k 不是真正的关机，只是警告信息<br>    -h 关机后关闭电源</p><p>halt 命令 关闭系统</p><p>putty 远程登录<br>    pputty以中国远程登陆工具，功能强大</p><pre><code>1。在服务器端安装openssh-serveropenssh服务器组件sshd持续监听老子客户端工具的连接请求。在ubuntu安装 openssh-servesudo apt-get install opensssh-server2.客户端安装putty</code></pre><h2 id="ubuntu-文件管理"><a href="#ubuntu-文件管理" class="headerlink" title="ubuntu 文件管理"></a>ubuntu 文件管理</h2><p>在linux里，一切都看作文件<br>在linux中没有磁盘的逻辑分区，任何一种类的文件系统被创建后都需要挂载到某个特定的目录才能使用。</p><p>linux用磁盘块管理内存空间。磁盘块=超级节点+i-节点+数据块</p><p>cat命令：显示文件或追加文件<br>cat -n 编号输出文件<br>cat可以用于输出重定向，将现有的文件内容重定向到已有的文件。如果目标文件不存在，创建该文件。<br>    cat a1.txt&gt;a2.txt<br>    cat a1.txt&gt;&gt;a2.txt 表示追加重定向</p><p>more显示输出内容，根据窗口大小调整分页 </p><p>less 显示文件</p><p>head 显示文件前n行，不带选项时默认显示前10行<br>tail 显示文件后n行</p><p>echo 输出字符串到基本输出，在显示器的输出</p><h3 id="管道"><a href="#管道" class="headerlink" title="管道"></a>管道</h3><p>一个由标准输入</p><h3 id="linux-多用户"><a href="#linux-多用户" class="headerlink" title="linux 多用户"></a>linux 多用户</h3><p>liunx用户分类：<br>    1.超级用户<br>    2.系统用户（一些系统进程的使用名）<br>    3.普通用户</p><p>每一个用户都只能属于一个基本用户组，可以属于多个附加组。</p><p>quote 磁盘配额</p><p>物理内存时系统提供的内存大小。<br>linux的虚拟内存时利用磁盘空间的一块逻辑内存<br>用作虚拟内存的磁盘空间称为交换空间<br>swap时linux下的虚拟内存分区，作用是在物理内存使用完之后，将磁盘空间即swap分区当作内存来使用。</p><p>gcc 编译流程：预编译，编译，汇编（生成目标文件），链接（生成可执行文件）</p><p>gdb程序调试工具</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;基本命令&quot;&gt;&lt;a href=&quot;#基本命令&quot; class=&quot;headerlink&quot; title=&quot;基本命令&quot;&gt;&lt;/a&gt;基本命令&lt;/h2&gt;&lt;p&gt;whoami 用来查看当前用户名&lt;/p&gt;
&lt;h3 id=&quot;安装软件&quot;&gt;&lt;a href=&quot;#安装软件&quot; class=&quot;head
      
    
    </summary>
    
    
      <category term="linux" scheme="https://cnawesome.github.io/categories/linux/"/>
    
    
      <category term="linux" scheme="https://cnawesome.github.io/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>算法设计4.0</title>
    <link href="https://cnawesome.github.io/2020/04/02/%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A14-0/"/>
    <id>https://cnawesome.github.io/2020/04/02/%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A14-0/</id>
    <published>2020-04-02T13:11:58.000Z</published>
    <updated>2020-04-06T13:22:13.723Z</updated>
    
    <content type="html"><![CDATA[<h3 id="散列-hashing"><a href="#散列-hashing" class="headerlink" title="散列 hashing"></a>散列 hashing</h3><p><img src="/2020/04/02/%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A14-0/%E6%95%A3%E5%88%97%E5%8E%9F%E7%90%86.jpg" alt></p><p><img src="/2020/04/02/%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A14-0/%E6%95%A3%E5%88%97%E8%A1%A8%E5%AE%9E%E4%BE%8B.jpg" alt></p><p>三列表长度：90001</p><p>n/m ：装填因子</p><p><img src="/2020/04/02/%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A14-0/%E6%95%A3%E5%88%97%E8%A1%A8%E5%86%B2%E7%AA%81.jpg" alt></p><p>散列冲突处理方式：<br>    1.选择有效的散列函数<br>    2.多槽位<br>    3.</p><h4 id="散列函数"><a href="#散列函数" class="headerlink" title="散列函数"></a>散列函数</h4><p><img src="/2020/04/02/%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A14-0/%E6%95%A3%E5%88%97%E5%87%BD%E6%95%B0%E4%BB%BB%E5%8A%A1.jpg" alt><br><img src="/2020/04/02/%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A14-0/%E6%95%A3%E5%88%97%E5%87%BD%E6%95%B0%E9%99%A4%E4%BD%99%E6%B3%95.jpg" alt><br><img src="/2020/04/02/%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A14-0/%E6%95%A3%E5%88%97%E5%87%BD%E6%95%B0MAD%E6%B3%95.jpg" alt><br><img src="/2020/04/02/%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A14-0/%E6%95%A3%E5%88%97%E5%87%BD%E6%95%B0%E5%A4%9A%E9%A1%B9%E5%BC%8F%E6%B3%95.jpg" alt><br><img src="/2020/04/02/%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A14-0/%E6%95%A3%E5%88%97%E5%87%BD%E6%95%B0%E5%B9%B3%E6%96%B9%E5%8F%96%E4%B8%AD.jpg" alt><br><img src="/2020/04/02/%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A14-0/%E6%95%A3%E5%88%97%E5%87%BD%E6%95%B0%E6%8A%98%E5%8F%A0%E6%B3%95.jpg" alt><br><img src="/2020/04/02/%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A14-0/%E6%95%A3%E5%88%97%E5%87%BD%E6%95%B0%E4%BC%AA%E9%9A%8F%E6%9C%BA%E6%95%B0%E6%B3%95.jpg" alt></p><h4 id="多槽位"><a href="#多槽位" class="headerlink" title="多槽位"></a>多槽位</h4><p><img src="/2020/04/02/%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A14-0/%E6%95%A3%E5%88%97%E8%A1%A8%E5%86%B2%E7%AA%81.jpg" alt><br><img src="/2020/04/02/%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A14-0/%E6%95%A3%E5%88%97%E8%A1%A8%E5%86%B2%E7%AA%81%E5%A4%9A%E6%A7%BD%E4%BD%8D.jpg" alt><br><img src="/2020/04/02/%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A14-0/%E6%95%A3%E5%88%97%E8%A1%A8%E5%86%B2%E7%AA%81%E7%8B%AC%E7%AB%8B%E9%93%BE.jpg" alt><br><img src="/2020/04/02/%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A14-0/%E6%95%A3%E5%88%97%E8%A1%A8%E5%86%B2%E7%AA%81%E7%8B%AC%E7%AB%8B%E9%93%BE%E4%BC%98%E7%BC%BA%E7%82%B9.jpg" alt></p><h3 id="优先级队列"><a href="#优先级队列" class="headerlink" title="优先级队列"></a>优先级队列</h3><p><img src="/2020/04/02/%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A14-0/%E4%BC%98%E5%85%88%E7%BA%A7%E9%98%9F%E5%88%97.jpg" alt><br><img src="/2020/04/02/%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A14-0/%E4%BC%98%E5%85%88%E7%BA%A7%E9%98%9F%E5%88%97%E7%BB%93%E6%9E%84%E6%80%A7.jpg" alt><br><img src="/2020/04/02/%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A14-0/%E4%BC%98%E5%85%88%E7%BA%A7%E9%98%9F%E5%88%97%E5%A0%86%E5%BA%8F%E6%80%A7.jpg" alt><br><img src="/2020/04/02/%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A14-0/%E4%BC%98%E5%85%88%E7%BA%A7%E9%98%9F%E5%88%97%E4%BB%A3%E7%A0%81.jpg" alt></p><p>按优先级排序，需要一个优先级队列来实现</p><h4 id="完全二叉堆"><a href="#完全二叉堆" class="headerlink" title="完全二叉堆"></a>完全二叉堆</h4><p><img src="/2020/04/02/%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A14-0/%E4%BC%98%E5%85%88%E7%BA%A7%E9%98%9F%E5%88%97%E5%AE%8C%E5%85%A8%E4%BA%8C%E5%8F%89%E6%A0%91.jpg" alt><br><img src="/2020/04/02/%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A14-0/%E4%BC%98%E5%85%88%E7%BA%A7%E9%98%9F%E5%88%97%E5%AE%8C%E5%85%A8%E4%BA%8C%E5%8F%89%E5%A0%86%E4%BB%A3%E7%A0%81.jpg" alt></p><p><img src="/2020/04/02/%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A14-0/%E5%AE%8C%E5%85%A8%E4%BA%8C%E5%8F%89%E5%A0%86%E5%88%A0%E9%99%A4%E6%93%8D%E4%BD%9C.jpg" alt><br><img src="/2020/04/02/%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A14-0/%E5%AE%8C%E5%85%A8%E4%BA%8C%E5%8F%89%E5%A0%86%E5%88%A0%E9%99%A4%E6%93%8D%E4%BD%9C%E4%BB%A3%E7%A0%81.jpg" alt></p><p>删除操作：为什么不用左子树根节点？<br>如果用左子树根节点换根节点，也必然会出现顺序错误，在调整顺序的操作上比起用最后一个节点来说，多余了一些操作。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;散列-hashing&quot;&gt;&lt;a href=&quot;#散列-hashing&quot; class=&quot;headerlink&quot; title=&quot;散列 hashing&quot;&gt;&lt;/a&gt;散列 hashing&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;/2020/04/02/%E7%AE%97%E6%B3%
      
    
    </summary>
    
    
      <category term="算法" scheme="https://cnawesome.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="算法" scheme="https://cnawesome.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>c++笔记</title>
    <link href="https://cnawesome.github.io/2020/03/26/c-%E5%9F%BA%E7%A1%80/"/>
    <id>https://cnawesome.github.io/2020/03/26/c-%E5%9F%BA%E7%A1%80/</id>
    <published>2020-03-26T04:18:55.000Z</published>
    <updated>2020-04-19T15:08:24.750Z</updated>
    
    <content type="html"><![CDATA[<h3 id="define宏定义"><a href="#define宏定义" class="headerlink" title="define宏定义"></a>define宏定义</h3><p>ANSI标准五个预定义的宏名<br>    <strong>LINE</strong> 表示该行代码的所在行号<br>    <strong>FILE</strong> 表示源文件的文件名<br>    <strong>DATE</strong> 表示源文件被编译的日期，格式(月/日/年)<br>    <strong>TIME</strong> 表示源文件被编译成目标代码的时间，格式(时:分:秒)<br>    <strong>STDC</strong> 表示编译器是否标准，标准时表示常量1，非标准则表示其它数字</p><p>宏定义可以使用在函数身上：</p><pre><code>#define INFO(msg) info_debug(__FILE__, __LINE__, __DATE__, __TIME__, msg) void info_debug(const char* filename, int line, const char* date, const char* time, const char* msg){    printf_s(&quot;info_debug %s:%d (%s-%s):%s&quot;, filename, line, date, time, msg);}int main(){    INFO(&quot;Hello world!\n&quot;);    system(&quot;pause&quot;);    return 0;}</code></pre><p>宏定义的细节<br>    1）对于有参数的宏定义，宏定义时，在宏名与带参数的括号之间不应加空格，否则将空格以后的字符都作为替代字符串的一部分。<br>    2）带参数的宏定义只是进行简单的字符替换，宏展开则是在编译前进行的，在展开时并不分配内存单元，不进行值的传递处理，因此替换不会占用运行时间，只占用编译时间。<br>    3）宏不存在类型问题，宏名无类型，宏的参数也无类型，只是一个符号代表，展开时代入指定的字符串即可，宏定义时，字符串可以是任何类型的数据。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;define宏定义&quot;&gt;&lt;a href=&quot;#define宏定义&quot; class=&quot;headerlink&quot; title=&quot;define宏定义&quot;&gt;&lt;/a&gt;define宏定义&lt;/h3&gt;&lt;p&gt;ANSI标准五个预定义的宏名&lt;br&gt;    &lt;strong&gt;LINE&lt;/strong
      
    
    </summary>
    
    
      <category term="c++" scheme="https://cnawesome.github.io/categories/c/"/>
    
    
      <category term="c++" scheme="https://cnawesome.github.io/tags/c/"/>
    
  </entry>
  
  <entry>
    <title>错误集</title>
    <link href="https://cnawesome.github.io/2020/03/23/%E9%94%99%E8%AF%AF%E9%9B%86/"/>
    <id>https://cnawesome.github.io/2020/03/23/%E9%94%99%E8%AF%AF%E9%9B%86/</id>
    <published>2020-03-23T09:51:59.000Z</published>
    <updated>2020-03-23T13:29:22.255Z</updated>
    
    <content type="html"><![CDATA[<p>ifndef 的作用<br>    当有很多头文件时，一般都需要用它<br>    它可以防止头文件被一个源文件多次包含出现冲突<br>    不是防止两个源文件包含同一个头文件</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;ifndef 的作用&lt;br&gt;    当有很多头文件时，一般都需要用它&lt;br&gt;    它可以防止头文件被一个源文件多次包含出现冲突&lt;br&gt;    不是防止两个源文件包含同一个头文件&lt;/p&gt;

      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Android学习日记1.0</title>
    <link href="https://cnawesome.github.io/2020/03/21/Android%E5%AD%A6%E4%B9%A0%E6%97%A5%E8%AE%B01-0/"/>
    <id>https://cnawesome.github.io/2020/03/21/Android%E5%AD%A6%E4%B9%A0%E6%97%A5%E8%AE%B01-0/</id>
    <published>2020-03-21T03:33:43.000Z</published>
    <updated>2020-03-21T05:32:46.244Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/2020/03/21/Android%E5%AD%A6%E4%B9%A0%E6%97%A5%E8%AE%B01-0/newPJ.jpg" alt></p><p><img src="/2020/03/21/Android%E5%AD%A6%E4%B9%A0%E6%97%A5%E8%AE%B01-0/moudle.jpg.jpg" alt></p><p><img src="/2020/03/21/Android%E5%AD%A6%E4%B9%A0%E6%97%A5%E8%AE%B01-0/%E9%A1%B9%E7%9B%AE%E5%B8%83%E5%B1%80.jpg" alt><br><img src="/2020/03/21/Android%E5%AD%A6%E4%B9%A0%E6%97%A5%E8%AE%B01-0/manifest.jpg" alt></p><p><img src="/2020/03/21/Android%E5%AD%A6%E4%B9%A0%E6%97%A5%E8%AE%B01-0/mainactivity.jpg" alt></p><p><img src="/2020/03/21/Android%E5%AD%A6%E4%B9%A0%E6%97%A5%E8%AE%B01-0/r%E6%96%87%E4%BB%B6.jpg" alt><br>android R文件出现问题可以 clear 恢复。</p><p><img src="/2020/03/21/Android%E5%AD%A6%E4%B9%A0%E6%97%A5%E8%AE%B01-0/r%E6%96%87%E4%BB%B6%E8%A7%A3%E5%86%B3.jpg" alt></p><p>res/：包含应用资源，例如可绘制对象文件、布局文件和 UI 字符串。</p><p>raw/：用于存放各种原生资源(音频，视频，一些XML文件等)，我们可以通过openRawResource(int id)来获得资源的二进制流！其实和Assets差不多，不过这里面的资源会在R文件那里生成一个资源id而已。</p><p>AVD：安卓模拟器</p><p>viewgroup是抽象类，一般使用它的子类</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;/2020/03/21/Android%E5%AD%A6%E4%B9%A0%E6%97%A5%E8%AE%B01-0/newPJ.jpg&quot; alt&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/2020/03/21/Android%E5%AD%A6%E4%B9%
      
    
    </summary>
    
    
      <category term="Android" scheme="https://cnawesome.github.io/categories/Android/"/>
    
    
      <category term="Android" scheme="https://cnawesome.github.io/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>算法设计3.0</title>
    <link href="https://cnawesome.github.io/2020/03/19/%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A13-0/"/>
    <id>https://cnawesome.github.io/2020/03/19/%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A13-0/</id>
    <published>2020-03-19T05:06:32.000Z</published>
    <updated>2020-04-02T13:31:08.399Z</updated>
    
    <content type="html"><![CDATA[<h3 id="图"><a href="#图" class="headerlink" title="图"></a>图</h3><p><img src="/2020/03/19/%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A13-0/%E5%9B%BE%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%9C%AF%E8%AF%AD.jpg" alt><br>v 顶点 ，e 边<br>|v| 顶点个数 ，|e| 边数</p><p><img src="/2020/03/19/%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A13-0/%E6%97%A0%E5%90%91%E5%9B%BE.jpg" alt><br><img src="/2020/03/19/%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A13-0/%E6%9C%89%E5%90%91%E5%9B%BE.jpg" alt><br><img src="/2020/03/19/%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A13-0/%E6%9C%89%EF%BC%8C%E6%97%A0%E5%90%91%E5%9B%BE.jpg" alt></p><p><img src="/2020/03/19/%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A13-0/%E5%9B%BE%E7%9A%84%E8%B7%AF%E5%BE%84.jpg" alt></p><p><img src="/2020/03/19/%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A13-0/%E5%9B%BE%E7%9A%84%E6%A8%A1%E6%9D%BF%E7%B1%BB.jpg" alt></p><p><img src="/2020/03/19/%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A13-0/%E9%82%BB%E6%8E%A5%E7%9F%A9%E9%98%B5%E4%B8%8E%E5%85%B3%E8%81%94%E7%9F%A9%E9%98%B5.jpg" alt></p><p><img src="/2020/03/19/%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A13-0/%E9%A1%B6%E7%82%B9%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0.jpg" alt><br><img src="/2020/03/19/%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A13-0/%E8%BE%B9%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0.jpg" alt></p><p><img src="/2020/03/19/%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A13-0/%E5%9B%BE%E9%82%BB%E6%8E%A5%E7%9F%A9%E9%98%B5%E4%BB%A3%E7%A0%81.jpg" alt></p><p><img src="/2020/03/19/%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A13-0/%E9%A1%B6%E7%82%B9%E6%93%8D%E4%BD%9C.jpg" alt><br><img src="/2020/03/19/%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A13-0/%E9%A1%B6%E7%82%B9%E6%93%8D%E4%BD%9C%E5%85%B7%E4%BD%93.jpg" alt><br><img src="/2020/03/19/%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A13-0/%E9%A1%B6%E7%82%B9%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0.jpg" alt></p><p><img src="/2020/03/19/%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A13-0/%E5%9B%BE%E9%A1%B6%E7%82%B9%E6%8F%92%E5%85%A5%E4%BB%A3%E7%A0%81.jpg" alt></p><p><img src="/2020/03/19/%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A13-0/%E5%9B%BE%E9%A1%B6%E7%82%B9%E5%88%A0%E9%99%A4%E4%BB%A3%E7%A0%81.jpg" alt><br>在图中插入一个新的节点</p><p><img src="/2020/03/19/%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A13-0/%E5%9B%BE%E8%BE%B9%E6%8F%92%E5%85%A5%E4%BB%A3%E7%A0%81.jpg" alt><br><img src="/2020/03/19/%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A13-0/%E5%9B%BE%E8%BE%B9%E5%88%A0%E9%99%A4%E4%BB%A3%E7%A0%81.jpg" alt></p><h4 id="BFS-广度优先遍历"><a href="#BFS-广度优先遍历" class="headerlink" title="BFS 广度优先遍历"></a>BFS 广度优先遍历</h4><p>把图化为树，把非线性变为半线性。<br>正如把树通过遍历化为队列，把半线性化为了线性。</p><p><img src="/2020/03/19/%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A13-0/%E5%9B%BE%E7%9A%84BFS.jpg" alt></p><p>图的广度优先遍历类似与树的层次遍历。</p><p><img src="/2020/03/19/%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A13-0/%E5%9B%BE%E7%9A%84BFS%E4%BB%A3%E7%A0%81.jpg" alt><br><img src="/2020/03/19/%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A13-0/%E5%9B%BE%E7%9A%84BFS%E4%BB%A3%E7%A0%811.jpg" alt></p><p><img src="/2020/03/19/%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A13-0/%E5%9B%BE%E7%9A%84BFS%E8%BF%87%E7%A8%8B1.jpg" alt></p><p>简单的实现，不建议模仿</p><pre><code>void BFS(Graph g,int n){// 广度优先遍历    if(g.v[n].vs==UNDISCOVER||g.v[n].vs==DISCOVER){        g.v[n].vs=VISITED;    }    for (int i = 0; i &lt;MAX ; i++) //入栈相邻节点    {           if(g.e[i][n].hasEdge == 1 &amp;&amp; g.v[i].vs==UNDISCOVER){                g.v[i].vs=VISITED;                Vquene[k++]=i;           }    }    for (int j = k+1; j &lt; MAX; j++)    {        Vquene[j]=-1;    }    if(Vquene[0]!=-1){        printf(&quot;next node number:%d\n&quot;,Vquene[0]);        int num=Vquene[0];        for (int p = 0; p &lt;MAX; p++)        {            Vquene[p]=Vquene[p+1];        }        BFS(g,num);}</code></pre><p>按BFS广度优先遍历出来的节点到节点的距离时最短路径。</p><h4 id="DFS-深度优先搜索"><a href="#DFS-深度优先搜索" class="headerlink" title="DFS 深度优先搜索"></a>DFS 深度优先搜索</h4><p><img src="/2020/03/19/%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A13-0/DFS%E4%BB%8B%E7%BB%8D.jpg" alt></p><p><img src="/2020/03/19/%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A13-0/%E5%9B%BE%E7%9A%84DFS%E4%BB%A3%E7%A0%81.jpg" alt><br><img src="/2020/03/19/%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A13-0/%E5%9B%BE%E7%9A%84DFS%E4%BB%A3%E7%A0%81%E7%BB%86%E8%8A%82.jpg" alt></p><p>分为有向图和无向图的DFS</p><p>dTime 刚访问时间  Ftime 结束访问时间</p><h4 id="嵌套引理"><a href="#嵌套引理" class="headerlink" title="嵌套引理"></a>嵌套引理</h4><p>祖先节点 与 子孙节点的依据活跃期判断： 祖先的活跃期必然大于子孙的活跃期<br>连个节点无关，活跃期不相交<br><img src="/2020/03/19/%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A13-0/%E5%9B%BE%E7%9A%84dtime.jpg" alt><br><img src="/2020/03/19/%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A13-0/%E5%9B%BE%E7%9A%84%E6%B4%BB%E8%B7%83%E6%9C%9F%E7%9A%84%E5%BA%94%E7%94%A8.jpg" alt></p><h3 id="二叉搜索树"><a href="#二叉搜索树" class="headerlink" title="二叉搜索树"></a>二叉搜索树</h3><p><img src="/2020/03/19/%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A13-0/%E8%AF%8D%E6%9D%A1.jpg" alt><br><img src="/2020/03/19/%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A13-0/BST%E9%A1%BA%E5%BA%8F%E6%80%A7.jpg" alt></p><p><img src="/2020/03/19/%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A13-0/BST%E6%8E%A5%E5%8F%A3.jpg" alt></p><p><img src="/2020/03/19/%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A13-0/BST%E6%9F%A5%E6%89%BE%E5%9B%BE.jpg" alt><br><img src="/2020/03/19/%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A13-0/BST%E6%9F%A5%E6%89%BE%E4%BB%A3%E7%A0%81.jpg" alt><br><img src="/2020/03/19/%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A13-0/BST%E6%9F%A5%E6%89%BE%E6%8E%A5%E5%8F%A3%E5%9B%BE.jpg" alt></p><p><img src="/2020/03/19/%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A13-0/BST%E7%AD%89%E4%BB%B7.jpg" alt><br><img src="/2020/03/19/%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A13-0/BST%E7%AD%89%E4%BB%B7%E5%8F%98%E6%8D%A2%E5%9B%BE1.jpg" alt></p><p><img src="/2020/03/19/%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A13-0/BST%E6%8F%92%E5%85%A5%E8%BF%87%E7%A8%8B%E5%9B%BEjpg" alt><br><img src="/2020/03/19/%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A13-0/BST%E6%8F%92%E5%85%A5%E4%BB%A3%E7%A0%81.jpg" alt></p><p><img src="/2020/03/19/%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A13-0/BST%E5%88%A0%E9%99%A4%E6%A1%86%E6%9E%B6%E4%BB%A3%E7%A0%81.jpg" alt><br><img src="/2020/03/19/%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A13-0/BST%E5%88%A0%E9%99%A41%E5%9B%BE.jpg" alt><br><img src="/2020/03/19/%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A13-0/BST%E5%88%A0%E9%99%A41%E4%BB%A3%E7%A0%81.jpg" alt><br><img src="/2020/03/19/%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A13-0/BST%E5%88%A0%E9%99%A42%E5%9B%BE.jpg" alt><br><img src="/2020/03/19/%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A13-0/BST%E5%88%A0%E9%99%A42%E4%BB%A3%E7%A0%81.jpg" alt></p><h4 id="BBST-平衡二叉树"><a href="#BBST-平衡二叉树" class="headerlink" title="BBST 平衡二叉树"></a>BBST 平衡二叉树</h4><p>适度平衡准则，任何一个树节点在BBST外，都可以变换到BBST内部。</p><p><img src="/2020/03/19/%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A13-0/BST%E7%AD%89%E4%BB%B7.jpg" alt></p><p>####AVL树</p><p><img src="/2020/03/19/%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A13-0/avl%E6%8E%A5%E5%8F%A3.jpg" alt><br><img src="/2020/03/19/%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A13-0/avl%E5%A4%B1%E8%A1%A1.jpg" alt><br><img src="/2020/03/19/%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A13-0/avl%E5%B9%B3%E8%A1%A1%E5%9B%A0%E5%AD%90.jpg" alt><br><img src="/2020/03/19/%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A13-0/avlzigzag.jpg" alt><br><img src="/2020/03/19/%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A13-0/avl%E9%80%82%E5%BA%A6%E5%B9%B3%E8%A1%A1.jpg" alt><br><img src="/2020/03/19/%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A13-0/avl%E6%8F%92%E5%85%A5%E5%8D%95%E6%97%8B.jpg" alt><br><img src="/2020/03/19/%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A13-0/avl%E6%8F%92%E5%85%A5%E5%8F%8C%E6%97%8B.jpg" alt><br><img src="/2020/03/19/%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A13-0/avl%E6%8F%92%E5%85%A5%E5%AE%9E%E7%8E%B0.jpg" alt><br><img src="/2020/03/19/%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A13-0/avl%E5%88%A0%E9%99%A4%E5%8F%8C%E6%97%8B.jpg" alt><br><img src="/2020/03/19/%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A13-0/avl%E5%88%A0%E9%99%A4%E4%BB%A3%E7%A0%81.jpg" alt><br><img src="/2020/03/19/%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A13-0/avl%E6%A0%B8%E5%BF%83ro%E4%BB%A3%E7%A0%81.jpg" alt></p><p>拥有 链表和向量的特点，并且有很好的很低复杂度。</p><p>AVL中，一个节点的删除，只可能是一个节点失衡；而一个节点的插入，可能导致多个节点失衡。</p><p>####3+4重构</p><p><img src="/2020/03/19/%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A13-0/avl3+4%E7%AE%97%E6%B3%95.jpg" alt><br><img src="/2020/03/19/%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A13-0/avl3+4%E7%AE%97%E6%B3%95%E4%BB%A3%E7%A0%81.jpg" alt></p><h4 id="高级搜索树"><a href="#高级搜索树" class="headerlink" title="高级搜索树"></a>高级搜索树</h4><p>伸张树：为了更宽松的使用avl的性质。</p><p><img src="/2020/03/19/%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A13-0/%E4%BC%B8%E5%BC%A0%E6%A0%91%E8%87%AA%E9%80%82%E5%BA%94%E8%B0%83%E6%95%B4%E6%80%9D%E8%B7%AF.jpg" alt><br><img src="/2020/03/19/%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A13-0/%E4%BC%B8%E5%BC%A0%E6%A0%91%E5%B1%80%E9%83%A8%E6%80%A7.jpg" alt><br><img src="/2020/03/19/%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A13-0/%E4%BC%B8%E5%BC%A0%E6%A0%91%E6%9C%80%E5%9D%8F%E6%83%85%E5%86%B5.jpg" alt><br><img src="/2020/03/19/%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A13-0/%E4%BC%B8%E5%BC%A0%E6%A0%91%E5%8F%8C%E5%B1%82%E4%BC%B8%E5%BC%A0.jpg" alt><br><img src="/2020/03/19/%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A13-0/%E4%BC%B8%E5%BC%A0%E6%A0%91%E5%8F%8C%E5%B1%82%E4%BC%B8%E5%BC%A01.jpg" alt><br><img src="/2020/03/19/%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A13-0/%E4%BC%B8%E5%BC%A0%E6%A0%91%E5%8F%8C%E5%B1%82%E4%BC%B8%E5%BC%A02.jpg" alt><br><img src="/2020/03/19/%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A13-0/%E4%BC%B8%E5%BC%A0%E6%A0%91%E5%8F%8C%E5%B1%82%E4%BC%B8%E5%BC%A03.jpg" alt></p><p>伸张树自适应调整策略并非最佳策略</p><h4 id="B-TREE（高级搜索树）"><a href="#B-TREE（高级搜索树）" class="headerlink" title="B-TREE（高级搜索树）"></a>B-TREE（高级搜索树）</h4><p>原因：数据越来越多，让内存看起来越来越小</p><p>又称平衡多路搜索树</p><p><img src="/2020/03/19/%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A13-0/b%E6%A0%91%E5%A4%9A%E8%B7%AF%E5%B9%B3%E8%A1%A1.jpg" alt><br><img src="/2020/03/19/%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A13-0/b%E6%A0%91%E8%8A%82%E7%82%B9.jpg" alt><br><img src="/2020/03/19/%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A13-0/b%E6%A0%91%E9%98%B6%E6%95%B0.jpg" alt><br><img src="/2020/03/19/%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A13-0/b%E6%A0%91%E6%9F%A5%E8%AF%A2%E6%95%88%E6%9E%9C.jpg" alt><br><img src="/2020/03/19/%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A13-0/b%E6%A0%91%E7%B4%A7%E5%87%91%E8%A1%A8%E7%A4%BA.jpg" alt><br><img src="/2020/03/19/%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A13-0/b%E6%A0%91%E6%9F%A5%E6%89%BE%E7%AE%97%E6%B3%95.jpg" alt><br><img src="/2020/03/19/%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A13-0/b%E6%A0%91%E6%9C%80%E5%B0%8F%E6%A0%91%E9%AB%98.jpg" alt><br><img src="/2020/03/19/%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A13-0/b%E6%A0%91%E6%9C%80%E5%A4%A7%E6%A0%91%E9%AB%98.jpg" alt><br><img src="/2020/03/19/%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A13-0/b%E6%A0%91%E6%9F%A5%E6%89%BE%E7%AE%97%E6%B3%95.jpg" alt><br><img src="/2020/03/19/%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A13-0/b%E6%A0%91.jpg" alt><br>利用向量来表示<br><img src="/2020/03/19/%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A13-0/b%E6%A0%91tree%E4%BB%A3%E7%A0%81.jpg" alt><br><img src="/2020/03/19/%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A13-0/b%E6%A0%91%E6%9F%A5%E6%89%BE%E7%AE%97%E6%B3%95%E4%BB%A3%E7%A0%81jpg" alt><br><img src="/2020/03/19/%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A13-0/b%E6%A0%91%E6%9F%A5%E6%89%BE%E5%A4%B1%E8%B4%A5.jpg" alt><br>b树的查找失败，必然是在外部的叶子节点。</p><p><img src="/2020/03/19/%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A13-0/b%E6%A0%91%E5%88%A0%E9%99%A4%E7%AE%97%E6%B3%95%E4%BB%A3%E7%A0%81.jpg" alt><br><img src="/2020/03/19/%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A13-0/b%E6%A0%91%E5%88%86%E8%A3%82.jpg" alt><br><img src="/2020/03/19/%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A13-0/b%E6%A0%91%E4%B8%8B%E6%BA%A2%E6%97%8B%E8%BD%AC.jpg" alt><br><img src="/2020/03/19/%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A13-0/b%E6%A0%91%E4%B8%8B%E6%BA%A2%E5%90%88%E5%B9%B6.jpg" alt></p><h4 id="红黑树（高级搜索树）"><a href="#红黑树（高级搜索树）" class="headerlink" title="红黑树（高级搜索树）"></a>红黑树（高级搜索树）</h4><p><img src="/2020/03/19/%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A13-0/%E7%BA%A2%E9%BB%91%E6%A0%91%E4%B8%80%E8%87%B4%E6%80%A7%E7%BB%93%E6%9E%84.jpg" alt><br><img src="/2020/03/19/%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A13-0/%E7%BA%A2%E9%BB%91%E6%A0%91%E5%85%B3%E8%81%94%E6%80%A7.jpg" alt></p><p>目的：为了使各个版本的BST能更快的访问，更小的空间。</p><p><img src="/2020/03/19/%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A13-0/%E7%BA%A2%E9%BB%91%E6%A0%91%E5%85%B3%E8%81%94%E6%80%A7.jpg" alt><br><img src="/2020/03/19/%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A13-0/%E7%BA%A2%E9%BB%91%E6%A0%91%E7%BA%A2%E4%B8%8E%E9%BB%91.jpg" alt><br><img src="/2020/03/19/%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A13-0/%E7%BA%A2%E9%BB%91%E6%A0%91%E5%90%91%E4%B8%8A%E6%8F%90%E5%8D%87.jpg" alt><br><img src="/2020/03/19/%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A13-0/%E7%BA%A2%E9%BB%91%E6%A0%91%E5%90%91%E4%B8%8A%E6%8F%90%E5%8D%871.jpg" alt><br>红色节点向上提升与黑节点平齐。<br><img src="/2020/03/19/%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A13-0/%E7%BA%A2%E9%BB%91%E6%A0%9124%E6%A0%91.jpg" alt><br><img src="/2020/03/19/%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A13-0/%E7%BA%A2%E9%BB%91%E6%A0%91%E6%8E%A5%E5%8F%A3%E5%AE%9A%E4%B9%89.jpg" alt></p><p>红黑树的变化要依赖于b树的结构</p><p><img src="/2020/03/19/%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A13-0/%E7%BA%A2%E9%BB%91%E6%A0%91%E6%8F%92%E5%85%A51.jpg" alt><br><img src="/2020/03/19/%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A13-0/%E7%BA%A2%E9%BB%91%E6%A0%91%E6%8F%92%E5%85%A52.jpg" alt><br><img src="/2020/03/19/%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A13-0/%E7%BA%A2%E9%BB%91%E6%A0%91%E6%8F%92%E5%85%A52%E5%8F%8C%E7%BA%A2%E7%BC%BA%E9%99%B7.jpg" alt><br><img src="/2020/03/19/%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A13-0/%E7%BA%A2%E9%BB%91%E6%A0%91%E6%8F%92%E5%85%A53%E5%9F%BA%E6%9C%AC%E6%A1%86%E6%9E%B6%E4%BB%A3%E7%A0%81.jpg" alt><br><img src="/2020/03/19/%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A13-0/%E7%BA%A2%E9%BB%91%E6%A0%91%E6%8F%92%E5%85%A54%E5%8F%8C%E7%BA%A2%E7%BC%BA%E9%99%B7%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%881.jpg" alt><br><img src="/2020/03/19/%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A13-0/%E7%BA%A2%E9%BB%91%E6%A0%91%E6%8F%92%E5%85%A54%E5%8F%8C%E7%BA%A2%E7%BC%BA%E9%99%B7%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%881.jpg" alt><br><img src="/2020/03/19/%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A13-0/%E7%BA%A2%E9%BB%91%E6%A0%91%E6%8F%92%E5%85%A55%E5%8F%8C%E7%BA%A2%E7%BC%BA%E9%99%B7%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%881.jpg" alt><br><img src="/2020/03/19/%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A13-0/%E7%BA%A2%E9%BB%91%E6%A0%91%E6%8F%92%E5%85%A56%E5%8F%8C%E7%BA%A2%E7%BC%BA%E9%99%B7%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%882.jpg" alt><br><img src="/2020/03/19/%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A13-0/%E7%BA%A2%E9%BB%91%E6%A0%91%E6%8F%92%E5%85%A57%E5%8F%8C%E7%BA%A2%E4%BF%AE%E6%AD%A3%E6%B5%81%E7%A8%8B%E5%9B%BE.jpg" alt></p><p><img src="/2020/03/19/%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A13-0/%E7%BA%A2%E9%BB%91%E6%A0%91%E5%88%A0%E9%99%A41.jpg" alt><br><img src="/2020/03/19/%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A13-0/%E7%BA%A2%E9%BB%91%E6%A0%91%E5%88%A0%E9%99%A42.jpg" alt><br><img src="/2020/03/19/%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A13-0/%E7%BA%A2%E9%BB%91%E6%A0%91%E5%88%A0%E9%99%A42%E5%8F%8C%E9%BB%91%E7%BC%BA%E9%99%B7.jpg" alt><br><img src="/2020/03/19/%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A13-0/%E7%BA%A2%E9%BB%91%E6%A0%91%E5%88%A0%E9%99%A42%E5%8F%8C%E9%BB%91%E7%BC%BA%E9%99%B71.jpg" alt><br><img src="/2020/03/19/%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A13-0/%E7%BA%A2%E9%BB%91%E6%A0%91%E5%88%A0%E9%99%A42%E5%8F%8C%E9%BB%91%E7%BC%BA%E9%99%B72.jpg" alt><br><img src="/2020/03/19/%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A13-0/%E7%BA%A2%E9%BB%91%E6%A0%91%E5%88%A0%E9%99%A42%E5%8F%8C%E9%BB%91%E7%BC%BA%E9%99%B73.jpg" alt><br><img src="/2020/03/19/%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A13-0/%E7%BA%A2%E9%BB%91%E6%A0%91%E5%88%A0%E9%99%A43%E5%8F%8C%E9%BB%91%E7%BC%BA%E9%99%B71.jpg" alt><br><img src="/2020/03/19/%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A13-0/%E7%BA%A2%E9%BB%91%E6%A0%91%E5%88%A0%E9%99%A43%E5%8F%8C%E9%BB%91%E7%BC%BA%E9%99%B72.jpg" alt><br><img src="/2020/03/19/%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A13-0/%E7%BA%A2%E9%BB%91%E6%A0%91%E5%88%A0%E9%99%A44%E5%8F%8C%E9%BB%91%E7%BC%BA%E9%99%B71.jpg" alt></p><h3 id="end-at-2019-4-2"><a href="#end-at-2019-4-2" class="headerlink" title="end at 2019.4.2"></a>end at 2019.4.2</h3>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;图&quot;&gt;&lt;a href=&quot;#图&quot; class=&quot;headerlink&quot; title=&quot;图&quot;&gt;&lt;/a&gt;图&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;/2020/03/19/%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A13-0/%E5%9B%BE%E7
      
    
    </summary>
    
    
      <category term="算法" scheme="https://cnawesome.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="算法" scheme="https://cnawesome.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>vscode配置编译环境</title>
    <link href="https://cnawesome.github.io/2020/03/18/vscode%E9%85%8D%E7%BD%AE%E7%BC%96%E8%AF%91%E7%8E%AF%E5%A2%83/"/>
    <id>https://cnawesome.github.io/2020/03/18/vscode%E9%85%8D%E7%BD%AE%E7%BC%96%E8%AF%91%E7%8E%AF%E5%A2%83/</id>
    <published>2020-03-18T09:05:53.000Z</published>
    <updated>2020-03-18T09:05:53.351Z</updated>
    
    <content type="html"><![CDATA[<hr>]]></content>
    
    <summary type="html">
    
      
      
        &lt;hr&gt;

      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>电路分析</title>
    <link href="https://cnawesome.github.io/2020/03/14/%E7%94%B5%E8%B7%AF%E5%88%86%E6%9E%90/"/>
    <id>https://cnawesome.github.io/2020/03/14/%E7%94%B5%E8%B7%AF%E5%88%86%E6%9E%90/</id>
    <published>2020-03-14T03:18:32.000Z</published>
    <updated>2020-04-20T13:37:49.910Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/2020/03/14/%E7%94%B5%E8%B7%AF%E5%88%86%E6%9E%90/%E4%BD%95%E4%B8%BA%E7%94%B5%E8%B7%AF.jpg" alt><br><img src="/2020/03/14/%E7%94%B5%E8%B7%AF%E5%88%86%E6%9E%90/%E7%90%86%E6%83%B3%E5%85%83%E4%BB%B6.jpg" alt></p><p>一个电路可能有不同的电路模型<br><img src="/2020/03/14/%E7%94%B5%E8%B7%AF%E5%88%86%E6%9E%90/%E4%B8%8D%E5%90%8C%E7%94%B5%E8%B7%AF%E7%B1%BB%E5%9E%8B%E4%B8%8D%E5%90%8C%E7%94%B5%E8%B7%AF.jpg" alt></p><p><img src="/2020/03/14/%E7%94%B5%E8%B7%AF%E5%88%86%E6%9E%90/%E5%8F%82%E6%95%B0%E7%94%B5%E8%B7%AF.jpg" alt><br>主要研究集总参数电路。</p><p><img src="/2020/03/14/%E7%94%B5%E8%B7%AF%E5%88%86%E6%9E%90/%E6%B3%A2%E6%AE%B5.jpg" alt></p><p><img src="/2020/03/14/%E7%94%B5%E8%B7%AF%E5%88%86%E6%9E%90/%E7%94%B5%E6%B5%81%E7%9A%84%E5%BD%A2%E6%88%90.jpg" alt></p><p><img src="/2020/03/14/%E7%94%B5%E8%B7%AF%E5%88%86%E6%9E%90/%E7%94%B5%E8%B7%AF%E4%B8%AD%E7%9A%84%E7%94%B5%E7%A3%81%E8%83%BD%E9%87%8F.jpg" alt></p><h4 id="电路分类："><a href="#电路分类：" class="headerlink" title="电路分类："></a>电路分类：</h4><p><img src="/2020/03/14/%E7%94%B5%E8%B7%AF%E5%88%86%E6%9E%90/%E5%8A%A8%E6%80%81%E7%94%B5%E9%98%BB.jpg" alt><br><img src="/2020/03/14/%E7%94%B5%E8%B7%AF%E5%88%86%E6%9E%90/%E6%9C%89%E6%BA%90%E6%97%A0%E6%BA%90.jpg" alt><br><img src="/2020/03/14/%E7%94%B5%E8%B7%AF%E5%88%86%E6%9E%90/%E6%97%B6%E5%8F%98%E6%97%B6%E4%B8%8D%E5%8F%98%E7%94%B5%E8%B7%AF.jpg" alt><br><img src="/2020/03/14/%E7%94%B5%E8%B7%AF%E5%88%86%E6%9E%90/%E7%BA%BF%E6%80%A7%E4%B8%8E%E9%9D%9E%E7%BA%BF%E6%80%A7%E7%94%B5%E8%B7%AF.jpg" alt></p><h4 id="电路变量"><a href="#电路变量" class="headerlink" title="电路变量"></a>电路变量</h4><p>为了定量描述电路性能，引入电路变量.<br>分为基本变量和复合变量<br><img src="/2020/03/14/%E7%94%B5%E8%B7%AF%E5%88%86%E6%9E%90/%E7%94%B5%E5%8E%8B%E7%9A%84%E5%AE%9A%E4%B9%89.jpg" alt></p><p><img src="/2020/03/14/%E7%94%B5%E8%B7%AF%E5%88%86%E6%9E%90/%E7%94%B5%E6%B5%81%E7%9A%84%E5%BD%A2%E6%88%90.jpg" alt><br><img src="/2020/03/14/%E7%94%B5%E8%B7%AF%E5%88%86%E6%9E%90/%E7%94%B5%E6%B5%81%E7%9A%84%E6%96%B9%E5%90%91.jpg" alt><br><img src="/2020/03/14/%E7%94%B5%E8%B7%AF%E5%88%86%E6%9E%90/%E7%94%B5%E6%B5%81%E7%9A%84%E5%A4%A7%E5%B0%8F.jpg" alt></p><p>基本变量如：电流，电压等。<br>复合变量如：功率，能量等。</p><p><img src="/2020/03/14/%E7%94%B5%E8%B7%AF%E5%88%86%E6%9E%90/%E5%85%B3%E8%81%94%E5%8F%82%E8%80%83%E6%96%B9%E5%90%91.jpg" alt></p><p>电路的实际方向不好确定，使用参考方向，参考方向可以任意指定。</p><p><img src="/2020/03/14/%E7%94%B5%E8%B7%AF%E5%88%86%E6%9E%90/%E5%8A%9F%E7%8E%87%E7%9A%84%E5%AE%9A%E4%B9%89.jpg" alt><br><img src="/2020/03/14/%E7%94%B5%E8%B7%AF%E5%88%86%E6%9E%90/%E5%8A%9F%E7%8E%87%E7%9A%84%E8%AE%A1%E7%AE%97.jpg" alt><br><img src="/2020/03/14/%E7%94%B5%E8%B7%AF%E5%88%86%E6%9E%90/%E8%83%BD%E9%87%8F%E8%AE%A1%E7%AE%97.jpg" alt><br>阻值和功率是电阻的属性。<br>超过电阻的额定功率会导致电阻损坏。</p><p><img src="/2020/03/14/%E7%94%B5%E8%B7%AF%E5%88%86%E6%9E%90/%E7%94%B5%E8%B7%AF%E5%90%B8%E6%94%B6%E4%B8%8E%E5%8F%91%E5%87%BA.jpg" alt><br><img src="/2020/03/14/%E7%94%B5%E8%B7%AF%E5%88%86%E6%9E%90/%E7%94%B5%E8%B7%AF%E7%94%B5%E9%98%BB%E5%90%B8%E6%94%B6%E4%B8%8E%E5%8F%91%E5%87%BA.jpg" alt><br>电阻不论是关联和非关联，都是吸收功率。</p><p><img src="/2020/03/14/%E7%94%B5%E8%B7%AF%E5%88%86%E6%9E%90/%E5%8F%97%E6%8E%A7%E6%BA%90%E6%98%AF%E5%90%A6%E4%B8%BA%E4%BA%8C%E7%AB%AF.jpg" alt></p><p><img src="/2020/03/14/%E7%94%B5%E8%B7%AF%E5%88%86%E6%9E%90/%E5%9F%BA%E5%B0%94%E9%9C%8D%E5%A4%AB%E6%9C%AF%E8%AF%AD.jpg" alt><br><img src="/2020/03/14/%E7%94%B5%E8%B7%AF%E5%88%86%E6%9E%90/%E5%9F%BA%E5%B0%94%E9%9C%8D%E5%A4%AB%E5%AE%9A%E5%BE%8B.jpg" alt></p><p><img src="/2020/03/14/%E7%94%B5%E8%B7%AF%E5%88%86%E6%9E%90/kvl.jpg" alt><br><img src="/2020/03/14/%E7%94%B5%E8%B7%AF%E5%88%86%E6%9E%90/%E5%B9%BF%E4%B9%89kvl.jpg" alt><br><img src="/2020/03/14/%E7%94%B5%E8%B7%AF%E5%88%86%E6%9E%90/%E5%B9%BF%E4%B9%89kcl.jpg" alt></p><p>###电阻等效变换</p><h4 id="2b法"><a href="#2b法" class="headerlink" title="2b法"></a>2b法</h4><p>列出所有原件方程，kcl方程，kvl方程<br><img src="/2020/03/14/%E7%94%B5%E8%B7%AF%E5%88%86%E6%9E%90/2b%E6%B3%95.jpg" alt><br><img src="/2020/03/14/%E7%94%B5%E8%B7%AF%E5%88%86%E6%9E%90/%E7%94%B5%E8%B7%AF%E7%94%B5%E9%98%BB%E5%90%B8%E6%94%B6%E4%B8%8E%E5%8F%91%E5%87%BA.jpg" alt></p><h3 id="电路的等效变换"><a href="#电路的等效变换" class="headerlink" title="电路的等效变换"></a>电路的等效变换</h3><p><img src="/2020/03/14/%E7%94%B5%E8%B7%AF%E5%88%86%E6%9E%90/%E7%AD%89%E6%95%88%E5%8F%98%E6%8D%A2.jpg" alt><br>0值电压源等效于0值电阻等效于短路</p><p><img src="/2020/03/14/%E7%94%B5%E8%B7%AF%E5%88%86%E6%9E%90/%E4%B8%B2%E5%B9%B6%E8%81%94.jpg" alt><br><img src="/2020/03/14/%E7%94%B5%E8%B7%AF%E5%88%86%E6%9E%90/%E7%94%B5%E9%98%BB%E5%85%83%E4%BB%B6%E4%B8%B2%E8%81%94.jpg" alt></p><p><img src="/2020/03/14/%E7%94%B5%E8%B7%AF%E5%88%86%E6%9E%90/%E7%94%B5%E9%98%BB%E5%85%83%E4%BB%B6%E5%B9%B6%E8%81%94.jpg" alt></p><pre><code>---2020/4/10</code></pre><h4 id="y型电路和三角形电路"><a href="#y型电路和三角形电路" class="headerlink" title="y型电路和三角形电路"></a>y型电路和三角形电路</h4><p><img src="/2020/03/14/%E7%94%B5%E8%B7%AF%E5%88%86%E6%9E%90/y%E5%9E%8B%E5%92%8C%E4%B8%89%E8%A7%92%E5%BD%A2%E7%94%B5%E8%B7%AF.jpg" alt><br><img src="/2020/03/14/%E7%94%B5%E8%B7%AF%E5%88%86%E6%9E%90/y%E5%9E%8B%E5%92%8C%E4%B8%89%E8%A7%92%E5%BD%A2%E7%94%B5%E8%B7%AF%E7%AD%89%E6%95%88%E6%8E%A8%E5%AF%BC.jpg" alt><br><img src="/2020/03/14/%E7%94%B5%E8%B7%AF%E5%88%86%E6%9E%90/y%E5%9E%8B%E5%92%8C%E4%B8%89%E8%A7%92%E5%BD%A2%E7%94%B5%E8%B7%AF%E7%AD%89%E6%95%88%E6%8E%A8%E5%AF%BC2.jpg" alt><br><img src="/2020/03/14/%E7%94%B5%E8%B7%AF%E5%88%86%E6%9E%90/y%E5%9E%8B%E5%92%8C%E4%B8%89%E8%A7%92%E5%BD%A2%E7%94%B5%E8%B7%AF%E7%9A%84%E5%8F%98%E6%8D%A2.jpg" alt></p><h3 id="电压等效变换"><a href="#电压等效变换" class="headerlink" title="电压等效变换"></a>电压等效变换</h3><p><img src="/2020/03/14/%E7%94%B5%E8%B7%AF%E5%88%86%E6%9E%90/%E7%90%86%E6%83%B3%E7%8B%AC%E7%AB%8B%E6%BA%90%E7%9A%84%E4%B8%B2%E8%81%94.jpg" alt><br><img src="/2020/03/14/%E7%94%B5%E8%B7%AF%E5%88%86%E6%9E%90/%E7%90%86%E6%83%B3%E7%8B%AC%E7%AB%8B%E6%BA%90%E7%9A%84%E5%B9%B6%E8%81%94.jpg" alt><br><img src="/2020/03/14/%E7%94%B5%E8%B7%AF%E5%88%86%E6%9E%90/%E5%AE%9E%E9%99%85%E7%8B%AC%E7%AB%8B%E6%BA%90%E7%9A%84%E7%AD%89%E6%95%88%E8%A1%A8%E6%8D%A2.jpg" alt><br><img src="/2020/03/14/%E7%94%B5%E8%B7%AF%E5%88%86%E6%9E%90/%E5%AE%9E%E9%99%85%E7%8B%AC%E7%AB%8B%E6%BA%90%E7%9A%84%E7%AD%89%E6%95%88%E5%8F%98%E6%8D%A22.jpg" alt><br><img src="/2020/03/14/%E7%94%B5%E8%B7%AF%E5%88%86%E6%9E%90/%E5%AE%9E%E9%99%85%E7%8B%AC%E7%AB%8B%E6%BA%90%E7%9A%84%E7%AD%89%E6%95%88%E5%8F%98%E6%8D%A23.jpg" alt></p><p>求和电路源串联的电压源的电流时，电压源的电流看作0.</p><h4 id="运算放大器"><a href="#运算放大器" class="headerlink" title="运算放大器"></a>运算放大器</h4><p><img src="/2020/03/14/%E7%94%B5%E8%B7%AF%E5%88%86%E6%9E%90/%E8%BF%90%E7%AE%97%E6%94%BE%E5%A4%A7%E5%99%A8%E7%89%B9%E6%80%A7.jpg" alt><br><img src="/2020/03/14/%E7%94%B5%E8%B7%AF%E5%88%86%E6%9E%90/%E8%BF%90%E7%AE%97%E6%94%BE%E5%A4%A7%E5%99%A8%E8%B4%9F%E5%8F%8D%E9%A6%88.jpg" alt></p><p>在特定的情况下，只能用加压求流，或加流求压。</p><pre><code>----2020/4/14</code></pre><h4 id="二端口"><a href="#二端口" class="headerlink" title="二端口"></a>二端口</h4><p><img src="/2020/03/14/%E7%94%B5%E8%B7%AF%E5%88%86%E6%9E%90/%E4%BA%8C%E7%AB%AF%E5%8F%A3.jpg" alt><br><img src="/2020/03/14/%E7%94%B5%E8%B7%AF%E5%88%86%E6%9E%90/%E4%BA%92%E6%98%93%E4%BA%8C%E7%AB%AF%E5%8F%A3.jpg" alt><br><img src="/2020/03/14/%E7%94%B5%E8%B7%AF%E5%88%86%E6%9E%90/%E5%AF%B9%E7%A7%B0%E4%BA%8C%E7%AB%AF%E5%8F%A3.jpg" alt></p><pre><code>----2020/4/20</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;/2020/03/14/%E7%94%B5%E8%B7%AF%E5%88%86%E6%9E%90/%E4%BD%95%E4%B8%BA%E7%94%B5%E8%B7%AF.jpg&quot; alt&gt;&lt;br&gt;&lt;img src=&quot;/2020/03/14/%E7%94
      
    
    </summary>
    
    
      <category term="程序人生" scheme="https://cnawesome.github.io/categories/%E7%A8%8B%E5%BA%8F%E4%BA%BA%E7%94%9F/"/>
    
    
      <category term="程序人生" scheme="https://cnawesome.github.io/tags/%E7%A8%8B%E5%BA%8F%E4%BA%BA%E7%94%9F/"/>
    
  </entry>
  
  <entry>
    <title>普通生物学</title>
    <link href="https://cnawesome.github.io/2020/03/14/%E6%99%AE%E9%80%9A%E7%94%9F%E7%89%A9%E5%AD%A6/"/>
    <id>https://cnawesome.github.io/2020/03/14/%E6%99%AE%E9%80%9A%E7%94%9F%E7%89%A9%E5%AD%A6/</id>
    <published>2020-03-13T23:04:35.000Z</published>
    <updated>2020-03-29T12:24:43.727Z</updated>
    
    <content type="html"><![CDATA[<h3 id="生物膜的特性"><a href="#生物膜的特性" class="headerlink" title="生物膜的特性"></a>生物膜的特性</h3><p>1.生物膜具有流动性<br>2.膜蛋白分布不对称<br><img src="/2020/03/14/%E6%99%AE%E9%80%9A%E7%94%9F%E7%89%A9%E5%AD%A6/%E7%94%9F%E7%89%A9%E8%86%9C.jpg" alt><br><img src="/2020/03/14/%E6%99%AE%E9%80%9A%E7%94%9F%E7%89%A9%E5%AD%A6/%E7%94%9F%E7%89%A9%E8%86%9C%E7%9A%84%E7%BB%84%E6%88%90.jpg" alt><br>生物膜处于动态运动中</p><p><img src="/2020/03/14/%E6%99%AE%E9%80%9A%E7%94%9F%E7%89%A9%E5%AD%A6/%E7%94%9F%E7%89%A9%E8%86%9C%E7%9A%84%E8%9B%8B%E7%99%BD%E8%B4%A8.jpg" alt><br><img src="/2020/03/14/%E6%99%AE%E9%80%9A%E7%94%9F%E7%89%A9%E5%AD%A6/%E7%BB%86%E8%83%9E%E8%B4%A8%E5%9F%BA%E8%B4%A8.jpg" alt><br><img src="/2020/03/14/%E6%99%AE%E9%80%9A%E7%94%9F%E7%89%A9%E5%AD%A6/%E8%86%9C%E8%BD%AC%E8%BF%90%E8%9B%8B%E7%99%BD.jpg" alt></p><p>膜蛋白的作用：<br>    1.作为膜转运蛋白，选择性的介导小分子物质的跨膜运输。<br>    2.具有酶的功能<br>    3.作为细胞表面的受体，与激素结合之后将型号传递到胞内<br>    4.糖蛋白的糖链可有哦为细胞之间的识别标志。<br>    5.形成细胞之间的连接<br>    6。作为细胞骨架的连接点。</p><p><img src="/2020/03/14/%E6%99%AE%E9%80%9A%E7%94%9F%E7%89%A9%E5%AD%A6/%E8%86%9C%E8%BD%AC%E8%BF%90%E8%9B%8B%E7%99%BD.jpg" alt><br><img src="/2020/03/14/%E6%99%AE%E9%80%9A%E7%94%9F%E7%89%A9%E5%AD%A6/%E8%B7%A8%E8%86%9C%E8%BF%90%E8%BE%93%E7%AE%80%E5%8D%95%E6%89%A9%E6%95%A3.jpg" alt><br><img src="/2020/03/14/%E6%99%AE%E9%80%9A%E7%94%9F%E7%89%A9%E5%AD%A6/%E5%B0%8F%E5%88%86%E5%AD%90%E8%B7%A8%E8%86%9C%E8%BF%90%E8%BE%93.jpg" alt></p><p>载体蛋白：通过改变自身构件，转运</p><p>小分子的跨膜运输：<br>    简单扩散<br>    被动运输<br>    主动运输</p><h4 id="细胞连接"><a href="#细胞连接" class="headerlink" title="细胞连接"></a>细胞连接</h4><p>细胞间或细胞-基质见的接触部位形成特殊的连接结构，叫细胞连接。 </p><p><img src="/2020/03/14/%E6%99%AE%E9%80%9A%E7%94%9F%E7%89%A9%E5%AD%A6/%E7%BB%86%E8%83%9E%E8%BF%9E%E6%8E%A5%E6%96%B9%E5%BC%8F.jpg" alt><br><img src="/2020/03/14/%E6%99%AE%E9%80%9A%E7%94%9F%E7%89%A9%E5%AD%A6/%E7%BB%86%E8%83%9E%E8%BF%9E%E6%8E%A5%E6%96%B9%E5%BC%8F1.jpg" alt></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;生物膜的特性&quot;&gt;&lt;a href=&quot;#生物膜的特性&quot; class=&quot;headerlink&quot; title=&quot;生物膜的特性&quot;&gt;&lt;/a&gt;生物膜的特性&lt;/h3&gt;&lt;p&gt;1.生物膜具有流动性&lt;br&gt;2.膜蛋白分布不对称&lt;br&gt;&lt;img src=&quot;/2020/03/14/%E6%
      
    
    </summary>
    
    
      <category term="程序人生" scheme="https://cnawesome.github.io/categories/%E7%A8%8B%E5%BA%8F%E4%BA%BA%E7%94%9F/"/>
    
    
      <category term="程序人生" scheme="https://cnawesome.github.io/tags/%E7%A8%8B%E5%BA%8F%E4%BA%BA%E7%94%9F/"/>
    
  </entry>
  
  <entry>
    <title>Mybatis(1)</title>
    <link href="https://cnawesome.github.io/2020/03/11/Mybatis%E5%AD%A6%E4%B9%A0/"/>
    <id>https://cnawesome.github.io/2020/03/11/Mybatis%E5%AD%A6%E4%B9%A0/</id>
    <published>2020-03-11T13:08:33.228Z</published>
    <updated>2020-03-09T10:31:51.352Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Mybatis概述"><a href="#Mybatis概述" class="headerlink" title="Mybatis概述"></a>Mybatis概述</h3><p>什么是框架<br>框架是整个或部分系统的可重用设计，表现为一组抽象构件及抽象构件实例之间加护的方法。（抽象方法，或者实例方法）。<br>它是软件开发中解决问题的一套方案。</p><p>mybatis 持久层框架</p><p>springnvc 表现层框架</p><p>spring 不属于这三个框架</p><p>三层架构<br>        表现层：张世数据<br>        业务层：处理业务需求<br>        持久层：数据库交互 </p><p><img src="/2020/03/11/Mybatis%E5%AD%A6%E4%B9%A0/01%E4%B8%89%E5%B1%82%E6%9E%B6%E6%9E%84.png" alt></p><p>持久层技术解决方案<br>    jdbc技术：<br>            connection<br>            preparedstatement<br>            resultset<br>    jdbc开发不够便捷 </p><p>持久层连接数据库池过程<br>    1，加载驱动<br>    2，创建连接<br>    3，创建statement<br>    …</p><p><img src="/2020/03/11/Mybatis%E5%AD%A6%E4%B9%A0/02%E6%8C%81%E4%B9%85%E5%B1%82%E6%80%BB%E5%9B%BE.jpg" alt><br>Mybatis 通过xml或注解的方式 执行各种statment，并通过java对象和sql的动态参数进行映射形成最终sql语句，最后通过mabatis执行sql语句并返回。<br>利用ORM思想，对jdbc进行封装，屏蔽了jdbc api底层的访问问题</p><p>ORM （object relational  mapping）对象关系映射<br>即把数据库的表与实体类及实体类的属性对应起来，让我们可以操作实体类就实现数据表。</p><p>如何做到？<br>目前，我们需要把实体类的属性与数据库的字段名保持一致。</p><h3 id="Mybatis环境搭建"><a href="#Mybatis环境搭建" class="headerlink" title="Mybatis环境搭建"></a>Mybatis环境搭建</h3><p>1，创建maven工程，xml 添加依赖坐标（在官网上找依赖语句），同时写上数据库依赖，日志依赖，junit依赖等。<br>2，创建实体类<br>3，创建mybatis主配置文件（SqlMapConfig.xml）<br>4，创建映射配置文件(UserDao.xml)</p><p>环境搭建的注意事项:<br>1,创建UserDao.xml和UserDao.java是，名称是为了和我们之前的知识保持一致。在Mybatis中它把持久层的操作接口名称和映射文件也叫做：Mapper。所以UserDAO和UserMapper是一样的。</p><p>2.在idea创建目录是，它和包是不一样的 ，包创建时：comit.dao 是三级结构<br>    目录创建时 com.it.dao是一级目录。</p><p>3.mybatis的映射配置文件位置必须和dao接口的包结构相同。</p><p>4.映射文件的mapper标签namespace属性的取值必须是 dao接口的全限定类名。</p><p>5.映射配置文件的操作配置（select），id属性的取值必须是dao接口的方法类,resulttype取值为应用接口的对象。</p><p>作用：按3，4，5配置后，无需再写dao的实现类，由mybatis直接实现。</p><p>UserDao.xml<br><img src="/2020/03/11/Mybatis%E5%AD%A6%E4%B9%A0/UserDaoxml.PNG" alt></p><?xml version="1.0" encoding="UTF-8"?><!DOCTYPE configuration        PUBLIC "-//mybatis.org//DTD Config 3.0//EN"        "http://mybatis.org/dtd/mybatis-3-config.dtd"><!-- mybatis主配置文件 --><configuration>    <!-- 配制环境 -->    <environments default="mysql">        <!-- 配置mysql的环境 -->        <environments id="mysql">            <!-- 配置事务类型 -->            <transactionManager type="JDBC"></transactionManager>            <!-- 配置数据源（连接池） -->            <dateSource type="POOLED">                <!-- 配置连接数据库的四个基本信息 -->                <property name="driver" value="com.mysql.jdbc.Driver"></property>                <property name="url" value="jdbc：mysql：//localhost:3306/eesy_mybatis"></property>                <property name="username" value="root"></property>                <property name="passsword" value="123456"></property>            </dateSource><pre><code>    &lt;/environments&gt;&lt;/environments&gt;&lt;!-- 使用配置文件实现maybatis数据库操作，指定映射配置文件的位置，映射配置文件指的是每个dao的独立配置文件 --&gt;    &lt;mappers&gt;    &lt;mapper resource=&quot;com.itz.dao.UserDao.xml&quot; /&gt;&lt;/mappers&gt;或者&lt;!-- 使用注解实现maybatis数据库操作，移除UserDao.xml，在dao接口方法上使用@select注解，指定sql语句。在mapper中，指定class属性是dao接口的全限定类名 --&gt;    &lt;mappers&gt;    &lt;mapper resource=&quot;com.itz.dao.UserDao&quot; /&gt;&lt;/mappers&gt;</code></pre></environments></environments></configuration><p>环境搭建好后</p><h4 id="test步骤"><a href="#test步骤" class="headerlink" title="test步骤"></a>test步骤</h4><p>1.读取配置文件<br>    inputStream in=Pesources.getResourceAsStream(“SqlMapConfig.xml”);</p><pre><code>2.创建SqlSessionFactory工厂方法SqlSessionFatoryBuilder builder=new SqlSessionFatoryBuilder();SqlSEssionFatctory factory=builder.build(in);3.使用工厂产生SqlSeession对象SqlSession session= factory.openSession(); 4.使用SqlSession创建Dao接口的代理对象UserDao userDao=session.getMapper(UserDao.class);//UserDao是接口，包含未实现方法5.使用代理对象执行方法list&lt;User&gt; users=userDao.fandAll();dor(User user:users) {syste.out.println(user);}//打印所有的user6.释放资源session.close();in.close();</code></pre><p>读取配置文件，准备一个工厂生产一个为我们提供dao实现的对象，有了这个dao就能实现查询数据库等操作。，实现功能，最后释放资源。</p><p>mybatis两种数据库访问方式，xml方式和注解方式，见上。</p><h4 id="mybatis也可以实现dao实现。"><a href="#mybatis也可以实现dao实现。" class="headerlink" title="mybatis也可以实现dao实现。"></a>mybatis也可以实现dao实现。</h4><p>在test步骤中改变第3,4步，使用工厂创建dao对象<br>UserDao userdao = new UserDaoImpl(factory);<br>去掉session.close();</p><pre><code>编写UserDaoImpl类继承UsreDao接口private SqlSessionFactory factory；public UserDaoImpl（SqlSessionFactory factory）｛    this.factory=factory;｝public findAll(){    1.使用工厂创建SqlSession对象    SqlSession session = factory.openSession();    2.使用session查询所有方法    List&lt;user&gt; users=session.selectList(satement:&quot;com.itz.dao.UserDao.fandAll&quot;);//需要namespace+id，才能定位要执行的sql语句。    3.返回查询结果    return users；}例.11.读取配置文件inputStream in=Pesources.getResourceAsStream(&quot;SqlMapConfig.xml&quot;);//1.读取配置文件时，有相对路径（src.com....），绝对路径(d:mai/it/...),部署后都不能用。2.使用类加载器，他只能读取类路径的配置文件；使用ServletContext对象的getRealPath（）。2.创建SqlSessionFactory工厂方法SqlSessionFatoryBuilder builder=new SqlSessionFatoryBuilder();SqlSEssionFatctory factory=builder.build(in);//创建工厂，Myabtis用了构建者模式，in代表什么呢？？？3.使用工厂产生SqlSeession对象SqlSession session= factory.openSession(); //如果用new 实现，每次更换实现方法是都需要改动实现方法名。重新部署，浪费时间。4.使用SqlSession创建Dao接口的代理对象UserDao userDao=session.getMapper(UserDao.class);//getmapper代理模式5.使用代理对象执行方法list&lt;User&gt; users=userDao.fandAll();for(User user:users) {syste.out.println(user);}//打印所有的user6.释放资源session.close();in.close();实现功能只需把上面例.1修改inputStream in=Pesources.getResourceAsStream(&quot;SqlMapConfig.xml&quot;).session.getMapper(UserDao.class);list&lt;User&gt; users=userDao.fandAll();for(User user:users) {syste.out.println(user);}session.close();in.close();例.1的2,3,4,5是为了更灵活的使用满足需求。</code></pre><p><img src="/2020/03/11/Mybatis%E5%AD%A6%E4%B9%A0/%E5%85%A5%E9%97%A8%E6%A1%88%E4%BE%8B%E7%9A%84%E5%88%86%E6%9E%90.png" alt></p><h3 id="自定义Mybatis的分析"><a href="#自定义Mybatis的分析" class="headerlink" title="自定义Mybatis的分析"></a>自定义Mybatis的分析</h3><pre><code>mybatis 使用代理dao的方式增删改查时做了什么？    1.创建代理对象    2.在代理对象中调用selectList。</code></pre><p>mybatis执行过程<br><img src="/2020/03/11/Mybatis%E5%AD%A6%E4%B9%A0/%E8%87%AA%E5%AE%9A%E4%B9%89Mybatis%E5%88%86%E6%9E%90.png" alt></p><h3 id="JDBC是Java提供的一个操作数据库的API；"><a href="#JDBC是Java提供的一个操作数据库的API；" class="headerlink" title="JDBC是Java提供的一个操作数据库的API；"></a>JDBC是Java提供的一个操作数据库的API；</h3><p>MyBatis是一个支持普通SQL查询，存储过程和高级映射的优秀持久层框架。MyBatis消除了几乎所有的JDBC代码和参数的手工设置以及对结果集的检索封装。MyBatis可以使用简单的XML或注解用于配置和原始映射，将接口和Java的POJO（Plain Old Java Objects，普通的Java对象）映射成数据库中的记录。</p><p>MyBatis是对JDBC的封装。相对于JDBC，MyBatis有以下优点：</p><ol><li>优化获取和释放</li></ol><p>我们一般在访问数据库时都是通过数据库连接池来操作数据库，数据库连接池有好几种，比如C3P0、DBCP，也可能采用容器本身的JNDI数据库连接池。我们可以通过DataSource进行隔离解耦，我们统一从DataSource里面获取数据库连接，DataSource具体由DBCP实现还是由容器的JNDI实现都可以，所以我们将DataSource的具体实现通过让用户配置来应对变化。</p><p>2.SQL统一管理，对数据库进行存取操作</p><p>我们使用JDBC对数据库进行操作时，SQL查询语句分布在各个Java类中，这样可读性差，不利于维护，当我们修改Java类中的SQL语句时要重新进行编译。</p><p>Mybatis可以把SQL语句放在配置文件中统一进行管理，以后修改配置文件，也不需要重新就行编译部署。</p><p>3.生成动态SQL语句</p><p>我们在查询中可能需要根据一些属性进行组合查询，比如我们进行商品查询，我们可以根据商品名称进行查询，也可以根据发货地进行查询，或者两者组合查询。如果使用JDBC进行查询，这样就需要写多条SQL语句。</p><p>Mybatis可以在配置文件中通过使用<if test="””"></if>标签进行SQL语句的拼接，生成动态SQL语句。比如下面这个例子：</p><select id="getCountByInfo" parametertype="User" resulttype="int">        select count(*) from user        <where>            <if test="nickname!=null">                and nickname = #{nickname}             </if>            <if test="email!=null">                and email = #{email}             </if>        </where></select><p>就是通过昵称或email或者二者的组合查找用户数。</p><p>4.能够对结果集进行映射</p><p>我们在使用JDBC进行查询时，返回一个结果集ResultSet,我们要从结果集中取出结果封装为需要的类型</p><p>在Mybatis中我们可以设置将结果直接映射为自己需要的类型，比如：JavaBean对象、一个Map、一个List等等。像上个例子中就是将结果映射为int类型。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Mybatis概述&quot;&gt;&lt;a href=&quot;#Mybatis概述&quot; class=&quot;headerlink&quot; title=&quot;Mybatis概述&quot;&gt;&lt;/a&gt;Mybatis概述&lt;/h3&gt;&lt;p&gt;什么是框架&lt;br&gt;框架是整个或部分系统的可重用设计，表现为一组抽象构件及抽象构件实例
      
    
    </summary>
    
    
      <category term="程序人生" scheme="https://cnawesome.github.io/categories/%E7%A8%8B%E5%BA%8F%E4%BA%BA%E7%94%9F/"/>
    
      <category term="java" scheme="https://cnawesome.github.io/categories/%E7%A8%8B%E5%BA%8F%E4%BA%BA%E7%94%9F/java/"/>
    
    
      <category term="mybatis" scheme="https://cnawesome.github.io/tags/mybatis/"/>
    
  </entry>
  
  <entry>
    <title>java项目基础知识</title>
    <link href="https://cnawesome.github.io/2020/03/11/java%E9%A1%B9%E7%9B%AE%E5%9F%BA%E7%A1%80/"/>
    <id>https://cnawesome.github.io/2020/03/11/java%E9%A1%B9%E7%9B%AE%E5%9F%BA%E7%A1%80/</id>
    <published>2020-03-11T13:08:33.143Z</published>
    <updated>2020-02-23T08:18:38.683Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Maven"><a href="#Maven" class="headerlink" title="Maven"></a>Maven</h2><p>学习项目时<br>构件新项目使用到maven了解类似maven的内容</p><p>Maven是一个软件项目管理工具</p><p>创建项目时可选择该种模式开发项目，是一种为了开发管理的工具。</p><p>Maven项目对象模型(POM)，可以通过一小段描述信息来管理项目的构建，报告和文档的软件项目管理工具。<br>Maven(翻译为”专家”，”内行”)是跨平台的项目管理工具。主要服务于基于Java平台的项目构建，依赖管理和项目信息管理。</p><p>Maven 除了以程序构建能力为特色之外，还提供高级项目管理工具。由于 Maven 的缺省构建规则有较高的可重用性，所以常常用两三行 Maven 构建脚本就可以构建简单的项目。由于 Maven 的面向项目的方法，许多 Apache Jakarta 项目发文时使用 Maven，而且公司项目采用 Maven 的比例在持续增长。</p><p>Maven是一个项目管理工具，它包含了一个项目对象模型 (Project Object Model)，一组标准集合，一个项目生命周期(Project Lifecycle)，一个依赖管理系统(Dependency Management System)，和用来运行定义在生命周期阶段(phase)中插件(plugin)目标(goal)的逻辑。</p><p>1.项目构建<br>项目构建过程包括【清理项目】→【编译项目】→【测试项目】→【生成测试报告】→【打包项目】→【部署项目】这几个步骤，这六个步骤就是一个项目的完整构建过程。</p><p>2.依赖管理<br>依赖指的是jar包之间的相互依赖，比如我们搭建一个Struts2的开发框架时，光光有struts2-core-2.3.16.3.jar这个jar包是不行的，struts2-core-2.3.16.3.jar还依赖其它的jar包，依赖管理指的就是使用Maven来管理项目中使用到的jar包，Maven管理的方式就是“自动下载项目所需要的jar包，统一管理jar包之间的依赖关系”。</p><p>3.使用Maven的好处<br>　　Maven中使用约定，约定java源代码代码必须放在哪个目录下，编译好的java代码又必须放到哪个目录下，这些目录都有明确的约定。<br>  Maven的每一个动作都拥有一个生命周期，例如执行 mvn install 就可以自动执行编译，测试，打包等构建过程<br>　　只需要定义一个pom.xml,然后把源码放到默认的目录，Maven帮我们处理其他事情<br>　　使用Maven可以进行项目高度自动化构建，依赖管理(这是使用Maven最大的好处)，仓库管理。</p><p>4.Maven项目的目录约定<br>MavenProjectRoot(项目根目录)<br>   |—-src<br>   |     |—-main<br>   |     |         |—-java ——存放项目的.java文件<br>   |     |         |—-resources ——存放项目资源文件，如spring, hibernate配置文件<br>   |     |—-test<br>   |     |         |—-java ——存放所有测试.java文件，如JUnit测试类<br>   |     |         |—-resources ——存放项目资源文件，如spring, hibernate配置文件<br>   |—-target ——项目输出位置<br>   |—-pom.xml —-用于标识该项目是一个Maven项目</p><p>pom.xml文件中的内容如下：</p> <?xml version="1.0" encoding="UTF-8"?><p>  <project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemalocation="http://maven.apache.org/POM/4.0.0   http://maven.apache.org/xsd/maven-4.0.0.xsd"><br>      <!--所有的Maven项目都必须配置这四个配置项--><br>      <modelVersion>4.0.0</modelVersion><br>      <!--groupId指的是项目名的项目组，默认就是包名--><br>      <groupId>cn.gacl.maven.hello</groupId><br>     <!--artifactId指的是项目中的某一个模块，默认命名方式是"项目名-模块名"--><br>     <artifactId>hello-first</artifactId><br>     <!--version指的是版本，这里使用的是Maven的快照版本--><br>     <version>SNAPSHOT-0.0.1</version><br> </project></p><p>编写好java代码后，使用Maven编译完成之后，在项目根目录下会生成一个target文件夹</p><p>在终端使用”mvn clean”命令清除编译结果，也就是把编译生成的target文件夹删掉</p><p>Maven中心仓库下载到本地的jar包的默认存放在”${user.home}/.m2/repository”中，${user.home}表示当前登录系统的用户目录(如”C:\Users\gacl”)，我们可以自己设置下载到本地时的jar包的存放目录，在“E:\”目录下创建一个“repository”文件夹，找到apache-maven-3.2.3\conf目录下的settings.xml文件，编辑setting.xml文件在后面加上代码 <localRepository>E:/repository</localRepository></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Maven&quot;&gt;&lt;a href=&quot;#Maven&quot; class=&quot;headerlink&quot; title=&quot;Maven&quot;&gt;&lt;/a&gt;Maven&lt;/h2&gt;&lt;p&gt;学习项目时&lt;br&gt;构件新项目使用到maven了解类似maven的内容&lt;/p&gt;
&lt;p&gt;Maven是一个软件项目管理工具
      
    
    </summary>
    
    
      <category term="java" scheme="https://cnawesome.github.io/categories/java/"/>
    
    
      <category term="maven" scheme="https://cnawesome.github.io/tags/maven/"/>
    
  </entry>
  
  <entry>
    <title>java线程</title>
    <link href="https://cnawesome.github.io/2020/03/11/java%E7%BA%BF%E7%A8%8B/"/>
    <id>https://cnawesome.github.io/2020/03/11/java%E7%BA%BF%E7%A8%8B/</id>
    <published>2020-03-11T13:08:33.138Z</published>
    <updated>2020-02-24T03:21:33.637Z</updated>
    
    <content type="html"><![CDATA[<pre><code>runnable 无返回类型 callable 有返回类型</code></pre><h3 id="线程池"><a href="#线程池" class="headerlink" title="线程池"></a>线程池</h3><p>//申请线程池<br>ExecutorServide service = Executors.newFixedCachedPool();//线程受线程池指挥拿取任务<br>ExecutorServide service = Executors.newCacheThreadPool();<br>ScheduleExecutorServide service = Executor.newScheduleThreadPool();//已一定的频率执行线程</p><p>//关闭线程池<br>service.shutdown();</p><p>WorkStealPool//线程窃取，线程主动去拿任务执行</p><p>static class R implentments runnable{ //runnable 任务实现类<br>        int time;</p><pre><code>R(int t){    this.time=t;}    public void run (){            timeUnit.MILLISECONDS.sleep(500);    }    system.out.println(time+&quot; &quot;+Thread.currentThread().getName());</code></pre><p>}</p><p>service.execute(new R(1000));//开启线程执行runable任务</p><h3 id="处理大型数组求和问题"><a href="#处理大型数组求和问题" class="headerlink" title="处理大型数组求和问题"></a>处理大型数组求和问题</h3><p>1.ForkJoinPool方式</p><p>public class T1_ForkJoinPool {<br>    static int[]nums= new int[1000000];<br>    static final int MAX_NUM=50000;<br>    static Random r=new Random();</p><pre><code>static {    for(int i=0;i&lt;nums.length;i++)     {        nums[i]=r.nextInt();    }    System.out.println(Arrays.stream(nums).sum());//stream api,把数组转化为流}static class AddTask extends RecursiveAction{ //继承forkjoin类    int start,end;    AddTask(int s,int e) {        start=s;        end=e;    }    @Override    protected void compute() {        if(end-start&lt;=MAX_NUM)         {            long sum = 0L;            for(int i=start;i&lt;end;i++) sum += nums[i];            System.out.println(&quot;from:&quot;+start+&quot; to:&quot;+end+&quot;=&quot;+sum);        }        else        {            int middle=start+(end-start)/2;            AddTask subTask1=new AddTask(start, middle);            AddTask subTask2=new AddTask(middle, end);            subTask1.fork();            subTask2.fork();        }    }}public static void main(String[] args) throws IOException {    ForkJoinPool fjp=new ForkJoinPool();    AddTask task=new AddTask(0, nums.length);    fjp.execute(task);    System.in.read();}</code></pre><p>}</p><p>大多数使用的线程池来自于threadpoolExecutor</p><p>//自定义线程池<br>public class threadpoolExecutor｛｝</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;pre&gt;&lt;code&gt;runnable 无返回类型 
callable 有返回类型&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;线程池&quot;&gt;&lt;a href=&quot;#线程池&quot; class=&quot;headerlink&quot; title=&quot;线程池&quot;&gt;&lt;/a&gt;线程池&lt;/h3&gt;&lt;p&gt;//申请线程池&lt;br&gt;E
      
    
    </summary>
    
    
      <category term="java" scheme="https://cnawesome.github.io/categories/java/"/>
    
    
      <category term="java" scheme="https://cnawesome.github.io/tags/java/"/>
    
      <category term="线程" scheme="https://cnawesome.github.io/tags/%E7%BA%BF%E7%A8%8B/"/>
    
  </entry>
  
</feed>
